[
  {
    "start": 0,
    "end": 2,
    "speaker": "Lex Fridman",
    "timestamp": "(00:00:00)",
    "text": "The following is a conversation with Michael Paulson, better known online as ThePrimeagen. He is a programmer who has entertained and inspired millions of people to have fun building stuff with software, whether you’re a newbie or a seasoned developer who has been battling it out in the software engineering trenches for decades. In short, ThePrimeagen is a legendary programmer and a great human being with an inspiring roller coaster of a life story. This is the Lex Fridman Podcast. To support it, please check out our sponsors in the description. And now, dear friends, here’s ThePrimeagen. Love for programming"
  },
  {
    "start": 3,
    "end": 4,
    "speaker": "Lex Fridman",
    "timestamp": "(00:00:42)",
    "text": "What do you love most about programming? What brings you joy when you program?"
  },
  {
    "start": 5,
    "end": 6,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:00:46)",
    "text": "I can tell you the first time that I ever felt love in programming, or felt that joy or that excitement-"
  },
  {
    "start": 7,
    "end": 8,
    "speaker": "Lex Fridman",
    "timestamp": "(00:00:51)",
    "text": "Sure."
  },
  {
    "start": 9,
    "end": 10,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:00:52)",
    "text": "Which was in college. It was the second class, data structures, and the teacher that was teaching Ray Babcock, he was talking about linked lists. Now you have to learn Java at Montana State University when I went, and so he’s off there explaining this whole linked list thing and all that, and then he shows code. And in the code it’s abstract class node or whatever it was, I can’t remember what it was. And then it had a private member, and that private member was of type node, and I’ve never seen that before. It is a class that is called node with a member that is of itself. And for the first time ever I was like, “Oh my gosh. There’s no end. There’s no way to iterate. This is not a set of 10 items. This is a set of infinite items.” And so my mind kind of exploded in that moment, like, “What you can express is huge. I can see what memory looks like. I can see this hopping through space.”"
  },
  {
    "start": 12,
    "end": 13,
    "speaker": "Lex Fridman",
    "timestamp": "(00:02:41)",
    "text": "Yeah, let’s wax philosophical about a linked list. It is pretty profound. For people who don’t know, a node in a linked list doesn’t know anything about the world it’s in. It only knows about the thing it’s linked to, its neighbor. Maybe that’s symbolic. It’s a metaphor for all of us humans. There’s billions of us on this planet and we only know about our local little network."
  },
  {
    "start": 14,
    "end": 15,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:03:04)",
    "text": "Yeah."
  },
  {
    "start": 16,
    "end": 17,
    "speaker": "Lex Fridman",
    "timestamp": "(00:03:05)",
    "text": "And it’s kind of beautiful. And you realize in that little simple data structure, you can construct arbitrarily large systems, and they’re like roots that go through memory. And then of course, that’s where you get all the programming languages that allow you to dump junk into memory and have memory leaks, and therefore create infinite pain as you try to figure out where that unfreed memory is. For me, yeah, probably… It’s so beautiful the way you put that. Linked lists are indeed beautiful. Recursion also for me, when I finally wrapped my brain around what it means to write a recursive function."
  },
  {
    "start": 18,
    "end": 19,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:03:49)",
    "text": "What was the thing? What was one that taught you? Because I think we all… You probably did factorial, where you just do a quick factorial of it. It just doesn’t hit home. What was the thing that made it hit home?"
  },
  {
    "start": 20,
    "end": 21,
    "speaker": "Lex Fridman",
    "timestamp": "(00:04:01)",
    "text": "I don’t remember the first."
  },
  {
    "start": 22,
    "end": 23,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:04:05)",
    "text": "I remember my first. How do you not remember your first? It was magic."
  },
  {
    "start": 24,
    "end": 25,
    "speaker": "Lex Fridman",
    "timestamp": "(00:04:08)",
    "text": "I’ve had so many that it just…"
  },
  {
    "start": 26,
    "end": 27,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:04:11)",
    "text": "I mean, you are a Lisp guy. You’re probably pretty used to the recursion."
  },
  {
    "start": 28,
    "end": 29,
    "speaker": "Lex Fridman",
    "timestamp": "(00:04:14)",
    "text": "Yeah, all I remember is just surrounded by sea of parentheses. I mean that’s really, probably, when I… In high school, I think it was either Java or C++. Wow, how do I not remember that? It must have been C++. And then college, the generic bullshit software engineering classes were Java, but then the renegades, the cool kids, were all using Lisp. That’s when you’re doing the AI, the quote-unquote “AI” at that time, that that was Lisp. If you want to write a chess engine, you would use Lisp. And so for me, probably the moment I really fell in love with programming was Lisp, and writing Othello programs and chess engines, all kinds of engines that play a game, and then I could play against that thing and that thing would beat me. The joy of being destroyed by the thing you’ve created. And oh, game of life too. Cellular automata. That’s when I…"
  },
  {
    "start": 31,
    "end": 32,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:06:11)",
    "text": "Oh man. Well, first off, mine was in Java, so my first was a little bit more rigid, kind of, you know, a corporate experience."
  },
  {
    "start": 33,
    "end": 34,
    "speaker": "Lex Fridman",
    "timestamp": "(00:06:20)",
    "text": "Yeah. Cold, meaningless…"
  },
  {
    "start": 35,
    "end": 36,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:06:23)",
    "text": "But… yeah. I was in a lab, everyone was using CentOS at that… or Cent OS or however you say. I always called it CentOS, the fresh maker."
  },
  {
    "start": 37,
    "end": 38,
    "speaker": "Lex Fridman",
    "timestamp": "(00:06:29)",
    "text": "Yeah."
  },
  {
    "start": 39,
    "end": 40,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:06:30)",
    "text": "And so it’s just like I’m in this very cold…"
  },
  {
    "start": 41,
    "end": 42,
    "speaker": "Lex Fridman",
    "timestamp": "(00:06:32)",
    "text": "That’s nice."
  },
  {
    "start": 43,
    "end": 44,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:06:33)",
    "text": "Thank you."
  },
  {
    "start": 45,
    "end": 46,
    "speaker": "Lex Fridman",
    "timestamp": "(00:06:33)",
    "text": "Yeah."
  },
  {
    "start": 47,
    "end": 48,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:06:34)",
    "text": "I’m in this cold, rigid environment with my Microsoft keyboard, programming away in Java. And I still have just such… this memory of despair, because I love programming, this was after the linked list, and I cannot figure out recursion. And so I go to the university store and I buy a book and it’s Deitel and Deitel learn Java and it has a section, Recursion, so I open it up and I start reading it, and it just doesn’t hit home. And I’m spiraling into this."
  },
  {
    "start": 49,
    "end": 50,
    "speaker": "Lex Fridman",
    "timestamp": "(00:06:35)",
    "text": "Yeah."
  },
  {
    "start": 51,
    "end": 52,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:07:02)",
    "text": "Like, “Maybe I’m not a programmer. Maybe I’m not worthy enough to enter into this circle of people who can figure out what the heck recursion means.” And Deitel and Deitel’s, I still remember this, their exact phrase was, “Every young budding developer solves this recursion program,” and it was the Tower of Hanoi. And guess what? I don’t know if I can solve the Tower of Hanoi to this day. It’s a very hard recursive problem. And I just sat there and thought, ” Oh my gosh. I’m not going to make it.” And I sat there in the lab for eight hours, 10 hours doing these things, so worried. It’s the week of recursion, we have to do a lab assignment. “I’m not going to be able to do it.” And I just remember being genuinely worried about that. And then…"
  },
  {
    "start": 55,
    "end": 56,
    "speaker": "Lex Fridman",
    "timestamp": "(00:09:01)",
    "text": "I mean it does require, to be fair, a leap of faith, because people will tell you, those conformist, dogmatic, Java instructors will tell you, that this is important, to understand recursion. But it takes a leap of faith that this is a different way of looking at the world, and it’s a powerful way of looking at the world. Actually, I think I remember my first now."
  },
  {
    "start": 57,
    "end": 58,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:09:37)",
    "text": "All right."
  },
  {
    "start": 59,
    "end": 60,
    "speaker": "Lex Fridman",
    "timestamp": "(00:09:40)",
    "text": "I think it was [inaudible 00:09:42] first search for one of the games. Maybe Othello, something like that, and for that implementing recursion. Understand that you can search trajectories through the space of states and do that recursively? That was mind blowing."
  },
  {
    "start": 61,
    "end": 62,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:09:57)",
    "text": "Yeah."
  },
  {
    "start": 63,
    "end": 64,
    "speaker": "Lex Fridman",
    "timestamp": "(00:09:57)",
    "text": "Just imagining the possibilities."
  },
  {
    "start": 65,
    "end": 66,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:10:02)",
    "text": "You can just see it all. Yeah."
  },
  {
    "start": 67,
    "end": 69,
    "speaker": "Lex Fridman",
    "timestamp": "(00:10:02)",
    "text": "Yeah, just numbers flying. It was like The Beautiful Mind. And that’s when I also discovered conspiracy theories, and I just saw. I saw the truth. Okay, yeah. So what were we talking about? Oh, what was the most painful aspect of programming for you? What memories do you have of deep, profound suffering in terms of programming in the early days? Hardest part of programming"
  },
  {
    "start": 70,
    "end": 71,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:10:27)",
    "text": "I would say the biggest one that I can really hold on to had to be one of two experiences. The first experience was when I was at a place called Schedulicity, and… Am I not allowed to say the place [inaudible 00:10:43]"
  },
  {
    "start": 72,
    "end": 73,
    "speaker": "Lex Fridman",
    "timestamp": "(00:10:42)",
    "text": "You’re allowed."
  },
  {
    "start": 74,
    "end": 75,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:10:44)",
    "text": "I’m not sure if they’re even operating still at this point, but they’re in-"
  },
  {
    "start": 76,
    "end": 77,
    "speaker": "Lex Fridman",
    "timestamp": "(00:10:47)",
    "text": "There was something funny about the name. I’m sorry."
  },
  {
    "start": 78,
    "end": 79,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:10:48)",
    "text": "Oh, Schedulicity? Yeah. Actually, the name was so bad that when you looked at their paid-for Google ad terms that they would make sure that they’re at the top of the list, the spellings were just insane, because no one knew how to spell the word Schedulicity, and so the Google optimizing for that is just hilarious. But okay, go back to the thing."
  },
  {
    "start": 82,
    "end": 83,
    "speaker": "Lex Fridman",
    "timestamp": "(00:12:10)",
    "text": "So the absence of uncertainty, the absence of challenge, was the pain?"
  },
  {
    "start": 84,
    "end": 85,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:12:14)",
    "text": "Yeah."
  },
  {
    "start": 86,
    "end": 87,
    "speaker": "Lex Fridman",
    "timestamp": "(00:12:15)",
    "text": "That’s pretty profound, Prime."
  },
  {
    "start": 88,
    "end": 89,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:12:18)",
    "text": "I’m more than just good looks. I want you to know that."
  },
  {
    "start": 90,
    "end": 91,
    "speaker": "Lex Fridman",
    "timestamp": "(00:12:21)",
    "text": "It’s a low bar. What do you identify as? I’m enjoying asking the general question."
  },
  {
    "start": 92,
    "end": 93,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:12:27)",
    "text": "38, male."
  },
  {
    "start": 94,
    "end": 95,
    "speaker": "Lex Fridman",
    "timestamp": "(00:12:29)",
    "text": "Male."
  },
  {
    "start": 96,
    "end": 98,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:12:29)",
    "text": "Husband of beautiful wife. Types of programming"
  },
  {
    "start": 99,
    "end": 100,
    "speaker": "Lex Fridman",
    "timestamp": "(00:12:30)",
    "text": "Okay. You stream about all kinds of programming, but what kind of programmer are you? Are you full-stack developer, web programming? And maybe can you lay out all the different kinds of programming and then place yourself in that, in terms of your identity. Sexual identity as well."
  },
  {
    "start": 101,
    "end": 102,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:12:49)",
    "text": "Yeah, we can put it all in there."
  },
  {
    "start": 103,
    "end": 104,
    "speaker": "Lex Fridman",
    "timestamp": "(00:12:51)",
    "text": "Okay."
  },
  {
    "start": 105,
    "end": 106,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:12:52)",
    "text": "Plus, obviously those two are very, very tightly coupled."
  },
  {
    "start": 107,
    "end": 108,
    "speaker": "Lex Fridman",
    "timestamp": "(00:12:55)",
    "text": "I have seen you on the border of sexually aroused by certain languages. I think you got real excited about OCaml, or…"
  },
  {
    "start": 109,
    "end": 110,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:13:01)",
    "text": "OCaml. Let’s go. Thank you Dillon Mulroy [inaudible 00:13:08]"
  },
  {
    "start": 111,
    "end": 112,
    "speaker": "Lex Fridman",
    "timestamp": "(00:13:08)",
    "text": "Okay, wow."
  },
  {
    "start": 113,
    "end": 114,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:13:09)",
    "text": "Yeah."
  },
  {
    "start": 115,
    "end": 116,
    "speaker": "Lex Fridman",
    "timestamp": "(00:13:09)",
    "text": "I did not expect that. That escalated quickly. Anyway, what do you identify as?"
  },
  {
    "start": 117,
    "end": 118,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:13:13)",
    "text": "Okay, so first let’s do the previous or the in-between question first, which is the different archetypes. I think that’s a really interesting question, because if you go on Twitter or you’re new, your thoughts are probably that there is just web programming, and maybe there’s some other stuff, yeah, like game programming, but you’d be like, game programming in JavaScript and on the web. There’s this very myopic view of the programming world, and I bet if you ask a lot of people these days what is the most popular form of programming, they’d probably say web. If you said what contains the most amount of repos, how many percentage of repos on GitHub are web-based, they probably say 90% or some huge number. But the reality is that there’s an entire embedded robotics world."
  },
  {
    "start": 121,
    "end": 122,
    "speaker": "Lex Fridman",
    "timestamp": "(00:15:04)",
    "text": "Nice."
  },
  {
    "start": 123,
    "end": 124,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:15:05)",
    "text": "You know, it felt like you’re on an iPad, but it actually wasn’t on an iPad. And this was iPad 2 by the way, so this is a long time ago. And so every single time I got into a job it’s like, “Okay, hey, we need to do a library. Hey, can you work on a build system?” So back then there was no Grunt, there was no gulp, there was no any of those things, so I had to hand roll my own JavaScript build system. And so I always fell into these positions of building tools for developers to be successful. And I’ve always really enjoyed that region. So as I went on to say Netflix, spent 10 years there, I’d say the majority of my 10 years were building things for developers to use that they could be successful at their job."
  },
  {
    "start": 126,
    "end": 127,
    "speaker": "Lex Fridman",
    "timestamp": "(00:16:20)",
    "text": "Actually that gives you a really nice big-picture view of programming in general. So I love the idea of just starting at the interface, like you need to pinch and all that kind of stuff, and then figure out the entire thing that requires to make that happen, including maybe the side quest tooling, how to make it more productive and efficient, all that kind of stuff. So the entirety of the thing. That’s really cool."
  },
  {
    "start": 128,
    "end": 129,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:16:43)",
    "text": "Yeah."
  },
  {
    "start": 130,
    "end": 131,
    "speaker": "Lex Fridman",
    "timestamp": "(00:16:43)",
    "text": "Okay, so that would be full stack? By that general definition of full stack, meaning…"
  },
  {
    "start": 132,
    "end": 133,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:16:49)",
    "text": "Perhaps, yeah."
  },
  {
    "start": 134,
    "end": 135,
    "speaker": "Lex Fridman",
    "timestamp": "(00:16:50)",
    "text": "Versus systems starting at the bottom and trying to optimize a certain kind of specific thing without seeing the big picture of what the resulting interface would look like."
  },
  {
    "start": 136,
    "end": 137,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:16:50)",
    "text": "Yeah."
  },
  {
    "start": 138,
    "end": 139,
    "speaker": "Lex Fridman",
    "timestamp": "(00:17:02)",
    "text": "And a lot of people in web programming, they never go beyond the front end of how a thing looks. They kind of always assume there’ll be somebody, some grunt in the shadows, in the darkness of the basement, that will implement the back end."
  },
  {
    "start": 140,
    "end": 141,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:17:17)",
    "text": "Some Gilfoyle out there will be doing the back end."
  },
  {
    "start": 142,
    "end": 143,
    "speaker": "Lex Fridman",
    "timestamp": "(00:17:19)",
    "text": "Gilfoyle."
  },
  {
    "start": 144,
    "end": 145,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:17:19)",
    "text": "Yeah, I like to call myself a generalist, just to give some ideas. At one point at Netflix I built the WebSocket connection. So for TVs, how WebSocket works is code I just wrote. And so I built the framing thing, and before that I was doing stuff with memory, and before that I built a UI for a tool. Right? I can just do the thing. You just tell me the thing to do and I’ll just go do the thing. I don’t try to get super good at one specific activity. I don’t want to be a Kubernetes engineer, who’s the world’s greatest employer, but if I had to go learn Kubernetes, I’d go learn it and learn how to deploy some things, and then hopefully move on to the next thing, if that makes sense."
  },
  {
    "start": 146,
    "end": 147,
    "speaker": "Lex Fridman",
    "timestamp": "(00:17:58)",
    "text": "I posted about the fact that I’m talking to you on Reddit, and there’s a lot of wonderful questions. Somebody mentioned that I should ask you about DevOps. Can you explain what DevOps is? Is it a kind of special ops of programmers, is it SEAL Team Six of developers? What’s DevOps? Can you define… Are you a DevOps engineer?"
  },
  {
    "start": 148,
    "end": 149,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:18:14)",
    "text": "Well, people keep telling me DevOps isn’t real. There’s actually, you want platform engineers, cloud engineers, infra engineers. I just often think the easiest way, if we’re doing just some basic nomenclature, it’s just DevOps are the people that make sure that when you launch a service and all of that, it doesn’t just disappear. Right? It’s all the backbone of being able to operate something at scale."
  },
  {
    "start": 151,
    "end": 152,
    "speaker": "Lex Fridman",
    "timestamp": "(00:19:04)",
    "text": "Yeah, those people are actually amazing."
  },
  {
    "start": 153,
    "end": 154,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:19:06)",
    "text": "Yeah."
  },
  {
    "start": 155,
    "end": 156,
    "speaker": "Lex Fridman",
    "timestamp": "(00:19:07)",
    "text": "The time I spent at Google, it’s like oh yeah yeah, there’s all these fancy machine learning people, but the folks that are running the infrastructure, basically that make sure that shit doesn’t go down, they’re like wizards, and they’re essential."
  },
  {
    "start": 157,
    "end": 158,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:19:23)",
    "text": "It’s a very incredible vertical of job. And obviously I’m using a very broad term to describe, I’m sure, a bunch… You know, because making sure stuff doesn’t go down, you could also say that’s an SRE, right? Site reliability engineer. Whatever, the ones that wear the bomber jackets at Google. And so when we say DevOps, I think people get very particular about terms specifically in this category. They’re like, “Well actually, you’re mentioning infrastructure engineer versus site reliability engineer.” It’s just like, “Okay, yes, I hear you,” but generally when someone thinks DevOps, they think somebody that manages the servers and their life cycles and the reliability. There’s DevOps. Is it real? I’m not sure."
  },
  {
    "start": 159,
    "end": 160,
    "speaker": "Lex Fridman",
    "timestamp": "(00:19:58)",
    "text": "Okay."
  },
  {
    "start": 161,
    "end": 162,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:19:59)",
    "text": "Did Vercel kill DevOps?"
  },
  {
    "start": 163,
    "end": 164,
    "speaker": "Lex Fridman",
    "timestamp": "(00:20:02)",
    "text": "Question mark?"
  },
  {
    "start": 165,
    "end": 166,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:20:03)",
    "text": "Question mark."
  },
  {
    "start": 167,
    "end": 169,
    "speaker": "Lex Fridman",
    "timestamp": "(00:20:04)",
    "text": "Yeah. Wow, you’re almost a journalist. That’s a headline. Let’s go back to the beginning. Life story"
  },
  {
    "start": 170,
    "end": 171,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:20:10)",
    "text": "All right."
  },
  {
    "start": 172,
    "end": 173,
    "speaker": "Lex Fridman",
    "timestamp": "(00:20:11)",
    "text": "Baby Prime. So you mentioned Netflix."
  },
  {
    "start": 174,
    "end": 175,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:20:15)",
    "text": "Oh, I worked at Netflix by the way."
  },
  {
    "start": 176,
    "end": 177,
    "speaker": "Lex Fridman",
    "timestamp": "(00:20:17)",
    "text": "For people who don’t know who ThePrimeagen is, he mentions the fact that he has been very successful and has worked at Netflix in basically every other sentence."
  },
  {
    "start": 178,
    "end": 179,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:20:29)",
    "text": "Correct. Almost as much as I mention Neovim."
  },
  {
    "start": 180,
    "end": 181,
    "speaker": "Lex Fridman",
    "timestamp": "(00:20:33)",
    "text": "Oh, great. Tell me more about Neovim. No, please don’t. So, baby Prime. At the very beginning. You’ve had one hell of a life, and I think it’s inspiring to a lot of people. You’ve gone through a lot of painful low points, including meth addiction, loss, and like you mentioned, you’ve come out of that to become a successful programmer and a person that inspires a huge number of people to get into programming, and just to find success in life. So maybe… I would love it if you laid out just your whole life journey from the beginning."
  },
  {
    "start": 182,
    "end": 183,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:21:11)",
    "text": "So I guess if we’re going to start with this whole journey, I think it’s probably best to start to when I was about four or five years old. That was the first time I was ever exposed to pornography, and it’s kind of just earwormed me for a large portion of my life. And so I don’t think there was a day that didn’t go by from when I was a very young lad all the way up until I was twenty-some years old where I didn’t think about porn on the daily basis. And so it was just every single day, even that young. And so it was just a very mind-consuming, time-consuming, thought consuming thing that plagued me, starting at a very young age."
  },
  {
    "start": 185,
    "end": 186,
    "speaker": "Lex Fridman",
    "timestamp": "(00:22:23)",
    "text": "Yeah. Yeah."
  },
  {
    "start": 187,
    "end": 188,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:22:24)",
    "text": "So, kind of rewind. As I got older, obviously was very good at computers, good at accessing porn, of course, played video games on the Internet. Fun fun kind of side quest story. I think the guy’s name is Lord Toc on Twitch. I can’t quite remember his name, but he built this game called Grail, G-R-A-A-L, and Graal Online. And when I was a young lad it was just like Zelda, except for it also had a level editor and it had a C-like language, and that’s how I discovered how to program, is I looked at these symbols and figured out what they meant, and then I was able to make things happen in the game. And that’s my introduction into programming. So thank you that guy, whatever your Twitch name was. But all right, so keep on going."
  },
  {
    "start": 197,
    "end": 198,
    "speaker": "Lex Fridman",
    "timestamp": "(00:29:41)",
    "text": "Nice."
  },
  {
    "start": 199,
    "end": 200,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:29:41)",
    "text": "PHP, yeah, 5.2 or something like that. It was great. Great times. And I was just so motivated to do that, and I would just program for… Sometimes I’d program for 24, 36 hours straight, and just nonstop, that’s all I wanted to do at all points. I think my wife got a little sick of me. She would be like, “Can you drop me off at school?” And I’d be like, “No, I’m programming.” I was not a very nice… You know, I didn’t think through things that well."
  },
  {
    "start": 201,
    "end": 202,
    "speaker": "Lex Fridman",
    "timestamp": "(00:30:04)",
    "text": "Yeah yeah. Yeah."
  },
  {
    "start": 203,
    "end": 205,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:30:05)",
    "text": "I was just so into it and I just did it nonstop, and that’s kind of how I became me, is that story, if that makes sense. Hardship"
  },
  {
    "start": 206,
    "end": 207,
    "speaker": "Lex Fridman",
    "timestamp": "(00:30:13)",
    "text": "Let’s try to reverse engineer some of the pain and some of the triumph. You made it sound easy at times. Let’s try to understand it better, maybe when you were seven years old. What do you think about the pain you’ve experienced there, losing your dad? What do you think? What kind of impact did it have on you? What kind of memories do you have at that time?"
  },
  {
    "start": 208,
    "end": 209,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:30:33)",
    "text": "The best way I can put it is that I just never knew what a dad was. I was young enough that I could maybe repress or just even have the capability of remembering things long-term. Because I know most people don’t remember a lot from when they’re young, and so I’m not exactly sure. I probably was at one of the best possible ages, if I’m going to lose a dad, to lose a dad. You know? If you’re going to lose one, if you’re 11 or 12, it’s a terrible age. That’s what my brother was, and he fell into drug addiction and never got back out. So I just have more of a fuzziness and just kind of a longing. I just wish I had a dad."
  },
  {
    "start": 210,
    "end": 211,
    "speaker": "Lex Fridman",
    "timestamp": "(00:31:10)",
    "text": "What impact did that have on your evolution, on your life, having that longing?"
  },
  {
    "start": 212,
    "end": 214,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:31:16)",
    "text": "I think that’s why I was so bad socially, in the sense that I was looking for approval, right? I needed approval. I think a lot of people desire that approval or that loving figure, and I just didn’t have that. So I think I just looked for it in everything else, right? If I were to psychoanalyze my actions. During the time, it’s not like I was actively thinking that, but yeah, I just always wanted something to fill in whatever that was I felt. High school"
  },
  {
    "start": 215,
    "end": 216,
    "speaker": "Lex Fridman",
    "timestamp": "(00:31:44)",
    "text": "I think a lot of people listening to this will resonate with your experience in high school. Being the outsider, being picked on, struggling through a lot of different complexities at home. What advice would you give to them?"
  },
  {
    "start": 217,
    "end": 218,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:31:58)",
    "text": "The worst part about high school is that you’re surrounded by a bunch of people your age and it feels eternal."
  },
  {
    "start": 219,
    "end": 220,
    "speaker": "Lex Fridman",
    "timestamp": "(00:32:05)",
    "text": "Yeah."
  },
  {
    "start": 221,
    "end": 222,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:32:05)",
    "text": "You don’t think… The people that are around you, you feel like are the people that will be there for the rest of your life. At least that’s what I thought. And I didn’t really even realize this until many years later, that they are going to be some of the least consequential people in your life."
  },
  {
    "start": 223,
    "end": 224,
    "speaker": "Lex Fridman",
    "timestamp": "(00:32:21)",
    "text": "Yeah."
  },
  {
    "start": 225,
    "end": 226,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:32:21)",
    "text": "Which is very shocking to think about, especially if you’re in it right now."
  },
  {
    "start": 227,
    "end": 228,
    "speaker": "Lex Fridman",
    "timestamp": "(00:32:26)",
    "text": "Yeah."
  },
  {
    "start": 229,
    "end": 230,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:32:27)",
    "text": "Right? Right now they are everything that your experience is, your whole reality. And then one day it all stops, and then real life starts to begin."
  },
  {
    "start": 231,
    "end": 232,
    "speaker": "Lex Fridman",
    "timestamp": "(00:32:36)",
    "text": "Yeah."
  },
  {
    "start": 233,
    "end": 234,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:32:37)",
    "text": "That’s such a shocking thing, and if I could just tell myself that, maybe I would have been a bunch of different person."
  },
  {
    "start": 235,
    "end": 236,
    "speaker": "Lex Fridman",
    "timestamp": "(00:32:42)",
    "text": "That’s so beautifully put. I mean, it is like a trial run. You know at the beginning of video games, there’s a little tutorial? That’s what that is."
  },
  {
    "start": 237,
    "end": 238,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:32:42)",
    "text": "Yeah."
  },
  {
    "start": 239,
    "end": 240,
    "speaker": "Lex Fridman",
    "timestamp": "(00:32:51)",
    "text": "And actually that should be a chance to try shit out, to take risks, because real life will begin with, there is more consequences after that."
  },
  {
    "start": 241,
    "end": 242,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:32:51)",
    "text": "Yeah."
  },
  {
    "start": 243,
    "end": 244,
    "speaker": "Lex Fridman",
    "timestamp": "(00:33:00)",
    "text": "Because real life will begin where there is more consequences after that."
  },
  {
    "start": 245,
    "end": 246,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:33:03)",
    "text": "Yeah."
  },
  {
    "start": 247,
    "end": 248,
    "speaker": "Lex Fridman",
    "timestamp": "(00:33:03)",
    "text": "Here you can, if you like a girl, ask her out. Try, try shit. If you get picked on, hit that guy back. Try shit out."
  },
  {
    "start": 249,
    "end": 250,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:33:11)",
    "text": "I’m not going to condone punching another person."
  },
  {
    "start": 251,
    "end": 252,
    "speaker": "Lex Fridman",
    "timestamp": "(00:33:13)",
    "text": "I will. Beat the shit out of him, and take some jiu-jitsu and learn how to take him down. And then that girl that rejected you will be like, “Hmm, maybe I’ll give that guy a second chance.” Be a bad motherfucker. It’s a chance to try stuff out. This is a very motivational speech for kicking ass."
  },
  {
    "start": 253,
    "end": 254,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:33:31)",
    "text": "It is true. I mean, there is something very true about that, that I think especially… I mean, I have no idea what the girls experience of high school would be like, but as a guy, there’s definitely a lot of like physical requirements in high school. There’s a lot of physical measurement, at least where I grew up. I think that might not be true in all high schools, but if they’re filled with boys, it’s probably true."
  },
  {
    "start": 256,
    "end": 257,
    "speaker": "Lex Fridman",
    "timestamp": "(00:34:12)",
    "text": "I mean, the way you phrased it is exactly right. That’s what it feels like. That these are the people that will be with you for the rest of your life and this is the whole world. And so that means that there’ll be just tremendous amount of impact if somebody picks on you or if you fall somewhere low in the hierarchy and the status hierarchy of this high school, that means you’ll be low in the status hierarchy of the world and you’re fucked for the rest of your life."
  },
  {
    "start": 259,
    "end": 260,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:35:01)",
    "text": "Yeah, I think it’s even… People always say, “Back in my day,” blah blah blah. I think it’s genuinely harder today than it’s ever been in the sense that when I was a kid, there was a qualification to people. Meaning, this is a cool guy, this is not a cool guy."
  },
  {
    "start": 263,
    "end": 264,
    "speaker": "Lex Fridman",
    "timestamp": "(00:35:45)",
    "text": "Yeah. The challenge there. And the task, the quest is to remember that just because your social circle on social media and in high school thinks you’re uncool, it actually might mean you are cool. And you need to find that cool and grow it and let it flourish so that when real life begins, you can fucking come out of the gate firing on all cylinders because-"
  },
  {
    "start": 265,
    "end": 266,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:36:15)",
    "text": "That’s a great way to put it."
  },
  {
    "start": 267,
    "end": 268,
    "speaker": "Lex Fridman",
    "timestamp": "(00:36:16)",
    "text": "I think if anything, high school is really bad at picking out the cool people. Whatever the system, the hierarchy that forms, it’s such a basic bitch hierarchy. You’re good at very generic shit. That’s how you rise."
  },
  {
    "start": 269,
    "end": 270,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:36:33)",
    "text": "Your parents bought you an expensive car."
  },
  {
    "start": 271,
    "end": 272,
    "speaker": "Lex Fridman",
    "timestamp": "(00:36:35)",
    "text": "Expensive car, right?"
  },
  {
    "start": 273,
    "end": 274,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:36:36)",
    "text": "Just-"
  },
  {
    "start": 275,
    "end": 276,
    "speaker": "Lex Fridman",
    "timestamp": "(00:36:36)",
    "text": "Materialistic shit. Yeah, exactly."
  },
  {
    "start": 277,
    "end": 278,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:36:38)",
    "text": "It’s a greedy search. See, they didn’t have a proper search, so they’re just hitting that local optima."
  },
  {
    "start": 279,
    "end": 280,
    "speaker": "Lex Fridman",
    "timestamp": "(00:36:42)",
    "text": "But the… I mean, even the objective function for that greedy search is just a really shitty one, where those people that win the game of high school are very often not going to be the people that win the much more exciting, beautiful game of life. So do epic shit and try stuff out."
  },
  {
    "start": 284,
    "end": 285,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:37:43)",
    "text": "Let me say it this way, some addictions have a much bigger societal look and porn is just not one of them, which makes it super hard. None of your friends are going to cheer you on. If you go on Twitter and say, “I quit porn,” they’re going to be like, “Well, that’s good for you but not everybody…”"
  },
  {
    "start": 288,
    "end": 289,
    "speaker": "Lex Fridman",
    "timestamp": "(00:38:21)",
    "text": "And I think it’s also an addiction you can practice, participate in privately and hide it from the world. There’s certain addictions that are harder to hide from the world for prolonged periods of time."
  },
  {
    "start": 291,
    "end": 292,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:38:56)",
    "text": "I’d say as far as impact goes is that you will have such a long and broken look at women. By the very, like I can… Again, I’m only speaking from a male’s perspective, that porn in its just most basic thing is that you use another person for your own desire or your own want. It’s not something that is deeply needed. There’s no need for porn. It’s purely a want-based activity or a lust, however you want, whatever word you can fill in there."
  },
  {
    "start": 298,
    "end": 299,
    "speaker": "Lex Fridman",
    "timestamp": "(00:41:29)",
    "text": "Yeah. You have to look at the long-term big picture, psychological impact it has on your relationships with human beings in general. That’s my, more generally than just porn, my problem with the quote, unquote, “sort of manosphere”, is I think sleeping with a bunch of women is great, wonderful. But the problem is making that the primary objective of your life, similar with porn, is you devalue one of the most awesome things, which is intimacy. That’s true for deep friendship, that’s true for relationships."
  },
  {
    "start": 302,
    "end": 303,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:42:45)",
    "text": "It’s objectively better to have… I would say that there’s no universe that exists or there should be no argument possible that exists that a guy who has meaningless sex has a better or a more meaningful life than, say, me and my wife who’ve been together for 15 years."
  },
  {
    "start": 305,
    "end": 306,
    "speaker": "Lex Fridman",
    "timestamp": "(00:43:10)",
    "text": "That’s absolutely correct. I do think that getting laid can have a tremendous positive impact on the confidence of a young man. I think just there’s a certain number of sexual partners from which you can collect a lot of data and it can free you about, like not to be so nervous about the opposite sex, not to be so nervous about human interaction."
  },
  {
    "start": 309,
    "end": 310,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:44:14)",
    "text": "Well, I mean I think you’re right that our society puts a lot of emphasis on getting laid. And I’m sure that’s true among any group of males throughout any point in history. I’m sure that’s a very common joke that’s never actually never stopped at any point. So I’m sure that exists but… And there’s probably some truth to the sense that after you’ve… Who was it? Jim Carrey. “I hope that everyone can get rich so they realize that money solves none of your problems.” The realization that this thing that society told you is hyper important is actually not the important part. It is a very important…"
  },
  {
    "start": 315,
    "end": 316,
    "speaker": "Lex Fridman",
    "timestamp": "(00:45:59)",
    "text": "Yeah. And a probably a prerequisite, maybe a component of trust is vulnerability to where you take the leap of being vulnerable with another human being. And that vulnerability when reciprocated builds this really strong trust and it’s a beautiful thing. Yeah."
  },
  {
    "start": 318,
    "end": 319,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:46:36)",
    "text": "It’s always worth it. The risk is always worth it in some sense. Obviously, everyone has a different life they have to filter through their actions with, right? Because the person that has no, say, social following or anything, their risk reward profile could just be local impact, which could be just as damning or harming to them."
  },
  {
    "start": 322,
    "end": 323,
    "speaker": "Lex Fridman",
    "timestamp": "(00:47:17)",
    "text": "Can we try to reverse engineer that moment of you finding God. What is it at 19? Because it feels like that was a big leap for you to escape the pain, to escape the addiction or the beginning of that journey. What do you think happened there?"
  },
  {
    "start": 324,
    "end": 325,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:47:37)",
    "text": "I think it just felt like I just… There was no line that I wasn’t willing to cross. Everything was fine and just like… It just all of a sudden, just in that moment, it’s just like I had I guess some sort of deep fear and understanding I am going down a path. Is this really the path you want to go down?"
  },
  {
    "start": 329,
    "end": 330,
    "speaker": "Lex Fridman",
    "timestamp": "(00:48:58)",
    "text": "Because you find in that advice that you can give to others who are probably… There’s probably just an endless amount of people that are struggling with porn addiction now, young people. What advice could you give to them? How to overcome it?"
  },
  {
    "start": 331,
    "end": 332,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:49:15)",
    "text": "For me to overcome it, I had to realize that I was taking something away from my future wife. Some people would be like, “Oh, well, once you get a girlfriend then you can stop.” And it’s just like, “No, because you never stopped the problem.” You don’t stop a problem by replacing it. And so I didn’t have a girlfriend, I didn’t have all that. I just realized that I was truly taking away from something from my future wife. And I didn’t even know my current wife at that time. She was not in the picture. I’m not even sure if she was at Montana State University at that point."
  },
  {
    "start": 337,
    "end": 338,
    "speaker": "Lex Fridman",
    "timestamp": "(00:51:20)",
    "text": "I think that’s really brilliantly described. You knew that this thing you’re doing is preventing you from finding your future wife and future wife could mean more even broadly, this path to a flourishing, to a beautiful life."
  },
  {
    "start": 341,
    "end": 342,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:52:32)",
    "text": "Yeah. I definitely can’t say how long it will take, a better life. But for me, there’s no way in the universe I could have had the relationship that I have without first making those steps because I couldn’t value my wife in the way that was proper for who she was. I would have valued her through the index or the lens that I currently was looking through."
  },
  {
    "start": 343,
    "end": 344,
    "speaker": "Lex Fridman",
    "timestamp": "(00:52:58)",
    "text": "Got to ask. So I’ve never done meth. I’ve never done meth."
  },
  {
    "start": 345,
    "end": 346,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:53:03)",
    "text": "That was a great segue by the way."
  },
  {
    "start": 347,
    "end": 348,
    "speaker": "Lex Fridman",
    "timestamp": "(00:53:05)",
    "text": "Oh, man. I don’t know what the fuck I’m doing, honestly with this interviewing thing. But yeah, meth and LSD… I did ayahuasca. I did shrooms a bunch of times. And this topic, I should say that there’s a lot of, on Twitter and in the tech community in general, people speaking negatively about ayahuasca and some positively. I think it’s such a roll of the dice."
  },
  {
    "start": 353,
    "end": 354,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:54:53)",
    "text": "What an intro to this topic."
  },
  {
    "start": 355,
    "end": 356,
    "speaker": "Lex Fridman",
    "timestamp": "(00:54:54)",
    "text": "I’m sorry. What’s meth like?"
  },
  {
    "start": 357,
    "end": 358,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:54:57)",
    "text": "That’s a great intro. I like… You are very correct in the sense that there is, at least when it comes to hallucinogens, there is a wild variance to what you’re going to experience. And there is no guarantee, there’s no… Just because you buy the product, it doesn’t mean you’re going to have a good time, right? There’s a lot of…"
  },
  {
    "start": 363,
    "end": 364,
    "speaker": "Lex Fridman",
    "timestamp": "(00:56:40)",
    "text": "Yeah."
  },
  {
    "start": 365,
    "end": 366,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:56:41)",
    "text": "So did a lot of skateboarding, did a lot of running around, staying all night."
  },
  {
    "start": 367,
    "end": 368,
    "speaker": "Lex Fridman",
    "timestamp": "(00:56:46)",
    "text": "Would you say it’s a pleasant feeling or is it more like an escape from the loneliness of life? Is it pleasant or negative in the actual moment? Not the consequences but in the moment."
  },
  {
    "start": 369,
    "end": 370,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:57:01)",
    "text": "So I mean, this is just a very interesting kind of area, which is that not… Universally, you can’t say that. Often you’ll find that there’s kind of these two groups of drug addicts. There’s those that like the opioids and those that like the uppers. They typically don’t like… There’s very few people in the drug world that do both. They’re really just like find their side and they go for it."
  },
  {
    "start": 375,
    "end": 376,
    "speaker": "Lex Fridman",
    "timestamp": "(00:58:43)",
    "text": "Yeah. For me, I’ve had all really wonderful experiences. Do not recommend them. But like with shroom-"
  },
  {
    "start": 377,
    "end": 378,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:58:50)",
    "text": "That’s a YouTube policy by the way that you have to say, “By the way, do whatever you do, do not do a illegal activity.”"
  },
  {
    "start": 379,
    "end": 380,
    "speaker": "Lex Fridman",
    "timestamp": "(00:58:54)",
    "text": "I-"
  },
  {
    "start": 381,
    "end": 382,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:58:54)",
    "text": "But I had great experiences, but whatever you do, don’t do it."
  },
  {
    "start": 383,
    "end": 384,
    "speaker": "Lex Fridman",
    "timestamp": "(00:58:57)",
    "text": "Mr. ThePrimeagen, I have no master. I don’t have YouTube or whatever. I’ll say whatever the fuck I want. I’m just-"
  },
  {
    "start": 385,
    "end": 386,
    "speaker": "ThePrimeagen",
    "timestamp": "(00:59:06)",
    "text": "But seriously, you do."
  },
  {
    "start": 387,
    "end": 388,
    "speaker": "Lex Fridman",
    "timestamp": "(00:59:10)",
    "text": "… kind… No. No, I don’t give a shit about YouTube or anybody, honestly. I’m just careful about the words I say because just because I had positive experiences, I don’t want young people listening to this think they should try the experience. I think the much more powerful message is that life is awesome even without that. That’s something I definitely experiment with on the alcohol side."
  },
  {
    "start": 394,
    "end": 395,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:01:42)",
    "text": "That is-"
  },
  {
    "start": 396,
    "end": 397,
    "speaker": "Lex Fridman",
    "timestamp": "(01:01:42)",
    "text": "That means Diet Coke-"
  },
  {
    "start": 398,
    "end": 399,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:01:43)",
    "text": "… his funniest line."
  },
  {
    "start": 400,
    "end": 401,
    "speaker": "Lex Fridman",
    "timestamp": "(01:01:44)",
    "text": "Diet Coke is great."
  },
  {
    "start": 402,
    "end": 403,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:01:45)",
    "text": "That’s his funniest line, which is, “You would hate me if I drank.” Which I just like… To me, that tickles me to no end. Just like, “Oh my gosh, that is such a funny line.”"
  },
  {
    "start": 404,
    "end": 405,
    "speaker": "Lex Fridman",
    "timestamp": "(01:01:52)",
    "text": "Self-awareness and humor is wonderful there, but yeah."
  },
  {
    "start": 406,
    "end": 407,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:01:55)",
    "text": "But I am on your team. All of the reasons why I used drugs and all that, it’s some level of escapism. I’m sure that’s like… would be the archetype or the box I’d put that into or the pursuit of trying to feel something that cannot come from them."
  },
  {
    "start": 412,
    "end": 413,
    "speaker": "Lex Fridman",
    "timestamp": "(01:03:00)",
    "text": "The other moment you mentioned that I think is really inspiring is that you failed pre-calculus. You really struggled in school. You realize that school is really hard and then eventually you’re able to sort of persevere and, I don’t know, break through that wall of struggle. Can you, by way of advice, figure out what happened and what kind of advice you can give to people who are struggling?"
  },
  {
    "start": 414,
    "end": 415,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:03:25)",
    "text": "Yeah. I’ll paint it in a more clear picture, or a very fast speed run of it is that I took pre-calculus, failed. I took pre-calculus again, failed, took pre-calculus again and got a C. So I took it three times. Then I took Calc over the summer, so Calc 1. In that one at the end, the final… The final was a two-hour final. I finished it in 30 minutes and that was the highest score in all of the school. And I proceeded to be the highest score in all calculus and Diffy Q."
  },
  {
    "start": 423,
    "end": 424,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:06:00)",
    "text": "…play something correctly and you start thinking about how you can explore that space. It’s like it’s a completely different problem. And same with programming, programming has an identical kind of feel to it. It’s just like you’ll cross that barrier and it becomes magical as opposed to a chore."
  },
  {
    "start": 425,
    "end": 426,
    "speaker": "Lex Fridman",
    "timestamp": "(01:06:15)",
    "text": "Yeah. Once you cross that barrier, somehow other things become easier. But then if you want to have a truly successful life, then you find the next barrier. Yeah, I’ve always been the same. Everything’s come really hard."
  },
  {
    "start": 427,
    "end": 428,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:06:27)",
    "text": "Yeah, I’ve had no free lunches. Everything’s just been a lot of pain and struggle."
  },
  {
    "start": 429,
    "end": 430,
    "speaker": "Lex Fridman",
    "timestamp": "(01:06:35)",
    "text": "I think somebody said that on this topic that you think work smarter not harder is a phrase that you dislike. Somebody on Reddit told me this."
  },
  {
    "start": 431,
    "end": 432,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:06:47)",
    "text": "Yeah. I don’t just dislike it. I hate that phrase."
  },
  {
    "start": 433,
    "end": 434,
    "speaker": "Lex Fridman",
    "timestamp": "(01:06:49)",
    "text": "Okay. Tell me about your hatred. How do you feel?"
  },
  {
    "start": 435,
    "end": 436,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:06:54)",
    "text": "The reason why I dislike that is that there is kind of a hidden suggestion there, which is that you already know what smarter is, so just do that. That actually things should be easy. You should just not have to try that hard. You should just do the quick, easy, obvious path and boom, it’s done. It’s like I’ve never experienced that in anything I’ve done. Everything is actually really hard and most of the time I don’t even know what I’m doing, so therefore I don’t even know what smart looks like. And so for me, the only way I can learn how to work smart is by working very, very hard and knowing that there’s no shortcuts. And then when I finally figure out what smart is, when I work smart and work hard, it is that much better."
  },
  {
    "start": 437,
    "end": 438,
    "speaker": "Lex Fridman",
    "timestamp": "(01:07:39)",
    "text": "I think there’s a deep profound truth to that."
  },
  {
    "start": 439,
    "end": 440,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:07:42)",
    "text": "There’s a lot of these phrases that just drive me nuts in our society,"
  },
  {
    "start": 441,
    "end": 442,
    "speaker": "Lex Fridman",
    "timestamp": "(01:07:45)",
    "text": "But that one is… Sorry, that one is really accepted if you can just linger on it because it really bothers me as well. So one, which is a really nice thing you said, the presumption there is things should be easy and you’re a failure if you don’t see the easy path. That’s kind of the implied thing."
  },
  {
    "start": 443,
    "end": 444,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:08:02)",
    "text": "Just work smart, daug, why are you putting in all those hours?"
  },
  {
    "start": 445,
    "end": 446,
    "speaker": "Lex Fridman",
    "timestamp": "(01:08:05)",
    "text": "And so it makes a lot of people that struggle feel like they’re a failure because I don’t see it. And then the choice they have, well, I’ll just be lazy and then maybe the profound truth will come to me somehow. And yeah, I don’t think I’ve ever, and I don’t think I’ve met great engineers that find the smart way without the extremely hard work. The annoying thing about those great engineers is then looking back, they forget the hard work because they remember all the joy they now are experiencing from all the efficient, smart work they figured out how to do. They forget. So when they give advice they give the stupid advice of, well, just do it like the easy way"
  },
  {
    "start": 449,
    "end": 450,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:10:46)",
    "text": "I think I should make an addendum to the phrase, I think the phrase should be work hard, get smart."
  },
  {
    "start": 451,
    "end": 452,
    "speaker": "Lex Fridman",
    "timestamp": "(01:10:51)",
    "text": "Nice. That’s a t-shirt."
  },
  {
    "start": 453,
    "end": 454,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:10:53)",
    "text": "That’s what it should be."
  },
  {
    "start": 455,
    "end": 456,
    "speaker": "Lex Fridman",
    "timestamp": "(01:10:54)",
    "text": "Yeah, agreed. Okay, that was a tangent of a tangent."
  },
  {
    "start": 457,
    "end": 458,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:10:57)",
    "text": "Can I say one more cultural phrase that I absolutely hate?"
  },
  {
    "start": 459,
    "end": 460,
    "speaker": "Lex Fridman",
    "timestamp": "(01:10:59)",
    "text": "Yes."
  },
  {
    "start": 461,
    "end": 462,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:11:01)",
    "text": "The journey is better than the destination. Everyone’s heard this. Just take one second to apply what that means. That means forever starting from now, you are only going towards a place that’s worse. That literally is what it means. Enjoy the journey, celebrate the destination, that should be what it would be but no. People say these phrases, they’re everywhere. There’s these very shallow phrases that have no logical bounds to them. You’re just like, why would the journey ever be better than the destination? I think this might even be a C.S. Lewis quote is that C.S. Lewis was like, nope, this is terrible. The journey is not in fact better than the destination."
  },
  {
    "start": 463,
    "end": 464,
    "speaker": "Lex Fridman",
    "timestamp": "(01:11:43)",
    "text": "I love the demotivational posters. Progress, moving forward is better than moving backwards even if you’re still going nowhere. There’s a lot-"
  },
  {
    "start": 465,
    "end": 466,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:11:54)",
    "text": "I feel that one so much being in California for a few years, that is painful."
  },
  {
    "start": 467,
    "end": 468,
    "speaker": "Lex Fridman",
    "timestamp": "(01:12:00)",
    "text": "Positivity, if it doesn’t break you today don’t worry, it will try again tomorrow. It’s just a lot of really great posters."
  },
  {
    "start": 469,
    "end": 470,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:12:07)",
    "text": "I didn’t even know this was a thing."
  },
  {
    "start": 471,
    "end": 472,
    "speaker": "Lex Fridman",
    "timestamp": "(01:12:09)",
    "text": "This is a thing."
  },
  {
    "start": 473,
    "end": 474,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:12:10)",
    "text": "Oh my gosh, I want that."
  },
  {
    "start": 475,
    "end": 476,
    "speaker": "Lex Fridman",
    "timestamp": "(01:12:11)",
    "text": "Yeah."
  },
  {
    "start": 477,
    "end": 479,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:12:12)",
    "text": "Hey. Hi, this is ThePrimeagen. One thing that I forgot to mention in this podcast, which feels just so foolish to me for forgetting, is just what a big role my mom played in my life. She had to work 18 hours a day after my dad died. She really made her house be able to survive. I always looked up to her and I always thought her amazing. And she really was the reason why when I decided to get my butt kicked back in gear, she’s just someone who I looked to as an internal inspiration for me to continuing, to keep on going because I really wanted to make her proud. And all those years of just high energy effort, I really wanted to make sure that she knew that I was just so dang appreciative for it. So hey, I just wanted to say thank you. Love you, mom. Netflix"
  },
  {
    "start": 480,
    "end": 481,
    "speaker": "Lex Fridman",
    "timestamp": "(01:12:55)",
    "text": "For people who don’t know, you worked in Netflix."
  },
  {
    "start": 482,
    "end": 483,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:12:59)",
    "text": "By the way."
  },
  {
    "start": 484,
    "end": 485,
    "speaker": "Lex Fridman",
    "timestamp": "(01:13:00)",
    "text": "By the way. Now, how did you go from there, from the hardship that we mentioned, from the struggle, from the addictions and so on to a place where you were working at this incredible engineering company and building cool shit there? So tell the Netflix story."
  },
  {
    "start": 486,
    "end": 487,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:13:21)",
    "text": "Yeah, so I kind of alluded to it earlier that I wanted to do my own startup so for, I forget how long it was, one or two years or two and a half years, built a startup. PHP, jQuery, everyone’s favorite language is all put together. You can solve math stuff with jQuery. So I just was totally into just non-stop doing that. This is the height of Stack Overflow. I was asking really dumb questions on Stack Overflow like what is more pythonic? And then you get a bunch of up votes and try to steal a bunch of karma away, all the fun stuff to do. Good times. And I was just so into it breathing and I just breathe it in, breathe it out, and that’s what I do all day every day. And so it’s just like non-stop building of a startup. Ultimately that startup failed and so I had to go get a real job."
  },
  {
    "start": 488,
    "end": 489,
    "speaker": "Lex Fridman",
    "timestamp": "(01:14:06)",
    "text": "Can you say what the startup was?"
  },
  {
    "start": 490,
    "end": 491,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:14:08)",
    "text": "It is so wild thinking about it in the past. Before I tell you what it is, I want to tell one quick thing about my dad. My dad in the early ’90s, like ’91, ’92, was building kind of a phone card company where you’d be able to pre-purchase long-distance minutes. Now, if you remember the ’90s at about what ’97, ’98, ’99, 10-10-220, all those different things down the center, all those companies where you can pre-purchase long-distance minutes kind of came out and were very, very big. And so my dad was six years early to that notion and ultimately his startup failed. But he was just really early to something that would catch on really, really big specifically in the telecommunication space."
  },
  {
    "start": 493,
    "end": 494,
    "speaker": "Lex Fridman",
    "timestamp": "(01:15:15)",
    "text": "So is it fair to say you’re almost always ahead of your time, that you’re a visionary of sorts?"
  },
  {
    "start": 495,
    "end": 496,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:15:20)",
    "text": "No, in fact, I am not ahead of my time. I just got, some would say I got unlucky on that situation. But it seems so obvious to me at that time when I was doing it, 80% of phones were dumb phones. Most people had flip phones. When I went and sold Via Text, is what the name was of that specific product. And we had the short code via text too, so it was pretty clever, six digits. When I went out and sold it, I only had a flip phone during that time. I didn’t even have a smartphone because they were kind of untenable for a lot of people. So it’s kind of just wild times to think about."
  },
  {
    "start": 500,
    "end": 501,
    "speaker": "Lex Fridman",
    "timestamp": "(01:17:25)",
    "text": "And for people who don’t know, I guess C-sharp, what is its closest neighbor? Java. Is Java-"
  },
  {
    "start": 502,
    "end": 503,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:17:30)",
    "text": "They obviously just took Java and ripped it off at one point, but now it’s such a dynamic, interesting language that it seems like it could be a really cool bounds of practical versus not practical. It’s just I’m not really into wearing pleated pants and programming at a Microsoft house."
  },
  {
    "start": 504,
    "end": 505,
    "speaker": "Lex Fridman",
    "timestamp": "(01:17:42)",
    "text": "Is pleated pants a requirement?"
  },
  {
    "start": 506,
    "end": 507,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:17:46)",
    "text": "I think so."
  },
  {
    "start": 508,
    "end": 509,
    "speaker": "Lex Fridman",
    "timestamp": "(01:17:47)",
    "text": "Okay, we’ll get back to this."
  },
  {
    "start": 510,
    "end": 511,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:17:49)",
    "text": "Can we just get back-"
  },
  {
    "start": 512,
    "end": 513,
    "speaker": "Lex Fridman",
    "timestamp": "(01:17:49)",
    "text": "All right."
  },
  {
    "start": 514,
    "end": 515,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:17:49)",
    "text": "Triggering me here."
  },
  {
    "start": 516,
    "end": 517,
    "speaker": "Lex Fridman",
    "timestamp": "(01:17:49)",
    "text": "WebFilings."
  },
  {
    "start": 518,
    "end": 519,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:17:54)",
    "text": "So anyways, WebFilings was that’s where I had to do all the matrices stuff and build systems and just kind of all that. And it really pushed me because they also wanted me to do 60 hours a week. It was not very healthy work-life balance. It was very hard work. And kind of that really hard work going to cutting edge stuff, really understanding the world, really made it so that I was able to just be able to talk about stuff very commandingly because we had to build really complex state machines for the UI for what we’re building. And so when I went and started getting a LinkedIn and all that, inevitably just due to the fact that I’ve touched all these technologies and I had some sort of paper trail saying, I’ve touched these technologies or Microsoft. Dang it, Lex"
  },
  {
    "start": 520,
    "end": 521,
    "speaker": "Lex Fridman",
    "timestamp": "(01:18:36)",
    "text": "Pleated pants."
  },
  {
    "start": 522,
    "end": 523,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:18:36)",
    "text": "Pleated pants reached out. No, Netflix reached out and said, “Hey, I see you’ve done RxJS. We do a lot of it. You want to come and interview with us?” And I was always told that you should never reject kind of a handwritten personal invitation to interview. This was way before bots and even the bots were pretty obvious to tell they were bots. This was a manager at Netflix, Jeff Wagner, first manager ever. And he just wrote a really nice note and just like, “Hey, I see you’re doing a lot of these things. We really need help with JavaScript. I would love for you to come interview. We’re even using a lot of RxJS if you’re interested in that.” And so I was like, all right, I can come and I’ll interview. And lo and behold, interview went on and I called my wife I think halfway through the interview and I was just like defeated, absolutely crushed because I said…"
  },
  {
    "start": 526,
    "end": 527,
    "speaker": "Lex Fridman",
    "timestamp": "(01:20:19)",
    "text": "So we’re in California with Netflix. This is San Francisco."
  },
  {
    "start": 528,
    "end": 529,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:20:22)",
    "text": "Los Gatos. So if you’re familiar, so classic symbol people do which is this is San Francisco, Oakland, San Jose, Los Gatos is just kind of a little bit south of San Jose, same mega contiguous city."
  },
  {
    "start": 530,
    "end": 531,
    "speaker": "Lex Fridman",
    "timestamp": "(01:20:39)",
    "text": "Yellowstone is in Montana, Yellowstone, the show. So is it basically like that, Kevin Costner riding on a horse? Were you riding on a horse to campus?"
  },
  {
    "start": 532,
    "end": 533,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:20:48)",
    "text": "No, but I love those stereotypes. Actually to be completely fair, when I was 15 years old, I was driving around on what is now a very busy populated street shooting gophers out the window of our car with a 22. So it’s like Montana was a different place at one point than it is today. And there’s plenty of parts of Montana that’s still very rural, still kind of more of that old world. So yeah, a little bit you can get whatever you want from Montana. As far as culturally goes, I’m not really sure the best way to put the difference between California and Montana. It’s just different expectations. One thing I can really appreciate about California, or at least when I say California, I mean the Silicon Valley Because obviously LA and the Silicon Valley, very different attitudes, very different mindsets. You can’t really compare one to the other."
  },
  {
    "start": 535,
    "end": 536,
    "speaker": "Lex Fridman",
    "timestamp": "(01:22:06)",
    "text": "Yeah, it’s really great. The excitement, the energy."
  },
  {
    "start": 537,
    "end": 538,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:22:09)",
    "text": "Yeah, Montana doesn’t have that."
  },
  {
    "start": 539,
    "end": 540,
    "speaker": "Lex Fridman",
    "timestamp": "(01:22:11)",
    "text": "I have a romantic admiration for the shows like Yellowstone being out on nature. It’s beautiful. I like riding horses. Somebody also said Reddit is full of wisdom about you. Some of it could be fake news, but something about horses and this kind of thing. You like horses, you like riding horses?"
  },
  {
    "start": 541,
    "end": 542,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:22:28)",
    "text": "We have horses on… Our neighbor had much more hilly land and one of the horses broke its leg, so they had to put it down. And so we just said, “Hey, we are on much flatter land. You can just have your horses in our property.” And so we just have horses that run around on our-"
  },
  {
    "start": 543,
    "end": 544,
    "speaker": "Lex Fridman",
    "timestamp": "(01:22:44)",
    "text": "What about milking cows? Somebody asked about cattle and cow."
  },
  {
    "start": 545,
    "end": 546,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:22:50)",
    "text": "So I’ve only had open cows. If you don’t know, cow means girl, open means that, hey, they’ve tried to get the cow pregnant. The cow did not get pregnant first try. And so they’re calling that gene, they’re getting rid of that gene. The open cow is going to now go out to pasture for the year and then get turned into delicious T-bone steaks and various things. And so we would house open cows on our property. So no, there’s no milking of open cows."
  },
  {
    "start": 547,
    "end": 548,
    "speaker": "Lex Fridman",
    "timestamp": "(01:23:16)",
    "text": "Okay."
  },
  {
    "start": 549,
    "end": 550,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:23:16)",
    "text": "They’d be very upset if you tried to milk an open cow because they’re not milking cows. You have to get that cow pregnant. And then once you get it pregnant, you have to kind of put it into this permanent state of milking and all that. And it’s a little bit more complicated than say what we did, which was just cows on eating grass and I didn’t have to touch them."
  },
  {
    "start": 551,
    "end": 552,
    "speaker": "Lex Fridman",
    "timestamp": "(01:23:35)",
    "text": "Okay, well, that’s wonderful."
  },
  {
    "start": 553,
    "end": 554,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:23:36)",
    "text": "Reddit is not a great place for wisdom about me. They’re going to give you the craziest answers."
  },
  {
    "start": 555,
    "end": 556,
    "speaker": "Lex Fridman",
    "timestamp": "(01:23:41)",
    "text": "We’ll return to Reddit time and time again, my friend. So yeah, you took the leap into Netflix. So what was that like?"
  },
  {
    "start": 557,
    "end": 558,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:23:52)",
    "text": "This is one of those things where when you talk about it, people love to trivialize this because it’s like, oh, you’re taking a leap of faith by going into a fang company. And in 2013, sounds super risky. My wife was 36 weeks pregnant. We had to travel to a place where we knew not a soul. We were about to have our first kid. We didn’t even have a doctor. If you don’t know what having a baby does, you kind of want a relationship with a doctor. There’s a whole thing that goes on there. So it was a really hard and great experience. So I went to a job in which their culture deck… So during this time, this is where Netflix still had kind of that old generation X feel to it. Their culture deck was hire fast, fire fast. It was very in your face about like, “Hey, this is how we operate. You don’t meet the standards, we kick you out.”"
  },
  {
    "start": 561,
    "end": 562,
    "speaker": "Lex Fridman",
    "timestamp": "(01:25:23)",
    "text": "What was the technical learning curve for you? You showed up in your plaid pants, dressed up?"
  },
  {
    "start": 563,
    "end": 564,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:25:29)",
    "text": "Yeah."
  },
  {
    "start": 565,
    "end": 566,
    "speaker": "Lex Fridman",
    "timestamp": "(01:25:30)",
    "text": "What did you have to learn about the Stack? Because Netflix, I imagine is this incredible infrastructure. It has to deliver just a huge amount of data. I’m just blown away by Netflix but also YouTube. These companies that have to deliver, serve a huge amount of bits."
  },
  {
    "start": 567,
    "end": 568,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:25:55)",
    "text": "Netflix has it easiest. Out of all the companies Netflix by… Even though you could say maybe we beat YouTube in view hours, I’m not sure if we do, but let’s just pretend Netflix has five x more view hours than YouTube. Whatever it is, Netflix has a fundamentally easier problem than all other companies. And let’s get back to that. I’m going to first tell you about the Stack, but I’ll tell you why it has a fundamentally easier problem. So when I first got there, they gave me my PlayStation three. My boss said, “Go learn some code. Come back to me in a couple of days and tell me what you’ve learned. And then I’m going to start giving you bugs to fix.”"
  },
  {
    "start": 569,
    "end": 570,
    "speaker": "Lex Fridman",
    "timestamp": "(01:26:27)",
    "text": "Wait, PlayStation three, what are you talking about?"
  },
  {
    "start": 571,
    "end": 572,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:26:30)",
    "text": "Well, I was on the TV team. I had to go plug in a PlayStation and start launching programs onto the PlayStation three and figure out how to work Netflix on a television device."
  },
  {
    "start": 573,
    "end": 574,
    "speaker": "Lex Fridman",
    "timestamp": "(01:26:38)",
    "text": "Oh, so you have different kinds of devices. Why PlayStation three, is other different-"
  },
  {
    "start": 575,
    "end": 576,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:26:43)",
    "text": "It’s just 2013. That’s what you have."
  },
  {
    "start": 577,
    "end": 578,
    "speaker": "Lex Fridman",
    "timestamp": "(01:26:44)",
    "text": "Any devices that plug into the TV? Okay, cool."
  },
  {
    "start": 579,
    "end": 580,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:26:46)",
    "text": "Yeah, not as many TVs had Netflix, let alone what they called their Darwin app, which is their new application. So if you bought a VIZIO earlier that year, you’d get their older one there. It’s called Plus UI. You get their older version. And so not many had the newer version. We no longer supported Plus or we never actively developed on Plus, we only did stuff on Darwin. And so I had to learn that whole stack, the backend or the middle end, the middle layer between the actual backend and the front end was written in Groovy. And as I went around, Groovy is if you’re not familiar with Jenkins, then you’ve probably never interacted with Groovy. But Groovy is a JVM language. It’s a very interesting language, but here’s how it got started at Netflix."
  },
  {
    "start": 581,
    "end": 582,
    "speaker": "Lex Fridman",
    "timestamp": "(01:27:30)",
    "text": "Oh, it’s Apache. Apache Groovy is a powerful object-oriented programming language that runs on the Java virtual machine released in 2007. It has evolved to become a versatile language that combines both static and dynamic typing capabilities."
  },
  {
    "start": 583,
    "end": 584,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:27:43)",
    "text": "All right, so the AI is kind of lying to you. Groovy is not a powerful great language. That statement makes it seem way cooler than it actually is. You’ll meet one out of 100 people that have touched Groovy that said, “Oh yeah, Groovy’s great.” The other 99 will be like, “Heavens forbid, you ever have to touch that language.” So when I got there, nobody, not a single soul at Netflix, those 40-some engineers had any idea how Groovy pretty much worked. Somehow people just hacked together these scripts and put them all on there and it worked. And this was before there was a Groovy RX port. We wrote our own version called WX. It was a nightmare, observables, all these things. I remember one time they told me that, “Oh yeah, with RX it’s really easy. You just say what you need to do. It maps out and boom, boom, everything will run and all that.” And I was like, “Oh wow, really?”"
  },
  {
    "start": 587,
    "end": 588,
    "speaker": "Lex Fridman",
    "timestamp": "(01:29:52)",
    "text": "Okay. So you can abstract away into the space of recommendation versus the space of movies directly."
  },
  {
    "start": 589,
    "end": 590,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:29:56)",
    "text": "Yeah. So you can’t hang it off the video because obviously then it would be the same for everything that shows that same video."
  },
  {
    "start": 591,
    "end": 592,
    "speaker": "Lex Fridman",
    "timestamp": "(01:30:01)",
    "text": "That’s amazing."
  },
  {
    "start": 593,
    "end": 594,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:30:02)",
    "text": "I had to do all this and I wrote it in Groovy and I just did it-"
  },
  {
    "start": 595,
    "end": 596,
    "speaker": "Lex Fridman",
    "timestamp": "(01:30:02)",
    "text": "Such a funny name."
  },
  {
    "start": 597,
    "end": 599,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:30:06)",
    "text": "And people were like, “How did you write this in Groovy?” And I was just like, “Well, I read the language reference for a day and then programmed it.” Well, what do you mean? It was a very radical language, shall we say. And so I just simply became the person that knew these things, so they just give me more and more jobs with that. And so that’s kind of how I excelled, being the person that was willing to do the thing that no one else was. Printf() debugging"
  },
  {
    "start": 600,
    "end": 601,
    "speaker": "Lex Fridman",
    "timestamp": "(01:30:28)",
    "text": "Yeah. Can you actually speak to the print off debugging. You walk into a system and there’s a lot of systems in the world like this. Twitter was like this, when Elon acquired Twitter and the rolls in and there’s this old junky code base that’s just like a giant mess, and you have to basically do print off debugging. What’s the process of going into a code base and figuring out what the fuck? Well, how does this work? What are the flaws? What are the assumptions? You have to reverse engineer what all these other engineers did in the past and the mess across the space of months and years, and you have to figure out how all that works in order to make improvements."
  },
  {
    "start": 602,
    "end": 603,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:31:06)",
    "text": "I’ve always just been good at print off debugging because one of my first kind of side quest jobs that I got was writing robots for the government when I was still at school. And so I’d kind of do this contractually for so many hours a week. And my boss, Hunter Lloyd, great professor by the way, he just said, “Hey, here’s your computer, here’s the robot, here’s how you plug it in. Here’s how you run the code. Can you write the flash driver, the ethernet driver. Can you write the planetary pancake motor? Here’s some manuals, I’m missing some. Just figure it out, I’ll be back.” So that was government work for me. So I was like, okay, I’ll figure all these things out. And I figured them all out and the only way to really get anything out of the machine was to print. And so it’s like I had to become really good at printing my way through problems. And so that kind of became this skill I guess I adopted is that I can just kind of print off debug my way through a lot of these problems."
  },
  {
    "start": 605,
    "end": 606,
    "speaker": "Lex Fridman",
    "timestamp": "(01:32:26)",
    "text": "You’re a special human. I think that’s an incredible skill set to have to be able to drop in into any code base, drop into any situation, and do print off debugging. Meaning you’re in a dark room and you’re feeling around that room to try to figure out what the room is."
  },
  {
    "start": 607,
    "end": 608,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:32:40)",
    "text": "Well, I had the code so it’s like I can kind of blueprint what’s happening. I don’t understand the services or anything, but you can start guessing pretty quick as to what’s going wrong."
  },
  {
    "start": 609,
    "end": 610,
    "speaker": "Lex Fridman",
    "timestamp": "(01:32:48)",
    "text": "Right. But then the print side of that helps you confirm your intuitions, test your intuitions and build up more and more information. And then you start to accumulate this bigger picture from that, what the edge cases are that break the system and not. I think that just that kind of situation is intimidating for a lot of engineers. They break down at that point. I think it really is a powerful thing to be able to come into a code base, that’s generally a skillset of very few of us start from scratch. And actually this is the fundamental problem of web development and in general where they’re like, I don’t know what’s going on. I’m going to write my own thing from scratch. As opposed to actually doing print off debugging on the space of languages, on the space of problems, because there’s a lot of wisdom and solved problems already in this code base."
  },
  {
    "start": 612,
    "end": 613,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:34:12)",
    "text": "I have a very great story about that, that this is what I think has shaped me the most about my perspective of other devs. There’s this dev and he always just wrote things in just what I thought was such a bizarre and weird way, and this had to do with Falcor. So our data fetching library for Netflix, This would run on mobile. So I had to write in Objective-C. It had to run on television and it had to also run on web. So it ran on everything. And me and one other person were responsible for this thing working. And the request side where we’d have to de-dupe the information that we already have, the requests that were pending and the new data."
  },
  {
    "start": 616,
    "end": 617,
    "speaker": "Lex Fridman",
    "timestamp": "(01:35:29)",
    "text": "I think that’s a skill set that is extremely important for people to learn. I see that in myself. That’s a constant struggle for myself when facing a code base, for example. But this applies generally in life, where somebody did a lot of work to do a thing, you should invest a huge amount of time and get really good at figuring out what they did, why they did it. Do a lot of print off debugging to understand what they did. It’s a much more efficient way to understand a problem deeply than to start from scratch. Even though there’s a constant temptation to start from scratch, because starting from scratch is fun. You do get the puzzle solved and all that kind of stuff. It’s just not going to be the right thing to do. Usually pain is the right thing to do, and it is for most people painful to understand other people’s code bases."
  },
  {
    "start": 618,
    "end": 620,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:36:21)",
    "text": "I highly recommend starting from scratch if you want to understand a concept. You don’t know how an HTTP server works, create a TCP socket, learn how to parse HTTP. It’ll become very easy and you’ll go, this is the reason why whenever I get a request, I have to await the text. I now understand why the text is for whatever reason not there. I get it. I now understand it. And so you kind of gain these new perspectives just by simply parsing something out. Falcor"
  },
  {
    "start": 621,
    "end": 622,
    "speaker": "Lex Fridman",
    "timestamp": "(01:36:50)",
    "text": "All right. Back to the wisdom of Reddit. Apparently there are memes and legends about your programming arc in Netflix. This Falcor system you mentioned, somebody, I think it was Teej, how do you pronounce his name by the way?"
  },
  {
    "start": 623,
    "end": 624,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:36:50)",
    "text": "Teej."
  },
  {
    "start": 625,
    "end": 626,
    "speaker": "Lex Fridman",
    "timestamp": "(01:37:05)",
    "text": "Okay, Teej."
  },
  {
    "start": 627,
    "end": 628,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:37:06)",
    "text": "TJ would be his name, but we call it Teej or Telescopic Johnson."
  },
  {
    "start": 629,
    "end": 630,
    "speaker": "Lex Fridman",
    "timestamp": "(01:37:10)",
    "text": "Oh wow, so many names. DDoS, distributed denial of service attacks, you apparently were able to accomplish the simplified version of that of just DoS. That’s a legend. So you basically broke down the system somehow."
  },
  {
    "start": 631,
    "end": 632,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:37:25)",
    "text": "Yeah."
  },
  {
    "start": 633,
    "end": 634,
    "speaker": "Lex Fridman",
    "timestamp": "(01:37:26)",
    "text": "Can you tell the story of that?"
  },
  {
    "start": 635,
    "end": 636,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:37:28)",
    "text": "I’d be glad to. So there’s this Falcor business, and I did discover the bug before anybody else and I did report it to security and it was so bad. It actually got its own name, Repulsive Grizzly Attack, and they even give examples of how to do it. Effectively what it means is that there is a request that targets both memory and CPU and will destroy. There you go. Look, how Netflix… The next one down was the article that was actually written. I don’t get mentioned, which is a little bit upsetting considering I was the one that discovered it and told everybody how bad it was."
  },
  {
    "start": 639,
    "end": 640,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:39:00)",
    "text": "Three, it only had three videos in it. So what happens when I try to re-request the data? Well, I need a way to be able to tell my system that you’d have requested the data and there’s nothing there. So call this like a boxed value. So it’s going to be like type, something, value, there’s nothing there. We’ve already requested it and there’s nothing there. It’s like a sentinel value, if you will, a boxed value. And we have this little special flag weed pass called materialize. Meaning that when you ask for a path, we will make sure we fill it out so we don’t accidentally erase anything. And at the very end we’ll say okay, the thing does, the request you’ve made has already been made and there’s nothing there. Well, what happens if I request rows zero through 10,000 columns through 10,000, one more item through 10,000 and then a whole bunch of properties and then ask it to materialize?"
  },
  {
    "start": 642,
    "end": 643,
    "speaker": "Lex Fridman",
    "timestamp": "(01:40:55)",
    "text": "Just to be clear, the infrastructure that’s serving the videos would shut down."
  },
  {
    "start": 644,
    "end": 645,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:41:00)",
    "text": "Yeah, the UI, you couldn’t perform any actions in the UI. You surprisingly could still stream video but you would never be able to get to a video to stream. Because every action you would take would be completely shut down. And so it wasn’t a DDoS because you didn’t need a bunch of computers to try to overwhelm the system by making a bunch of requests, one request, one machine. If we had 50 machines serving the millions of requests, it’d only take 50 requests to shut down the entire UI."
  },
  {
    "start": 646,
    "end": 647,
    "speaker": "Lex Fridman",
    "timestamp": "(01:41:23)",
    "text": "Isn’t it possible to do DoS or DDoS on basically any software system Like defending against all the closing all those attack factors is probably really difficult. If you take any sufficiently complicated software system, there’s probably so many ways to overwhelm it."
  },
  {
    "start": 648,
    "end": 649,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:41:42)",
    "text": "Yeah, this is why people use CloudFlare. I think d HH said it best, which is like we have our website and we have a strong bodyguard on the outside. So CloudFlare has a bunch of utilities all built in. Because obviously this is why everyone hates all these Bluetooth devices that connect to the internet because they just turn into attack vectors where people use those to DoS or DDoS other sites. And so you don’t need something sophisticated, you just need a bunch of requests to come in and you can take down websites. And so that’s why these fronts are really good at discovering where these problems are."
  },
  {
    "start": 651,
    "end": 652,
    "speaker": "Lex Fridman",
    "timestamp": "(01:42:59)",
    "text": "This is super fascinating. I do also wonder how many ultra competent, what is it, black hat hackers there are, versus the good guys versus the bad guys. How many bad guys there are and what is the average… What is the distribution of skillset on the bad guy side that are constantly trying to attack?"
  },
  {
    "start": 653,
    "end": 654,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:43:23)",
    "text": "I assume there’s probably a huge number of just really simple ones, script kitties, right? Just people trying to just do things. And then there’s a huge amount of social engineering that just goes in where hacking’s done, not with a computer but just by one of the classic ones. Kevin Mitnick had this one in his book which was you’d call up somebody pretending to be like, “Charlene, we’re doing some auditing and I think your pin’s out of date on file. Is it 2323, still?” And they’re like, “No, it’s 4747.” You’re like, “Oh, thanks Sharon.” Boom. You just hacked him. Right? The classic people love correcting bad information."
  },
  {
    "start": 656,
    "end": 657,
    "speaker": "Lex Fridman",
    "timestamp": "(01:44:40)",
    "text": "And also the social engineering aspect, that’s a real attack vector. I think that’s the attack vector that will do in the longterm the most damage in the world. Especially as AI tooling becomes easier and easier to convince people at scale, sort of do that email Grandma. I think that’s a really serious attack vector, like human psychology and all that. I assume whenever there’s a girl that approaches me, it’s some kind of social engineering project, some attack vector, some intelligence agency. In fact, I’m pretty sure-"
  },
  {
    "start": 658,
    "end": 659,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:45:12)",
    "text": "We’re back to A Beautiful Mind, aren’t we?"
  },
  {
    "start": 660,
    "end": 661,
    "speaker": "Lex Fridman",
    "timestamp": "(01:45:14)",
    "text": "Beautiful mind? Yeah. I have a whiteboard upstairs that I calculate everything, everybody’s trajectory and move."
  },
  {
    "start": 662,
    "end": 663,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:45:20)",
    "text": "You’re not wrong though with the attack vector, especially in the day of AI. One thing that I don’t think a lot of people are talking about as we integrate more and more AI is that prompt injection is an extremely hard thing to defend against because it’s not really clear how you defend against it. If it’s just a, at the end of the day word calculator make word come out. If you can figure out the proper word calculator input, it might just break its bounds and start doing something it’s not supposed to do. And there’s a whole future word."
  },
  {
    "start": 666,
    "end": 667,
    "speaker": "Lex Fridman",
    "timestamp": "(01:46:21)",
    "text": "Yeah, the more power we give to software systems, the more damage they can do. That certainly is the case. But the more awesome they could do, and that’s the knife’s edge that we all walk along as a human civilization together, hand in hand. Will we flourish or destroy ourselves? Question mark. Folks on Reddit, the good folks on Reddit, demanded that I ask you about the time you broke production. Is this related to Falco? Did you break production? Is this fake news?"
  },
  {
    "start": 668,
    "end": 669,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:46:48)",
    "text": "I’ve broke production quite a few times. I’ve broken productions for so many stupid reasons. One time I broke production because I came up in the PHP and PHP. Static means static for the lifetime of the PHP and PHP was the lifetime of every request, right? That’s why PHP was so inefficient was that every request was its own instance, and therefore static memory was for the lifetime. I guess I never put that together. And so I had some objects that I made static because I was like, oh I just need this for the lifetime of the request. And lo and behold, those weren’t lifetime. A whole bunch of bad data got all over the place. People were showing up saying they were from all these different countries and everything was all wrong because I just… “Whoopsie-daisies.”"
  },
  {
    "start": 671,
    "end": 672,
    "speaker": "Lex Fridman",
    "timestamp": "(01:48:12)",
    "text": "Are some of these bugs difficult to discover until you started-"
  },
  {
    "start": 673,
    "end": 674,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:48:14)",
    "text": "That one seems really easy looking back at it."
  },
  {
    "start": 675,
    "end": 676,
    "speaker": "Lex Fridman",
    "timestamp": "(01:48:17)",
    "text": "In for a loop? Yeah."
  },
  {
    "start": 677,
    "end": 678,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:48:18)",
    "text": "And we actually, during those days we had manual QA that are supposed to go through everything. So I didn’t feel as bad because my manual QA counterpart also missed it. We all missed it. But it was just so simple. Just press that button, boom. It just completely freezes the website."
  },
  {
    "start": 679,
    "end": 680,
    "speaker": "Lex Fridman",
    "timestamp": "(01:48:33)",
    "text": "Polluting the code with global variables that are holding values, SPHP I think allows you to do, that’s a tricky one to discover, because you rely on it, then there could be somebody else assigns a value to it."
  },
  {
    "start": 681,
    "end": 683,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:48:47)",
    "text": "Yeah, it’s a data race everywhere. And I just didn’t understand… In my head static was like, “Oh, this is for the life.” I was just so locked into the PHP world at that time that I just made just such a, looking back on it’s so obvious. But during the time, it’s hard. Pieter Levels"
  },
  {
    "start": 684,
    "end": 685,
    "speaker": "Lex Fridman",
    "timestamp": "(01:49:04)",
    "text": "So in general, pushing to production, I talked to Peter levels about this. He, obvious he’s operating as mostly a solo developer, but he often on the website said thousands, not hundreds of thousands of people use. He often ships to production, pushes to production, meaning just no testing, just like push to fix. What are the pros and cons of that approach in general to you? What do you think?"
  },
  {
    "start": 686,
    "end": 687,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:49:31)",
    "text": "It’s obviously much easier the smaller your organization is. I think no one would argue that sentiment. If it’s just you working on a singular project, it is obviously much easier for you to push directly to production because you are the only one working. You know all the ins and outs and if something were to break, you would discover it. So to me that makes sense. I think the way he operates is perfect for what he does. You couldn’t take what he does and move it to say Microsoft or Netflix or Google because that would obviously… It would just be a disaster, just due to the amount of people all pushing to production. And so I personally love that. I think that you have to gauge both the application you’re building and its complexity and what you’re pushing, and how many people are working on it."
  },
  {
    "start": 690,
    "end": 691,
    "speaker": "Lex Fridman",
    "timestamp": "(01:51:38)",
    "text": "For people who don’t know his tech stack, in terms of web development is PHP, jQuery and SQL."
  },
  {
    "start": 692,
    "end": 693,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:51:45)",
    "text": "Yeah, all great stuff. I’m just surprised he still uses jQuery just given the fact that at this point on the modern web, everything is, you have document query selector and ad event listener click, right? It pretty much has everything you already need. It had DOM content load, all the reasons I used jQuery back in the day was adding a click on a button was hard. You had to deal with IE7, IE8, IE9. Those are hard differences. Whereas now, it’s just so easy. I’m just surprised it’s even that."
  },
  {
    "start": 694,
    "end": 695,
    "speaker": "Lex Fridman",
    "timestamp": "(01:52:13)",
    "text": "That’s definitely a trade-off. I still use the exact same stack, PHP, jQuery and different flavors of SQL. But the question there is you keep using jQuery because you can get the job done really fast and there’s no significant performance hit that you detect. So like why swish to something else? But it’s always probably as we’ll talk about good to explore and to learn."
  },
  {
    "start": 696,
    "end": 698,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:52:39)",
    "text": "Not all tools are great at solving all problems. And so what you think is really the problem is you run into this trade off, which is you have some tool belt that you’re very adept with, you know all the ins and outs. There’s no unknown unknowns, but there’s no surprises in this. You know what you’re building, you know what you’re getting into. You will go through and you’ll be able to solve the problem. But if you ever use a different language or a different experience, you can find that some things are able to represent states way easier, in a way more efficient way. And you can solve problems really efficiently in some versus the other. And so it’s like if you don’t take the time to explore as well, you could be missing out on something that makes you twice as good on this one specific problem like subset. And so I value being able to look at all problems. And so I don’t want to get stuck on one thing though. I see why people do, which is for the efficiency sake. Netflix, Twitch, and YouTube infrastructure"
  },
  {
    "start": 699,
    "end": 700,
    "speaker": "Lex Fridman",
    "timestamp": "(01:53:34)",
    "text": "Let’s just return to the infrastructure of the platform of Netflix and, speak more generally, Netflix, Twitch, YouTube. Anytime I use any of these services, I’m just blown away by the infrastructure it takes to deliver this service. YouTube and Twitch are unique, versus Netflix where the creators can roll in themselves and upload stuff. So on the consumption side, YouTube has over 100 billion views a day, over one billion hours watch time. But on the creator side, one million hours of videos are uploaded every day. One million hours. It’s like you have to service both and you have to deliver everything… It’s just incredible to me. Can you maybe speak to your own intuition, just zooming out on it, what it takes to deliver that kind of infrastructure?"
  },
  {
    "start": 701,
    "end": 702,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:54:25)",
    "text": "For me, the thing that I find vastly complicated and I can’t imagine the engineering hours, is how do you even create an edge in that situation? And what I mean by an edge, when people say this phrase, if you’re unexperienced, an edge is where you deliver data. You want that edge to be as close to the customer as possible because that’s where the data lives. And then the communication between the customer and what you’re doing is really, really small. Obviously the speed of light adds up, the amount of hops adds up, the amount of services that you have to remotely call adds up."
  },
  {
    "start": 704,
    "end": 705,
    "speaker": "Lex Fridman",
    "timestamp": "(01:55:33)",
    "text": "Actually, it is brilliant what you said, which is for YouTube often the new thing is extremely important to show to everybody. And so, you can’t rely on caching or trivial kind of caching."
  },
  {
    "start": 706,
    "end": 707,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:55:34)",
    "text": "Yeah."
  },
  {
    "start": 708,
    "end": 709,
    "speaker": "Lex Fridman",
    "timestamp": "(01:55:48)",
    "text": "You have to deliver the new thing as quickly as possible. Yeah, it’s incredible. So there’s the entire system, the recommendation system that knows each individual human watching YouTube and it has to integrate into that the new thing, while also caching this incredible cluster of possible videos that you’re potentially interested in. And integrate into that ads in the case of YouTube and so on."
  },
  {
    "start": 710,
    "end": 711,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:56:19)",
    "text": "It’s a really tough problem because you have to think what is the cash hit rate on this? Because the problem now actually comes down to space, space actually becomes a real problem. How many hundreds of petabytes do they have that they have for like, “Okay, what do we cache and where do we cache this?” The number, I think in the terms of gigabytes or maybe megabytes, they have to think in probably versions of bytes I don’t even know the name for right? It’s such a different problem and that’s why I said Netflix. Netflix has a much easier job when it comes to caching. So if you’ve never looked it up, it’s called OCA and that we know what videos we’re releasing, we know what videos are hot in specific areas. It’s a very limited set. We’re not going to all of a sudden get, “Oopsies, we got a million new view hours.” We don’t even have to worry about that as a problem. So it’s like, “Okay, we know Stranger Things season five’s about to drop, we’re going to pre-cash Stranger Things season five in every single OCA across the world because that thing’s about to get hammered.” And so it’s like it’s able to do such a different decision-making than what you have to do with something like YouTube. And then Twitch is even more wild because now you’re actually ingesting video and trying to make it go out all at the exact same time for all video and you have to transform that video from whatever format and whatever the bit rate is into something that’s more efficient in the system like that. Hats off to Twitch engineering, because that’s some serious work."
  },
  {
    "start": 712,
    "end": 713,
    "speaker": "Lex Fridman",
    "timestamp": "(01:57:44)",
    "text": "And here’s some asshole, Lex, coming out and tweeting about YouTube features. Listen…"
  },
  {
    "start": 714,
    "end": 715,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:57:53)",
    "text": "You’re not wrong on the features you asked for, though."
  },
  {
    "start": 716,
    "end": 717,
    "speaker": "Lex Fridman",
    "timestamp": "(01:57:56)",
    "text": "I think this is an engineering problem of how do you allow fast iteration and addition of features that shouldn’t have to be integrated or impact the whole code base. So at the edges of the code base improve on certain features, without having to consult the mothership of the code."
  },
  {
    "start": 718,
    "end": 719,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:58:19)",
    "text": "It’s the large team, right? That’s the fundamental problem. When you get into YouTube size, there is the team/organization that deals with data warehousing. There’s the team slash organization that deals with delivery. There’s a team slash organization that’s like the middle layer, how you even… They’re going to be like the little micro-surfaces to talk to these places. Then you have this front-end engine. So for a small feature, you have to get middle team, you have to get backend team, you have to get all these things. Quick example, Netflix. Are you familiar with the dystopian, Black Mirror?"
  },
  {
    "start": 720,
    "end": 721,
    "speaker": "Lex Fridman",
    "timestamp": "(01:58:19)",
    "text": "Yeah."
  },
  {
    "start": 722,
    "end": 723,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:58:51)",
    "text": "Okay. Season one, episode one. Do you know season one, episode one? Everyone who watches Black Mirror typically knows this episode."
  },
  {
    "start": 724,
    "end": 725,
    "speaker": "Lex Fridman",
    "timestamp": "(01:58:57)",
    "text": "Okay, yeah. I don’t remember what it is."
  },
  {
    "start": 726,
    "end": 727,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:58:58)",
    "text": "Forgive my language, but they call it the pig-fucker episode."
  },
  {
    "start": 728,
    "end": 729,
    "speaker": "Lex Fridman",
    "timestamp": "(01:59:01)",
    "text": "Oh yeah, of course."
  },
  {
    "start": 730,
    "end": 731,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:59:02)",
    "text": "Once you’ve seen the episode, you will then know this episode. Well, when Netflix adopted it, I got pulled into a room, there’s like a VP, a product designer, a VP, and they said, Hey, we’re about to release our own version of Black Mirror, season three, I think at that time. We need episode one, season one to not be the first thing people see. So let’s just reverse the season order. That required me… I had like 20 engineers I had to gather together to be able to have this happen. And that’s just the problem of big companies is that eventually every little thing has to become its own team. And so even small… There’s no such thing as a small feature."
  },
  {
    "start": 732,
    "end": 733,
    "speaker": "Lex Fridman",
    "timestamp": "(01:59:42)",
    "text": "Reversing the order of the dropdown that selects the seasons is a meeting with a bunch of VPs and engineers. That’s really interesting."
  },
  {
    "start": 734,
    "end": 735,
    "speaker": "ThePrimeagen",
    "timestamp": "(01:59:50)",
    "text": "Yeah."
  },
  {
    "start": 736,
    "end": 737,
    "speaker": "Lex Fridman",
    "timestamp": "(01:59:50)",
    "text": "There’s got to be a way to accelerate that. The natural scaling of a company and the bureaucracy that grows, yes, slows that down. But just having seen Elon work a lot, his teams are able to still keep it very fast, even as the company grows. There’s got to be a process to doing that, especially for the pig-fucker episode. I don’t know where that’s in the priority list, but for important things like that, you should be able to do that quickly. I don’t know. Can you speak to how would you do that?"
  },
  {
    "start": 738,
    "end": 739,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:00:25)",
    "text": "Well, I can tell first how it was done. Remember… So at a place like Netflix, there would be… I think that at that point it’s called a product called Dexter. I can’t remember. There’s our actual movie metadata warehouse that’s going to be highly integrated with Hollywood, where that side is able to manage all that. So I’m like, “Hey, you need the ability to mark things that need to be reversed because we’re going to run into this a bunch.” And we did. We ran into quite a few topical shows that all need to be reversed and all that. And so it’s like, “We need to be able to reverse episode numbers, season numbers. We need to be able to hide season or episode numbers.”"
  },
  {
    "start": 741,
    "end": 742,
    "speaker": "Lex Fridman",
    "timestamp": "(02:01:31)",
    "text": "Yeah."
  },
  {
    "start": 743,
    "end": 744,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:01:32)",
    "text": "And so it’s like, you could see this thing like snowballing. And for us, the big thing that Netflix did that was so well is after I met with these people that were high level, I was the captain. “I’m the captain now.” So I went to all these teams and said, “Hey manager, I need an engineer. We need to get this done within the next couple of months because we got Black Mirror coming out.” So she would go, “Okay, here you go.” “The map team, I need someone to help me with being able to get data out of the lomo for this.” And so it’s like, “All right, you’re working with this engineering.”"
  },
  {
    "start": 746,
    "end": 747,
    "speaker": "Lex Fridman",
    "timestamp": "(02:02:29)",
    "text": "Well, because you have the freedom of the agency to do it. You said the captain of the ship. That’s really powerful. For big companies, that’s a risk. Because you can fuck it up. You might not see the bigger context legally the bigger context of the impact on the industry or all the contracts that are made, all that. So it’s a risk, it’s a risk, but it’s a risk you have to keep taking. And then when you fuck up, you fix, and then maybe pay the cost legally for that, whatever. But the long term, that risk pays off because you’re going to keep creating a better and better product, evolving where the industry is going, constantly innovating ahead of where the industry is going and so on. Yeah."
  },
  {
    "start": 748,
    "end": 749,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:03:08)",
    "text": "And not only that, I think one thing that is just so important is that yes, the product will get better, but the people that you hire and the people that you keep around are better because they’re the ones that show maturity. They’re the ones that can just… You give them something and they can rally the troops and make something happen. That’s a very great group of people to hire. And so you also naturally select out great engineers that aren’t just simply good at coding, they’re good at coding and they’re good at explaining and they’re good at convincing. And you have to create a very lean audience that can move fast."
  },
  {
    "start": 750,
    "end": 751,
    "speaker": "Lex Fridman",
    "timestamp": "(02:03:40)",
    "text": "And I think for great engineers, having to wait for like, “Okay, let’s schedule a meeting for next Wednesday with the VPs and…” That destroys their soul. And they either don’t want to contribute anymore or they leave the companies or they just tune out and take the golden handcuffs and just buy a nice house and focus on a family."
  },
  {
    "start": 752,
    "end": 753,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:04:04)",
    "text": "Yeah. I feel like I would die under that… Honestly, that is my death sentence is where it’s just that there’s no reason to try, there’s no reason to do anything. I’m just going to go in there, effectively zombie through my day and call it… I don’t want to live like that. I want to feel like I’m trying to do something."
  },
  {
    "start": 754,
    "end": 755,
    "speaker": "Lex Fridman",
    "timestamp": "(02:04:22)",
    "text": "I should also mention on top of that, so you’ve brilliantly laid out how incredible the challenge that Netflix has to solve. On top of that with YouTube, the metadata thing, because users are able to upload video and there’s an API where they can upload automatically and change all this kind of stuff automatically. Every one of those things is an attack vector, as we mentioned. That’s something they have to consider seriously on the engineering side. And on the legal side, they can get into trouble all kinds of ways. So they have to consider all of that, which is fascinating."
  },
  {
    "start": 756,
    "end": 758,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:04:59)",
    "text": "The legal side is obvious, but it’s not really like… I would never have initially thought someone would, say, upload images that you’re not allowed to own or have. But that guarantee you that happens. Then you have the whole kid side, right? I think about when you mark something as kid-friendly, how many times have they snuck porn into a Taylor Swift video or whatever? That was like a few years back, there was that whole Taylor Swift or whatever. I forget what it was, I thought it was Taylor Swift. But there’d be these mock videos that’d come up and then, boom. It’s like, that is such an awful problem and I’m so happy that is not a problem. I have to try to figure out. ThePrimeagen origin story"
  },
  {
    "start": 759,
    "end": 760,
    "speaker": "Lex Fridman",
    "timestamp": "(02:05:32)",
    "text": "Okay. So yes, YouTube and Twitch and Netflix are doing an incredible job. You eventually chose, the madman you are, to leave Netflix and to start on a new journey of being a wolf pack of one, start streaming. What was that? What was the story of that?"
  },
  {
    "start": 761,
    "end": 762,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:05:52)",
    "text": "So I was streaming for almost seven years now. It started actually at Netflix. We did a charity, Extra Life, shout out to Extra Life for starting my streaming career, effectively is just you stream and whatever money you raise, it goes to Kids with Cancer research. They are a great charity in the sense that they take no overhead and they raise their own donations for their website and everything. And so it’s a very great, straightforward charity. Really love what they’ve done. It was super cool because I live in South Dakota now, but I actually could choose a hospital directly where the money goes to. So there’s a direct impact from A to B. So it’s a pretty cool organization. And so my friend, Guy Cirino, Nice Try Guy is what I like to call him, he was probably the single greatest engineer I’ve ever met in my lifetime."
  },
  {
    "start": 767,
    "end": 768,
    "speaker": "Lex Fridman",
    "timestamp": "(02:10:02)",
    "text": "It’s a really inspiring leap. It’s a really hard one to take for many reasons, like you outlined, but also the loneliness of it, I think it’s a pretty lonely pursuit."
  },
  {
    "start": 769,
    "end": 770,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:10:14)",
    "text": "It is."
  },
  {
    "start": 771,
    "end": 772,
    "speaker": "Lex Fridman",
    "timestamp": "(02:10:15)",
    "text": "Just you and the camera and the audience and the ups and downs of that. And there’s not really a team."
  },
  {
    "start": 773,
    "end": 774,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:10:21)",
    "text": "I do have one lucky thing I’d say that, my editor, Flip, shout out Flip."
  },
  {
    "start": 775,
    "end": 776,
    "speaker": "Lex Fridman",
    "timestamp": "(02:10:25)",
    "text": "Flip, shout out."
  },
  {
    "start": 777,
    "end": 778,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:10:26)",
    "text": "He said it would mean the world to him if I said, “Shout out, Flip.”"
  },
  {
    "start": 779,
    "end": 780,
    "speaker": "Lex Fridman",
    "timestamp": "(02:10:28)",
    "text": "I love you, Flip. We all love you."
  },
  {
    "start": 781,
    "end": 782,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:10:31)",
    "text": "Oh, man. He had, as he would say, he had nothing going for him. He had a really hard growing up. A lot of rough life decisions have gone into his life and he’s crawling back out of it. And he just said, Hey, I’ll edit full-time for you. So I just said, “All right, like 50/50, whatever I make on YouTube, you get. We’re going to do this together.” And we did that for years, making $0 a month pretty much. And so it’s just like that was an incredible jump and now we get to work together. So I do get that one team aspect that I think is really nice. But it’s not like it was at Netflix where I could hear about stuff people are building, I don’t have a team, I don’t have product or cycles, I don’t have a manager that I have to try to make happy. It’s just like… It is very lonely. And I don’t think a lot of people realize how lonely it actually can be."
  },
  {
    "start": 783,
    "end": 784,
    "speaker": "Lex Fridman",
    "timestamp": "(02:11:19)",
    "text": "Yeah. So combine that loneliness with, in my case, I don’t know how many people attack you."
  },
  {
    "start": 785,
    "end": 786,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:11:24)",
    "text": "I have a shockingly low amount of attack rate, I feel like."
  },
  {
    "start": 787,
    "end": 788,
    "speaker": "Lex Fridman",
    "timestamp": "(02:11:28)",
    "text": "Yeah, people generally… It’s sometimes fun sort of teasing, that kind of thing, but it’s mostly just really… You give so much love to the world and inspire so many people, even when you’re making fun of stuff, yeah. But with me taking the loneliness of it combined with just really intense attacks, it’s tough. It can be rough. Psychologically, really a tough journey. You miss working with a team, just from even a software engineering side, where you can share code or talk over code?"
  },
  {
    "start": 789,
    "end": 790,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:12:01)",
    "text": "Yeah."
  },
  {
    "start": 791,
    "end": 792,
    "speaker": "Lex Fridman",
    "timestamp": "(02:12:02)",
    "text": "Yeah, the collab…"
  },
  {
    "start": 793,
    "end": 794,
    "speaker": "Lex Fridman",
    "timestamp": "(02:12:00)",
    "text": "Or talk over code or the collaborative aspect of it."
  },
  {
    "start": 795,
    "end": 796,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:12:05)",
    "text": "Yeah, multiple things there. One, hey, we love you Lex, so don’t let the things get you down."
  },
  {
    "start": 797,
    "end": 798,
    "speaker": "Lex Fridman",
    "timestamp": "(02:12:12)",
    "text": "Thank you. Thank you. I love you too."
  },
  {
    "start": 799,
    "end": 800,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:12:15)",
    "text": "Thank you. Hey, little bonding moment here going on. But one thing I really miss-"
  },
  {
    "start": 801,
    "end": 802,
    "speaker": "Lex Fridman",
    "timestamp": "(02:12:20)",
    "text": "Not in a sexual way, just to be clear."
  },
  {
    "start": 803,
    "end": 804,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:12:21)",
    "text": "The tension is a little tense."
  },
  {
    "start": 805,
    "end": 806,
    "speaker": "Lex Fridman",
    "timestamp": "(02:12:23)",
    "text": "I’m getting uncomfortable. Yeah. Anyway, team."
  },
  {
    "start": 807,
    "end": 808,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:12:27)",
    "text": "It’s just the one thing I really miss is just, even when I hated how people did it, just seeing how other people solved things, it’s really amazing just the raw creative power so many people have, and just being like, oh, wow, I would’ve never done it this way. Crazy, right? Wow, this is awesome. And then you kind of internally process this and you’re like, oh, I now have a new little tool in my tool belt. Because at some point it’s really hard to find a mentor when you’re first, young and you’re just starting out programming. I mean, anyone with a couple years of experience will be not just a little bit better than you, but infinitely better than you. It feels like crazy how much better people are. And so you have to get mentors and you learn from people. And then as you get better, that amount of availability gets really small. And so it’s something that I really do miss is that forced hard problem solving together."
  },
  {
    "start": 809,
    "end": 810,
    "speaker": "Lex Fridman",
    "timestamp": "(02:13:19)",
    "text": "I think there’s also a skill to mining the wisdom from other people. I generally try to approach even junior people, young folks. It’s just mentally, at least for me, it works as a hack to assume they’re the smartest person in the world, way smarter than me. And so I take every single word they say as potential wisdom, and that helps me sort of mine for potential wisdom there. Because it’s so easy once you get older to judge, to be like, yeah, okay, okay. I’ve been through that. I remember feeling like that. I remember thinking that. That’s incorrect, whatever. But just kind of assume that I don’t know what the fuck I’m doing, and the other person is this sage. And in that kind of interaction, I think you could actually learn a lot. And my favorite interactions is when we both think that way. So from there, I think that’s a catalyst for a great collaboration and interaction."
  },
  {
    "start": 811,
    "end": 812,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:14:19)",
    "text": "It just also makes everything much nicer. It really stinks to work with someone that’s combative and negative. I don’t mind combativeness if it’s like I’m trying to figure out what’s best to do right now, versus combativeness just because you’re a negative person and things have to be this one particular way, because if they’re not this one particular way, it’s the end of the world. And that’s actually really hard for me to work with."
  },
  {
    "start": 813,
    "end": 814,
    "speaker": "Lex Fridman",
    "timestamp": "(02:14:43)",
    "text": "What’s the origin story of ThePrimeagen name?"
  },
  {
    "start": 815,
    "end": 816,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:14:47)",
    "text": "The origin story of ThePrimeagen name was, are you familiar with a video game called Turok? Nintendo 64. Turok had Turok I and then Turok II. Turok II was a brutally hard game. This is back when first-person shooters, they would only give you a certain amount of health, and you had to go discover health and get that health. And you had to beat the whole game without effectively dying. That’s the first version right there. That’s like Turok I and Turok II."
  },
  {
    "start": 817,
    "end": 818,
    "speaker": "Lex Fridman",
    "timestamp": "(02:15:16)",
    "text": "Turok is a renowned first-person shooter video game series featuring dinosaurs, action, and sci-fi elements. The franchise has evolved significantly since its inception in 1997."
  },
  {
    "start": 819,
    "end": 820,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:15:27)",
    "text": "There you go. So in 1998, there, you can see it right there."
  },
  {
    "start": 821,
    "end": 822,
    "speaker": "Lex Fridman",
    "timestamp": "(02:15:30)",
    "text": "Turok II, Seed of Evil followed in 1998 featuring larger levels, more challenging puzzles, and deadlier enemies."
  },
  {
    "start": 823,
    "end": 824,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:15:37)",
    "text": "The notable difficulty, it was very, very, very difficult. So I spent, when I got it, it came in a black cartridge, not like your standard gray Nintendo 64, the black cartridge. Badass game. And I got it and I put it in and I played, and I played every day for 10 hours a day, for a month straight. And I beat it. And it was such an incredible, great experience. And the last leader of Turok II is called the Primeagen. And so when I was a kid, when you’re in fifth grade, that’s super cool, named after the bad guy. And so for a long time on any internet thing, like Grail Online that I mentioned earlier, the name was ThePrimeagen. It was great. And then I became an adult eventually, and it’s just like, okay, I’m an adult. My name’s Michael Paulson underscore. And that’s what I was on the internet for a long time was that. And I remember it was like 2017, 2018, somewhere in there."
  },
  {
    "start": 828,
    "end": 829,
    "speaker": "Lex Fridman",
    "timestamp": "(02:19:01)",
    "text": "Yeah, I love that as a symbol of rage against the machine and the rage being fun."
  },
  {
    "start": 830,
    "end": 831,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:19:07)",
    "text": "Yeah. I just want people to be creative and have fun again. It’s okay."
  },
  {
    "start": 832,
    "end": 833,
    "speaker": "Lex Fridman",
    "timestamp": "(02:19:11)",
    "text": "What about the mustache? It’s an epic mustache. It’s an epic stash. It has a life of its own. Is there an origin story or did you guys discover each other at some point? Or did it emerge from the darkness of the struggle that is your life, or where does it come from?"
  },
  {
    "start": 834,
    "end": 835,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:19:29)",
    "text": "Well, the original mustache is that it was no-shave November back before it became Movember. It was no-shave November back in the day. And after no-shave November, you had all this hair. And so what’s the natural thing you got to do? You got to sport a mustache for a day. So whenever I’d forget to not shave for a long time, and then I’d let it start growing out really big, I just go, oh, this is kind of funny. I’ll have a mustache. So one day when I was streaming, it’s just one of those times I just didn’t shave, and then I started just letting it go, and then I got kind of a beard, and then I just had a mustache. When I did it, people were just like, yeah, it’s mustache time. And I was just like, heck yeah, it feels like a lifestyle decision."
  },
  {
    "start": 837,
    "end": 838,
    "speaker": "Lex Fridman",
    "timestamp": "(02:20:40)",
    "text": "Yeah, we’re chatting offline how one of the components of a successful relationship is sacrifice and your wife was willing to take the sacrifice of allowing you to have a mustache."
  },
  {
    "start": 839,
    "end": 841,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:20:48)",
    "text": "I clearly was not willing to sacrifice not having one. Learning programming languages"
  },
  {
    "start": 842,
    "end": 843,
    "speaker": "Lex Fridman",
    "timestamp": "(02:20:53)",
    "text": "You do this incredible thing where you tried a bunch of different programming languages when you stream. You go all out on certain programming languages like Rust and then go and then try to pick a new one, but also are experimenting constantly. So maybe one question I could ask is about learning. What’s your approach to learning a new programming language, and maybe what’s your advice on learning a new programming language when you begin that journey?"
  },
  {
    "start": 844,
    "end": 845,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:21:26)",
    "text": "So I’ve kind of done a bunch of different ways to go through this learning process, and I’ve tried a lot of different ones. Something that is obviously successful is just start building something. Just put your hands on the keyboard, especially if you already know how to program. You’re like, okay, I’m now using Zig. How do I do a main function so I can just run the program? Okay, now I know how to build. Okay, how do I do an if statement? What does it look like? Okay, how do I declare my own functions? How do I do modules, right? You just kind of Google your way through it, if you will, to get to the end product and build something. It’s a great way to do things because I find that repetition, rote learning is obviously the best way to do this. You have to kind of go over it a bunch and you can definitely get out and build a lot of stuff with that. I like that initial kind of get used to things."
  },
  {
    "start": 848,
    "end": 849,
    "speaker": "Lex Fridman",
    "timestamp": "(02:23:30)",
    "text": "Where exactly are you reading this-"
  },
  {
    "start": 850,
    "end": 851,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:23:35)",
    "text": "Language reference."
  },
  {
    "start": 852,
    "end": 853,
    "speaker": "Lex Fridman",
    "timestamp": "(02:23:38)",
    "text": "The language reference."
  },
  {
    "start": 854,
    "end": 855,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:23:38)",
    "text": "So it just goes through every feature top to bottom, right?"
  },
  {
    "start": 856,
    "end": 857,
    "speaker": "Lex Fridman",
    "timestamp": "(02:23:38)",
    "text": "That’s a lot. Yeah."
  },
  {
    "start": 858,
    "end": 859,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:23:39)",
    "text": "Every way it’s described, all the different things. I think Zig’s is, it’s a decent size, but it’s not just simply read the words. You want to internalize each concept as well. So it takes a long time. So I’m a slow reader."
  },
  {
    "start": 860,
    "end": 861,
    "speaker": "Lex Fridman",
    "timestamp": "(02:23:51)",
    "text": "So you’re building, in AI terms, like a background model. I don’t think you can just start building once you’re done reading because you probably forgot how to do a for loop. You kind of forget the specifics. You just are building up the design choices, the set of features available, what are the strengths and weaknesses, all that kind of stuff. And then you start building. That’s really interesting. Probably not the thing you would recommend to a junior developer, somebody who’s just starting out at first."
  },
  {
    "start": 862,
    "end": 863,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:24:24)",
    "text": "If you don’t know what an if statement is, that’s not a good way to learn. To me, the best way to learn that is really hands on the keyboard and building extremely simple things, and slowly growing in complexity. Because understanding what a class and methods and instances versus the blueprint, which is the class versus functions versus modules versus all that stuff. That just takes time to learn. And so that’s a completely different style of learning."
  },
  {
    "start": 864,
    "end": 865,
    "speaker": "Lex Fridman",
    "timestamp": "(02:24:46)",
    "text": "I wonder because for me, learning right now, AI is a huge help, but I already have a lot of experience. I wonder, if you’re starting from scratch, whether that’s a good idea. But I still think it’s probably a really good idea, but basically generate some code using AI and figure out what it’s doing by playing with different parts. Maybe can you comment on that aspect, like the use of AI as part of the learning process?"
  },
  {
    "start": 866,
    "end": 867,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:25:15)",
    "text": "This is where I have both the hopeful and the doomer take at the exact same time, and it’s the same thing with Google or Stack Overflow, it’s all the same kind of take, which is it’s just making things more democratized in some sense. I get to ask questions in probably the most personal possible way with my own voice, in my own words, and it’s able to produce out answers and hopefully help guide me. Now, regardless of just say the errors and the incorrectness of it, ultimately just using it as a learning tool and being able to just formulate and read answers in your own voice, I think is super powerful. And I think it’s super amazing. But the part that I think is going to be really difficult is that we don’t value remembering things anymore as a society. Since the internet came about, I can just look that up. I can just look that up. You don’t need to memorize your times tables."
  },
  {
    "start": 871,
    "end": 872,
    "speaker": "Lex Fridman",
    "timestamp": "(02:28:03)",
    "text": "So if I ask AI to generate code to do a certain thing, actually a large percentage of time, most of what AI generates is going to be correct for me, but some percent of time it’s not, fundamentally not. And for me to recognize the difference between those two, I think it takes a lot of experience. I think to learn that skill of knowing, no, no, no, a different new out of the box solution is needed here than the one you’re providing. You’re missing the point. That’s a skill, and how do you learn that? You learn that by building from scratch. So both are probably really necessary."
  },
  {
    "start": 874,
    "end": 876,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:29:17)",
    "text": "At some point you have to take off the training wheels, because I think what you’re really spotting is the difference between reading and writing code. I can read a lot of languages very well. I can see what’s happening. I can understand it, but I would not be very good at writing it. I can understand a lot of things about C++ and I can read it, but I’m just not that because I just don’t done it in so long. I can’t remember where all the semicolons, and colons and you do public and private, and how should you do naming conventions? All those things kind of add all together, and then you’re just like, oh, I’m really bad at writing it, though I can read it. And so there’s a skill gap chasm that exists between those two. Best programming languages in 2025"
  },
  {
    "start": 877,
    "end": 878,
    "speaker": "Lex Fridman",
    "timestamp": "(02:29:56)",
    "text": "All right. Well, let me talk about the various languages. The cheesy, ridiculous question of what’s the best programming language? Let’s say, what’s the best programming language that everybody should learn? Maybe let’s go with the top five. I’m going to pull up the Stack Overflow developer survey, because I think we have… You don’t like them?"
  },
  {
    "start": 879,
    "end": 880,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:30:21)",
    "text": "You got to remember, because I mean, you’re a data guy. You know about biases and data. What does Stack Overflow naturally bias towards?"
  },
  {
    "start": 881,
    "end": 882,
    "speaker": "Lex Fridman",
    "timestamp": "(02:30:28)",
    "text": "Well, they have the different slices of professional developers, junior developers, they have different slices. Okay, what is the bias?"
  },
  {
    "start": 883,
    "end": 884,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:30:36)",
    "text": "I hear you, but who fills out a Stack Overflow survey? Someone who participates on Stack Overflow. Who’s participating on Stack Overflow? Largely very, very new people, and that one guy that loves answering questions. And so I’m not sure if Stack Overflow is a great place to get data. It could be a very biased set of data."
  },
  {
    "start": 885,
    "end": 886,
    "speaker": "Lex Fridman",
    "timestamp": "(02:30:52)",
    "text": "Is it really only new people?"
  },
  {
    "start": 887,
    "end": 888,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:30:55)",
    "text": "I mean that’s who’s using Stack Overflow."
  },
  {
    "start": 889,
    "end": 890,
    "speaker": "Lex Fridman",
    "timestamp": "(02:30:58)",
    "text": "All right. Most popular technologies. On this…"
  },
  {
    "start": 891,
    "end": 892,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:31:02)",
    "text": "JavaScript, HTML, Python, SQL."
  },
  {
    "start": 893,
    "end": 894,
    "speaker": "Lex Fridman",
    "timestamp": "(02:31:05)",
    "text": "SQL is the more general kind of… I’m sure they’re not doing the individual sort of flavors of SQL. By the way, pronounce SQL versus SQL?"
  },
  {
    "start": 895,
    "end": 896,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:31:15)",
    "text": "It’s squeal."
  },
  {
    "start": 897,
    "end": 898,
    "speaker": "Lex Fridman",
    "timestamp": "(02:31:16)",
    "text": "Squeal? You squeal?"
  },
  {
    "start": 899,
    "end": 900,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:31:19)",
    "text": "Squeal, I think is the correct way."
  },
  {
    "start": 901,
    "end": 902,
    "speaker": "Lex Fridman",
    "timestamp": "(02:31:19)",
    "text": "Squeal."
  },
  {
    "start": 903,
    "end": 904,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:31:20)",
    "text": "I did SQL because I didn’t know the audience. I don’t know if they can handle the truth, which is its squeal."
  },
  {
    "start": 905,
    "end": 906,
    "speaker": "Lex Fridman",
    "timestamp": "(02:31:25)",
    "text": "The squeal of joy, squeal…"
  },
  {
    "start": 907,
    "end": 908,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:31:27)",
    "text": "Squeal light, my squeal, Postgres squeal."
  },
  {
    "start": 909,
    "end": 910,
    "speaker": "Lex Fridman",
    "timestamp": "(02:31:31)",
    "text": "By the way, I had a lot of joy from earlier saying pigfucker, for some reason."
  },
  {
    "start": 911,
    "end": 912,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:31:34)",
    "text": "It’s such a [inaudible 02:31:36]. I mean, can you believe that was a real conversation that I had?"
  },
  {
    "start": 913,
    "end": 914,
    "speaker": "Lex Fridman",
    "timestamp": "(02:31:38)",
    "text": "Yeah, that was. TypeScript, BAS, Java, C Sharp, C++, C-PHP."
  },
  {
    "start": 915,
    "end": 916,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:31:45)",
    "text": "It largely kind of aligns with the world you’d expect, but Assembly, why is Assembly more popular than Ruby? Who’s writing just Assembly by… No one writes Assembly by hand other than maybe that one guy that’s developing TLS 1.3 and hand rolling a cryptography algorithm to be the fastest possible algorithm."
  },
  {
    "start": 917,
    "end": 918,
    "speaker": "Lex Fridman",
    "timestamp": "(02:32:02)",
    "text": "Yeah. Assembly is a weird one. Maybe people write it maybe in school, but even in school now for a operating systems course or something like that, or system engineering. I don’t know if they write Assembly anymore. I don’t think so anyway."
  },
  {
    "start": 919,
    "end": 920,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:32:18)",
    "text": "And Swift and Ruby being less popular than Assembly seems ridiculous. But nonetheless, okay, so you get my ideas behind that, but as far as top five languages go, that’s probably too broad because you could just name so many. I think you should probably archetype it by what do you want to do? So if you want to get into game development, perhaps C Sharp, C++ could be good choices. Or JavaScript and doing Canvas games, I could see that also working. But you’re limited by doing JavaScript obviously, because you can’t do as much because the language is just not fast enough to do as much. So it’s like a good thing to remember. If you’re going to be doing backend stuff, if you want a job, if you’re looking for a job, maybe C Sharp slash Java, or JavaScript, or Go would be great choices. If you’re looking to do embedded, you probably want to do C, C++, like that would probably be a good choice. And so I think you have to first determine what do you really want to get out."
  },
  {
    "start": 921,
    "end": 922,
    "speaker": "Lex Fridman",
    "timestamp": "(02:33:14)",
    "text": "If you’re just curious about programming, which I talked to a lot of people who are, yeah, you can consider jobs, but basically their question is, okay, what’s the first language I should learn, and maybe what are the several languages I should explore?"
  },
  {
    "start": 923,
    "end": 924,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:33:28)",
    "text": "Can I say something that’s going to make a lot of people angry?"
  },
  {
    "start": 925,
    "end": 926,
    "speaker": "Lex Fridman",
    "timestamp": "(02:33:30)",
    "text": "Yeah, sure."
  },
  {
    "start": 927,
    "end": 928,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:33:30)",
    "text": "I think the first language people should learn if they have no idea about anything is JavaScript."
  },
  {
    "start": 929,
    "end": 930,
    "speaker": "Lex Fridman",
    "timestamp": "(02:33:35)",
    "text": "Yeah. Why would that make people angry?"
  },
  {
    "start": 931,
    "end": 932,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:33:37)",
    "text": "Oh, because people just, first off, I’m not supposed to say anything nice about JavaScript."
  },
  {
    "start": 933,
    "end": 934,
    "speaker": "Lex Fridman",
    "timestamp": "(02:33:41)",
    "text": "Yeah, usually that’s the meme, that you hate JavaScript, right?"
  },
  {
    "start": 935,
    "end": 936,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:33:44)",
    "text": "Yeah. No, JavaScript’s a beautiful language, and it has a lot of things that are very great for it, and one of them is that you can express anything with very little effort. And so someone that’s new, I think it’s really great to be able to draw a box and move a box. That’s great. You get to see it visually. I think that’s one thing that’s really great about JavaScript is that you can do that. Then you can go, okay, I want to learn about the backend. I want to make a request now."
  },
  {
    "start": 938,
    "end": 939,
    "speaker": "Lex Fridman",
    "timestamp": "(02:34:31)",
    "text": "I mean, yeah, just like you said, you can make games, you can do front end, backend for web development."
  },
  {
    "start": 940,
    "end": 942,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:34:37)",
    "text": "You can even do embedded. They actually have… Like there’s Wes Bos is building his Roomba or something and programming it with JavaScript and React, which is just the world’s worst language to choose for embed, but you can still do it. Python"
  },
  {
    "start": 943,
    "end": 944,
    "speaker": "Lex Fridman",
    "timestamp": "(02:34:51)",
    "text": "Also, we mentioned sort of in terms of applications, anything that relates to data or machine learning, Python is the sort of the leader there, so that’s a great one."
  },
  {
    "start": 945,
    "end": 946,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:35:01)",
    "text": "It seems like Python, CUDA stuff and C++ would be a dynamite in that, because a lot of these Python libraries are assumed you’re just smuggling in C++ underneath the hood or C."
  },
  {
    "start": 947,
    "end": 948,
    "speaker": "Lex Fridman",
    "timestamp": "(02:35:11)",
    "text": "Okay, so JavaScript. I’ll say Python."
  },
  {
    "start": 949,
    "end": 950,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:35:14)",
    "text": "Python’s a great one too. You can get quite far with it, but you can’t write the front end. What happened if you love the front end? What happened if you really just want to design things and you just didn’t know that?"
  },
  {
    "start": 951,
    "end": 952,
    "speaker": "Lex Fridman",
    "timestamp": "(02:35:24)",
    "text": "Well, it’s okay. So for that, JavaScript."
  },
  {
    "start": 953,
    "end": 955,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:35:26)",
    "text": "But Python’s a good choice because you can’t do the ML stuff in JavaScript nearly as easy. HTML & CSS"
  },
  {
    "start": 956,
    "end": 957,
    "speaker": "Lex Fridman",
    "timestamp": "(02:35:30)",
    "text": "Do we count HTML and CSS as programming languages?"
  },
  {
    "start": 958,
    "end": 959,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:35:33)",
    "text": "I think there’s some technical definition that it is. If you use this certain amalgamation of CSS plus HTML, it actually has, it can be a Turing complete language. But I mean for practical purposes, no. HTML is not a language. For me, yes, the Turing test is a good one, but for those that are just not wanting to be as academic, if I can’t write a function and an if statement, I don’t feel like that’s… If I can’t loop, if, and function, I don’t feel like that’s a good, that’s a programming language."
  },
  {
    "start": 960,
    "end": 961,
    "speaker": "Lex Fridman",
    "timestamp": "(02:36:03)",
    "text": "Although modern HTML has a lot of features."
  },
  {
    "start": 962,
    "end": 964,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:36:05)",
    "text": "It’s crazy how much it has, but it’s more of a specification than anything else. I specify it to be a pop-up. I specify it to have this kind of accessibility, this kind of look. Under these conditions look like this, transform like this, move down here. Bash"
  },
  {
    "start": 965,
    "end": 966,
    "speaker": "Lex Fridman",
    "timestamp": "(02:36:21)",
    "text": "I don’t know. I kind of like these popular programming languages in this list. I like JavaScript."
  },
  {
    "start": 967,
    "end": 968,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:36:25)",
    "text": "You like Bash?"
  },
  {
    "start": 969,
    "end": 970,
    "speaker": "Lex Fridman",
    "timestamp": "(02:36:26)",
    "text": "Oh, yeah. I like Bash a lot. Yeah. Why?"
  },
  {
    "start": 971,
    "end": 972,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:36:28)",
    "text": "Okay. Bash is kind of one of those ones where it’s like, do you really like it? I like it up until I need an array."
  },
  {
    "start": 973,
    "end": 974,
    "speaker": "Lex Fridman",
    "timestamp": "(02:36:34)",
    "text": "Oh, as a programming language, just no, but I like the command line."
  },
  {
    "start": 975,
    "end": 976,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:36:35)",
    "text": "Okay."
  },
  {
    "start": 977,
    "end": 978,
    "speaker": "Lex Fridman",
    "timestamp": "(02:36:39)",
    "text": "Do you like Bash? No, nobody likes Bash. Do you mean-"
  },
  {
    "start": 979,
    "end": 980,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:36:39)",
    "text": "Someone is so offended right now."
  },
  {
    "start": 981,
    "end": 982,
    "speaker": "Lex Fridman",
    "timestamp": "(02:36:45)",
    "text": "It means do you use it a lot? Yes. I mean, it’s good to learn, right? It is good to-"
  },
  {
    "start": 983,
    "end": 984,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:36:55)",
    "text": "It is."
  },
  {
    "start": 985,
    "end": 987,
    "speaker": "Lex Fridman",
    "timestamp": "(02:36:55)",
    "text": "… Be comfortable in the command line because it’s a bit of a superpower. It’s like, I think I follow on Twitter, FFMPEG. FFmpeg"
  },
  {
    "start": 988,
    "end": 989,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:37:02)",
    "text": "Great account."
  },
  {
    "start": 990,
    "end": 991,
    "speaker": "Lex Fridman",
    "timestamp": "(02:37:05)",
    "text": "There’s certain Twitter accounts that are just legit. And I think FFMPEG, they have all these sort of parameters that you can add on the command line, that it’s like one of those cryptic languages that only very few wizards understand. But once you begin to slowly understand, and I’m only at the very sort of beginning stage of that journey to mastery, the powers you gain at every step, it grows exponentially, it feels like. I mean, FFMPEG is just this incredible, what would you call a library system? There’s just the people behind them must be just brilliant masterminds because they have to work with all these codecs, with all these containers, with all the mysteries of the media codec universe they’re masters of. And they understand compression, which is another super fascinating technical set of problems that, I don’t know, just FFMPEG just fills me with joy that it exists. But you need kind of Bash type comfort, command line comfort, to work with it to really unlock its power. Yeah."
  },
  {
    "start": 992,
    "end": 993,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:38:12)",
    "text": "I think FFMPEG is probably one of the most consequential libraries of our day, and the Twitter account is so unhinged. It is the most amazing thing to see because I think FFMPEG does not get the love it deserves. Every single application, OBS, probably FFMPEG underneath the hood. Everything, FFMPEG underneath the hood, and yet they do not get the love they deserve. I just love it. I just think they’re the best."
  },
  {
    "start": 994,
    "end": 995,
    "speaker": "Lex Fridman",
    "timestamp": "(02:38:39)",
    "text": "Yeah, I would say JavaScript, HTML, CSS, Python, SQL, I mean that is SQL Squeal is a programming language. It’s an incredibly sophisticated programming language. Yeah?"
  },
  {
    "start": 996,
    "end": 997,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:38:52)",
    "text": "SQL is interesting. I believe you can classify it as a programming language. It does have, if. You have case statements and it’s pretty crazy what you can do with it."
  },
  {
    "start": 998,
    "end": 999,
    "speaker": "Lex Fridman",
    "timestamp": "(02:39:00)",
    "text": "You could do functions, you can do all that stuff. You shouldn’t."
  },
  {
    "start": 1000,
    "end": 1001,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:39:02)",
    "text": "Yeah, for stored procedures, that’s how you make your life hell. I will say that all the top languages there, none of them are strict static typed languages. And so even TypeScript, I don’t like this any. And so for people that are learning, doing something that’s much more strict would be great. Something like Go, Rust, I mean even C Sharp, C++. Anything that kind of changes your perspective of types I think is really helpful to kind of go through. They’re not getting nearly as much love on this most popular language list, but I think they’re very fantastic."
  },
  {
    "start": 1002,
    "end": 1003,
    "speaker": "Lex Fridman",
    "timestamp": "(02:39:38)",
    "text": "All right, well, if I put a gun to your head, top five languages, let’s list them out. There’s a bright-eyed 20-year-old asking you, what are the top languages, five languages to learn?"
  },
  {
    "start": 1004,
    "end": 1005,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:39:51)",
    "text": "If I were to pick five languages that I think people should learn, or at least, let’s restate it this way, I’m going to say a couple languages and you should at least explore some of them. I think you should explore a loosey language, so Python slash JavaScript, where there is truly only one type, which is a boxed value, which is a multivariate, different types underneath the hood."
  },
  {
    "start": 1006,
    "end": 1007,
    "speaker": "Lex Fridman",
    "timestamp": "(02:40:12)",
    "text": "What did you call it? A loosey language?"
  },
  {
    "start": 1008,
    "end": 1009,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:40:13)",
    "text": "A loosey-goosey language. It’s a dynamic language, and so I think it’s really good to explore one of those too. So I’d put Python or JavaScript right there. Even Lua, throw Lua in the bunch. I think you should explore a strict language, so I’d do something like Rust, Go. I think those are both really, really great."
  },
  {
    "start": 1010,
    "end": 1011,
    "speaker": "Lex Fridman",
    "timestamp": "(02:40:31)",
    "text": "C++?"
  },
  {
    "start": 1012,
    "end": 1013,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:40:32)",
    "text": "You can do C++. You can do some type erasure in C++. You can do it with Go as well, but for the most part it’s a great language to do that in. It can get a little wild. New C++ seems great. Everyone keeps telling me new C++ is great. It has every feature you’ve ever wanted and all the features you don’t want."
  },
  {
    "start": 1014,
    "end": 1015,
    "speaker": "Lex Fridman",
    "timestamp": "(02:40:47)",
    "text": "Yeah, exactly. I mean there’s smart pointers, there’s dumb pointers, there’s all kinds of pointers. There’s no memory leaks. That’s not an issue."
  },
  {
    "start": 1016,
    "end": 1017,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:40:55)",
    "text": "Foot guns, face guns, soft beds. There’s everything in there."
  },
  {
    "start": 1018,
    "end": 1019,
    "speaker": "Lex Fridman",
    "timestamp": "(02:40:58)",
    "text": "Unless you like memory leaks, it has that too if you want that kind of thing. It’s great."
  },
  {
    "start": 1020,
    "end": 1021,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:41:02)",
    "text": "Okay. How about this one? Languages that I actually want to really learn, that at least sit in my curiosity bank. There’s three languages, which is going to be Swift, Elixir, OCaml, and then I’m going to throw Odin in there, just because Ginger Bill is great. But Elixir and OCaml, I don’t have a strong functional language underneath my belt. That’s something that I just genuinely lack."
  },
  {
    "start": 1022,
    "end": 1023,
    "speaker": "Lex Fridman",
    "timestamp": "(02:41:26)",
    "text": "Yeah, I’ve heard incredible things about Elixir, about Odin, about OCaml. Obviously, I’m a person, as you know, who loves Lisp."
  },
  {
    "start": 1024,
    "end": 1025,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:41:33)",
    "text": "I have never done Lisp. Lisp could be in that category too, just, or Closure I think at this point is what everyone tells you to use."
  },
  {
    "start": 1026,
    "end": 1027,
    "speaker": "Lex Fridman",
    "timestamp": "(02:41:39)",
    "text": "So in the case of Lisp, I don’t want to speak negatively about Lisp, but it’s important about modern community, what the community looks like. It seems like there’s an excited, maybe small, but an excited community around Elixir, Odin, and OCaml, so that helps. Because then you can post shit on Twitter that you’re like, I accomplished this. People get excited and it’s nice. It’s a good feeling."
  },
  {
    "start": 1028,
    "end": 1029,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:42:01)",
    "text": "You can post something on Twitter and you’ll get a thousand likes if you do something cool on Elixir, which is that’s a pretty big amount of people to like a post for such a niche topic. Programming’s already a pretty small topic. Then you get into functional program. That’s a small topic in a small topic."
  },
  {
    "start": 1030,
    "end": 1031,
    "speaker": "Lex Fridman",
    "timestamp": "(02:42:17)",
    "text": "Yeah. I don’t get that much. If I post something about Emacs, I’ll get crickets if I post something about… If I proudly use Neovim, there’d be a lot of people like, good job."
  },
  {
    "start": 1032,
    "end": 1033,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:42:27)",
    "text": "Because it is the best editor."
  },
  {
    "start": 1034,
    "end": 1035,
    "speaker": "Lex Fridman",
    "timestamp": "(02:42:29)",
    "text": "Yeah, maybe it’s just hype."
  },
  {
    "start": 1036,
    "end": 1037,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:42:31)",
    "text": "Come back to the Civil War, Lex."
  },
  {
    "start": 1038,
    "end": 1039,
    "speaker": "Lex Fridman",
    "timestamp": "(02:42:33)",
    "text": "Yeah. Sometimes you have to sacrifice and go from the superior editor that is Emacs and choose Neovim just to be popular. You sacrifice integrity and values and quality for just popularity. It’s a choice you made."
  },
  {
    "start": 1040,
    "end": 1041,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:42:45)",
    "text": "Absolutely. I love how you put it."
  },
  {
    "start": 1042,
    "end": 1043,
    "speaker": "Lex Fridman",
    "timestamp": "(02:42:49)",
    "text": "Okay. Anyway, what were we talking about? I like how you’re doing this in bunches. That’s great."
  },
  {
    "start": 1044,
    "end": 1045,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:42:53)",
    "text": "Right now, my kind of side honeys that I’m exploring-"
  },
  {
    "start": 1046,
    "end": 1047,
    "speaker": "Lex Fridman",
    "timestamp": "(02:42:57)",
    "text": "Side honey?"
  },
  {
    "start": 1048,
    "end": 1050,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:42:57)",
    "text": "Yeah, side honeys. They’re not my mainstay. Right now Go’s kind of my favorite one to build a web app in. If I’m going to build some sort of backend with a lot of complicated logic, Go’s just so convenient. But I get really frustrated with its ability to express everything that I need. If you have a list, a heterogeneous list, a list that contains two types, Go’s just really not that fun to use. And I could see, so the ones I’m exploring is Jai or J, or the language as Jonathan Blow says, and Zig. And both of them have a lot of power to them. They’re both very interesting. They definitely have foot guns in them. They’re definitely more, they don’t take it easy on you. Zig seems like it’s a really amazing language, and so does Jai. They’re both very cool. Performance"
  },
  {
    "start": 1051,
    "end": 1052,
    "speaker": "Lex Fridman",
    "timestamp": "(02:43:42)",
    "text": "Yeah. Actually, I saw Dave Plummer’s testing of close to 100 languages for speed, and Zig came out on top."
  },
  {
    "start": 1053,
    "end": 1054,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:43:51)",
    "text": "That was a mistake. I mean, when I say mistake, nothing against Dave Plummer. He’s an extremely talented engineer. It’s just that Zig, C, C++, all those languages that were being tested, they’re all LLVM backends, right? That’s the one that actually turns the thing into the executable part. And if there’s a variation in speed, it just means in one language you didn’t quite express what you are supposed to correctly. There’s the language ball test that’s been bouncing around on Twitter. Zig was like sixth or seventh below I forget what language it is. I played around with the example, added the word “no alias” to the argument, which means that the piece of memory that’s coming into this function, there’s no global pointers, there’s nothing to it, and so the compiler can make these really cool optimizations. And I made it faster than the C version. So it just means that it’s just not correctly specified is all that means."
  },
  {
    "start": 1055,
    "end": 1056,
    "speaker": "Lex Fridman",
    "timestamp": "(02:44:40)",
    "text": "Yeah, but it’s still exciting. To me, the competition between Zig, Rust, and C++ is really interesting. Part of it’s for speed. Part of it’s how easy it is to write performant code."
  },
  {
    "start": 1057,
    "end": 1058,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:44:51)",
    "text": "I’ll say something. That’s the reason why I think Zig is so interesting comparatively to say C or Rust. C is the ultimate language. It can do anything, have pre-process or macros. You can do quite a bit with it, but it’s also really difficult."
  },
  {
    "start": 1059,
    "end": 1060,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:45:00)",
    "text": "So macros, you can do quite a bit with it, but it’s also really difficult and it’s also really simple and you can learn it. So it’s kind of its own unique beast. And when you get really good at C, C is a magical language and people are really great at it and people speak very highly of it. Rust is like this ultra safe language. What you can do in C, you just can’t even express in Rust. Rust is going to be the safe man that holds you at night, keeping you warm, right? It’s going to be just the greatest."
  },
  {
    "start": 1063,
    "end": 1064,
    "speaker": "Lex Fridman",
    "timestamp": "(02:46:12)",
    "text": "Wow, there’s beauty in everything, Prime."
  },
  {
    "start": 1065,
    "end": 1067,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:46:14)",
    "text": "Yeah. Rust"
  },
  {
    "start": 1068,
    "end": 1069,
    "speaker": "Lex Fridman",
    "timestamp": "(02:46:15)",
    "text": "You’ve programmed in Rust a lot. What do you love about Rust? What are the strengths? What are the weaknesses? Maybe you can speak about memory management that you already mentioned, the challenge of memory management that several of these languages address, but yeah, what do you love about Rust?"
  },
  {
    "start": 1070,
    "end": 1071,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:46:31)",
    "text": "What I love about Rust, I love the ability to free the memory that you’re using is directly tied to the stack. So whenever you create something, there’s a stack variable or there’s some amount of stack memory, whether it’s a pointer off to the heap, a pointer and a length. So some amount of memory on the stack and then some memory on the heap because a string is not all on the stack, it’s some on the heap, some on the stack. And when that stack variable goes out of scope and gets cleaned up, it also cleans up what’s on the heap. So it kind of simplifies this whole idea of, whoops, I forgot to free my memory. It just does it for you."
  },
  {
    "start": 1073,
    "end": 1074,
    "speaker": "Lex Fridman",
    "timestamp": "(02:47:57)",
    "text": "Unlike most programming languages, you have to explicitly state that this is going to be changed."
  },
  {
    "start": 1075,
    "end": 1076,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:47:57)",
    "text": "Yeah."
  },
  {
    "start": 1077,
    "end": 1078,
    "speaker": "Lex Fridman",
    "timestamp": "(02:48:03)",
    "text": "Yeah. That’s really interesting. I mean it’s safe, it’s trying to be, and the safety might be, create limitations. Let us consult the AI overlords. Rust is a blazing fast memory efficient systems programming language that emphasizes performance, type safety and concurrency. The language enforces memory safety without using a garbage collector, as you said, instead utilizing the unique, quote, “borrow checker” that tracks object lifetimes at compile time. This prevents common programming errors like null point or dereferencing and memory leaks and so on. Yeah."
  },
  {
    "start": 1080,
    "end": 1081,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:49:00)",
    "text": "Yeah, I would consider myself kind of a metaprogramming newbie. I have only solved some amount of problems with it. That’s kind of like what this year is for, is for me to really, I want to see where the ends can go in that. So I don’t have a strong opinion on this one. Zig, one thing I really like about Zig is that the metaprogramming is also the language itself. So you don’t have to, there’s not an alternative. So with Rust there’s an alternative. When you create a macro, you have to do the macro syntax. With Zig, it’s just, it is the thing, you just program it and you add the word comp time if you want it to be a compile time only."
  },
  {
    "start": 1083,
    "end": 1084,
    "speaker": "Lex Fridman",
    "timestamp": "(02:49:55)",
    "text": "You have been undecided, what language are you going for this year?"
  },
  {
    "start": 1085,
    "end": 1086,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:49:59)",
    "text": "I’m going to keep Go as my mainstay, my two side honeys, Jai and Zig. I’m going to explore and try to build out a service in them that can do a bunch of talking to, say, ChatGPT and ElevenLabs and send stuff down to client and work with web sockets. And I want to make sure that, I just want to see how do they perform in this realm. And I may be using the language incorrectly, like Jai, it’s not really been designed for the web world. I just got done writing the ability to read Twitch Chat and it required me to do Berkeley sockets."
  },
  {
    "start": 1089,
    "end": 1090,
    "speaker": "Lex Fridman",
    "timestamp": "(02:51:03)",
    "text": "What are some epic projects you’ve built on stream that jump to memory?"
  },
  {
    "start": 1091,
    "end": 1092,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:51:08)",
    "text": "My most favorite, sorry for interrupting you. So I’m really jazzed right now."
  },
  {
    "start": 1093,
    "end": 1094,
    "speaker": "Lex Fridman",
    "timestamp": "(02:51:13)",
    "text": "Let’s go."
  },
  {
    "start": 1095,
    "end": 1096,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:51:14)",
    "text": "Okay. So jazzed."
  },
  {
    "start": 1097,
    "end": 1098,
    "speaker": "Lex Fridman",
    "timestamp": "(02:51:15)",
    "text": "Jazz hands."
  },
  {
    "start": 1099,
    "end": 1100,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:51:17)",
    "text": "My most favorite project was the one I did last year. Someone built a Doom ASCII port. So you could play Doom with ASCII. So that means you could play it in your terminal. Very, very fun, very excite. So I made a Go program that could spawn out the Doom ASCII, then I took that Doom ASCII and I sent it to the browser so that people could play Doom ASCII in the browser, but then I made it so that Twitch chat could control that instance of Doom ASCII by piping in Twitch chat, taking the average of the movements over so much time and replaying it as if it was a controller. And I had Twitch chat beat level one by spamming it."
  },
  {
    "start": 1103,
    "end": 1104,
    "speaker": "Lex Fridman",
    "timestamp": "(02:53:00)",
    "text": "So you’re actually sending it to all the people in chat. So where’s that pipeline, how chat is able to control the Doom thing?"
  },
  {
    "start": 1105,
    "end": 1106,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:53:09)",
    "text": "Twitch chat. Yeah, so they would go, people would spam W and if you said W, it would hold down W for 150 milliseconds if the majority of people during that time period said W."
  },
  {
    "start": 1107,
    "end": 1108,
    "speaker": "Lex Fridman",
    "timestamp": "(02:53:21)",
    "text": "Nice. Okay. And how are they getting the input of where you are on screen?"
  },
  {
    "start": 1109,
    "end": 1110,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:53:26)",
    "text": "So originally I was going to send that through Twitch, but Twitch is like five seconds behind, so that’s why I piped it out to a website so everybody could see from my computer to the website and typical lag was right around 70 milliseconds. So it’s like they could mostly see what was happening in that short period of time. It was pretty exciting. So we had 1,000 people, or I had somewhere between 1,000 to 1,400 people smashing Ws and pressing F to fire and turning and we killed some zombies. We blew up the barrel at the very end of level one to kill the imp."
  },
  {
    "start": 1111,
    "end": 1112,
    "speaker": "Lex Fridman",
    "timestamp": "(02:53:57)",
    "text": "How are you getting the Ws from the Twitch chat? Is there an API?"
  },
  {
    "start": 1113,
    "end": 1114,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:54:03)",
    "text": "I was using IRC, so just a little TCP socket and then you just parse out IRC."
  },
  {
    "start": 1115,
    "end": 1116,
    "speaker": "Lex Fridman",
    "timestamp": "(02:54:06)",
    "text": "Okay. And there’s very little lag there. Okay."
  },
  {
    "start": 1117,
    "end": 1118,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:54:08)",
    "text": "Yeah, I think it’s a couple hundred milliseconds though. It’s enough that it actually made it a little bit difficult because people would often overturn and then go forward and miss the door and then they had to go back and…"
  },
  {
    "start": 1119,
    "end": 1120,
    "speaker": "Lex Fridman",
    "timestamp": "(02:54:19)",
    "text": "That’s awesome."
  },
  {
    "start": 1121,
    "end": 1122,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:54:20)",
    "text": "It was awesome. So that was my favorite I think project of all time just because I never got to do a lot of encoding. Encoding’s kind of like, what do you normally do? Okay, I need to send something down. I don’t know, gzip it, server will just do it. Server just does the right thing. I don’t need to think about it. So instead it’s like I think about it, I’m going to send the right thing."
  },
  {
    "start": 1123,
    "end": 1124,
    "speaker": "Lex Fridman",
    "timestamp": "(02:54:37)",
    "text": "Yeah, you have to think about the compression. Yeah. And there you go. That’s some more love towards FFmpeg because they have to think about that a lot."
  },
  {
    "start": 1125,
    "end": 1126,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:54:44)",
    "text": "Ultimately inspired by FFmpeg and their awesomeness."
  },
  {
    "start": 1127,
    "end": 1128,
    "speaker": "Lex Fridman",
    "timestamp": "(02:54:49)",
    "text": "So can you speak to just the chat community in general? A big part of what you do in terms of streaming is the humans that are communicating with you live. Can you talk to the different chat communities? First of all, which is the best chat community, YouTube, Twitch, or X?"
  },
  {
    "start": 1129,
    "end": 1130,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:55:11)",
    "text": "This is where I feel bad for YouTube, because I do think it’s technically the worst, but it’s not YouTube’s fault. And let me kind of explain why."
  },
  {
    "start": 1131,
    "end": 1132,
    "speaker": "Lex Fridman",
    "timestamp": "(02:55:19)",
    "text": "And then I will explain why you’re wrong. But go ahead. YouTube is great."
  },
  {
    "start": 1133,
    "end": 1134,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:55:22)",
    "text": "I know you love YouTube but let explain why, is that when you go on Twitch, you go to anyone’s channel, they have this cultural human centipede thing that’s happening where as the memes flow in, all of Twitch reacts and morphs to all those memes. So every channel you go to has this same culture. There’s a lot of similar emotes and everything, so it’s very tight-knit. So when I stream, I get all the same jokes that you would pretty much see if you saw, I don’t know, Sodapoppin or some big streamer, Asmongold, whoever, [inaudible 02:55:56] software streaming. All the same memes would all flow through the exact same kind of pipe. And so it’s a very holistic kind of community."
  },
  {
    "start": 1137,
    "end": 1138,
    "speaker": "Lex Fridman",
    "timestamp": "(02:57:02)",
    "text": "Yeah, you want to captain the meme train or you want to ride on the meme train."
  },
  {
    "start": 1139,
    "end": 1140,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:57:07)",
    "text": "Yeah. Or you just want to be able to create a culture on your chat because your chat’s going to be some variation of that kind of zeitgeist that’s flowing through Twitch. And it kind of is very contiguous between X and Twitch. It just feels really out of sync with YouTube. And then YouTube particularly does a bad job. And some people would argue a good job because you can swim. Swim being, you can actually change what timestamp you’re at. So all of a sudden you’ll be like, oh yeah, something about driving to soccer in my minivan. And then 20 minutes later you’ll be talking about Zig and then someone’s like, “I personally use whatever to drive to soccer.” And you’re like, “What are we talking about?” So YouTube is a very disjointed chat as well because it depends on where they’re at within the video. Swim comes from Netflix, by the way, call it swim."
  },
  {
    "start": 1141,
    "end": 1142,
    "speaker": "Lex Fridman",
    "timestamp": "(02:57:53)",
    "text": "The term?"
  },
  {
    "start": 1143,
    "end": 1144,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:57:56)",
    "text": "Yeah, people said swim."
  },
  {
    "start": 1145,
    "end": 1146,
    "speaker": "Lex Fridman",
    "timestamp": "(02:57:57)",
    "text": "Oh, so you’re, okay."
  },
  {
    "start": 1147,
    "end": 1148,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:57:59)",
    "text": "Swimming through-"
  },
  {
    "start": 1149,
    "end": 1150,
    "speaker": "Lex Fridman",
    "timestamp": "(02:58:00)",
    "text": "Yeah. So you’re not just making up the term. Thank you. Wow."
  },
  {
    "start": 1151,
    "end": 1152,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:58:02)",
    "text": "Yeah, but it’s probably made up and probably only 10 people said it at Netflix, so no one’s going to know it and they’re going to be like, “Yeah, right. That doesn’t happen on Netflix.”"
  },
  {
    "start": 1153,
    "end": 1154,
    "speaker": "Lex Fridman",
    "timestamp": "(02:58:11)",
    "text": "So going back to projects, what projects on stream or in general?"
  },
  {
    "start": 1155,
    "end": 1156,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:58:14)",
    "text": "No, you need to answer why YouTube chat’s the best chat."
  },
  {
    "start": 1157,
    "end": 1158,
    "speaker": "Lex Fridman",
    "timestamp": "(02:58:18)",
    "text": "Well you kind of convinced me. Okay, why YouTube is the best chat. Well, I think I’m just a hater. That’s basically what it boils down to and I’m just talking shit."
  },
  {
    "start": 1159,
    "end": 1160,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:58:18)",
    "text": "Love it."
  },
  {
    "start": 1161,
    "end": 1162,
    "speaker": "Lex Fridman",
    "timestamp": "(02:58:29)",
    "text": "And I’m probably just from the outside shooting in because Twitch is such a fun culture of memes. And so it’s just fun to shoot from the outside to egg the house of Twitch. And then I just sit back on my lawn chair with the small YouTube community just talking shit. No, you’re absolutely right. There’s a real sense of community that Twitch can form. But I just like the openness of YouTube. It’s just better at opening to the world. It’s more accessible, it’s easier to share. It’s just a more established platform, that’s all."
  },
  {
    "start": 1163,
    "end": 1164,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:59:08)",
    "text": "Fully on that team."
  },
  {
    "start": 1165,
    "end": 1166,
    "speaker": "Lex Fridman",
    "timestamp": "(02:59:14)",
    "text": "For the open world. I can send it to people that don’t usually watch video game streaming or that kind of stuff."
  },
  {
    "start": 1167,
    "end": 1168,
    "speaker": "ThePrimeagen",
    "timestamp": "(02:59:19)",
    "text": "Yeah. If you send a Twitch link, they’re like, “I don’t like video games.” And you’re like, “Well actually it’s not video games.” That talk happens every single time you mention Twitch because Twitch does have a perspective about it that YouTube does not."
  },
  {
    "start": 1169,
    "end": 1170,
    "speaker": "Lex Fridman",
    "timestamp": "(02:59:32)",
    "text": "I was just on Joe Rogan’s podcast and I think it came up, he asked something like, “Is Twitch still a thing?” So that just gives you an example. And then Jamie said, “Yeah, yeah, it’s definitely still a thing. It’s still growing and so on.” And so yeah, there’s just a big slice of humans that don’t participate in the Twitch Twitch sphere. Yeah, I just like talking shit so yeah."
  },
  {
    "start": 1171,
    "end": 1172,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:00:00)",
    "text": "That’s a beautiful answer."
  },
  {
    "start": 1173,
    "end": 1174,
    "speaker": "Lex Fridman",
    "timestamp": "(03:00:01)",
    "text": "But it’s cool that you sort of make it accessible on all these different platforms. And I have high hopes for X, but yeah, it’s feature-wise still has a lot of growing up to do."
  },
  {
    "start": 1175,
    "end": 1176,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:00:11)",
    "text": "And just why do people use X? You typically are going there for a text-based interaction you want to look through. So I also think they just have a user expectation change that needs to happen. And that just takes a while. That’s going to take a little bit before people get to it. I think their idea of audio first is a great first step where people can listen to it and have the phone away maybe. There’s a lot of changes that have to happen before X can be successful in that."
  },
  {
    "start": 1177,
    "end": 1178,
    "speaker": "Lex Fridman",
    "timestamp": "(03:00:37)",
    "text": "I mean, X has this incredible comment section just like Reddit, right? So it’s like-"
  },
  {
    "start": 1179,
    "end": 1180,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:00:43)",
    "text": "You said incredible. That’s not Reddit. Comment section, correct."
  },
  {
    "start": 1181,
    "end": 1182,
    "speaker": "Lex Fridman",
    "timestamp": "(03:00:46)",
    "text": "Comment, yeah. Incredibly dynamic and vibrant even if it’s… Yeah. What is the technological platform? How does the interface and the technology shape the discourse? It’s fascinating because X has a different style than Reddit, different style than Facebook, different style than Instagram. It’s interesting. And all those common sections are different technologically, like how the sorting is done, how easy it is to sort of build a community around it? Because YouTube is not really a community. Every single video on YouTube has its own mini community. You’re all talking on just that one video. But you can’t jump across."
  },
  {
    "start": 1183,
    "end": 1184,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:01:40)",
    "text": "There’s not like, “Hey Bill, hey George.” There’s no crosstalk that happens in multiple videos."
  },
  {
    "start": 1185,
    "end": 1186,
    "speaker": "Lex Fridman",
    "timestamp": "(03:01:44)",
    "text": "Yeah. But the community is awesome. I love community. I love the feeling of community and I guess that’s what Twitch really provides."
  },
  {
    "start": 1187,
    "end": 1188,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:01:52)",
    "text": "YouTube also does have it though. They have an aggregate community. There’s a lot of fun comments and all that on the videos and a lot of thumbs up and then you see the fun discourse that happens and it’s like that’s the community, it’s just only a certain slice sees it."
  },
  {
    "start": 1189,
    "end": 1190,
    "speaker": "Lex Fridman",
    "timestamp": "(03:02:06)",
    "text": "I think that’s even more so on YouTube for live-streaming. All the same folks show up and they talk shit, they celebrate, the meme train arrives."
  },
  {
    "start": 1191,
    "end": 1192,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:02:16)",
    "text": "Yeah."
  },
  {
    "start": 1193,
    "end": 1194,
    "speaker": "Lex Fridman",
    "timestamp": "(03:02:17)",
    "text": "Okay. So now, what projects shape you as a programmer? Whether the ones you streamed or offline."
  },
  {
    "start": 1195,
    "end": 1196,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:02:27)",
    "text": "For me, I don’t know if there’s a one project I can point to, but I can point to a specific spot where I think it happens and where I think you can learn a lot from. Any small program you write will be somewhere between 1,000 to 5,000 lines of code I consider a pretty dang small project. You can correlate this to any feature within a larger system as well. A specific feature on a website could be a thousand lines, a couple thousand lines."
  },
  {
    "start": 1201,
    "end": 1202,
    "speaker": "Lex Fridman",
    "timestamp": "(03:04:27)",
    "text": "So first of all, just enjoying the thing you create part, yeah. About there you can sit back and see all the parts dancing together. For me, also debugging, you get to see the choices you make materialize as how easy it is to debug. I’m a big proponent, I think you’ve mentioned this in the past, I put asserts everywhere."
  },
  {
    "start": 1203,
    "end": 1204,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:04:51)",
    "text": "No, you are the reason why I do that."
  },
  {
    "start": 1205,
    "end": 1206,
    "speaker": "Lex Fridman",
    "timestamp": "(03:04:53)",
    "text": "Yeah."
  },
  {
    "start": 1207,
    "end": 1208,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:04:54)",
    "text": "You were like the first one. Keep on going, sorry."
  },
  {
    "start": 1209,
    "end": 1210,
    "speaker": "Lex Fridman",
    "timestamp": "(03:04:56)",
    "text": "Really? Okay. So for me, one of the joys, whether it’s try catch box, whether it’s assert, whether it’s with the testing, I get to see the payoff of all the minefield of asserts I’ve laid out before me in my kingdom by how quickly I can debug a system as it grows larger. And I can first of all discover errors before they become real bugs and also how quickly I can solve those errors. And that brings me joy. For me, a lot of the joys of programming is creating powerful systems that don’t break down, that work correctly, that work correctly in majority of the cases. And there, sort of the stress testing the system and getting all of the signals from that system that everything is working correctly is something that fills me with joy and makes sure that the system actually works. So yeah, that, I don’t know if it’s 5, 10,000 lines of code, if it’s Java or C++ it’s millions lines of code. But yeah, in Python, yeah, I would say 10,000 lines of code. That’s when you first get to see the magic. But anyway, you were saying?"
  },
  {
    "start": 1211,
    "end": 1212,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:06:11)",
    "text": "Okay, so you and John Carmack had a conversation about asserts."
  },
  {
    "start": 1213,
    "end": 1214,
    "speaker": "Lex Fridman",
    "timestamp": "(03:06:14)",
    "text": "Yes."
  },
  {
    "start": 1215,
    "end": 1216,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:06:14)",
    "text": "You talked about this idea of putting asserts everywhere that effectively crash the program when you have some state in your program that should not be represented and you have made this choice actively. And so I’ve never done that before. And I know this is like an old technique and I obviously must be too young or too dumb to know that this was a thing people did. I grew up in Java and I think that’s probably why I didn’t run into this."
  },
  {
    "start": 1221,
    "end": 1222,
    "speaker": "Lex Fridman",
    "timestamp": "(03:08:33)",
    "text": "Yeah, I think it’s a skillset you grow over time. It’s not just that you have to specify the preconditions, everything that has to be true, it’s also adding things that are like, you might not even think about. You have to sort of anticipate really weird things. And if you add asserts, especially in complicated functions or in complicated classes that are able to catch really weird things, that’s going to save you so many headaches and it’s going to help you learn about your own code."
  },
  {
    "start": 1227,
    "end": 1228,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:11:50)",
    "text": "Yeah. When your system gets sufficiently large, some of these bugs are just, they are very difficult. Bless anyone’s soul that’s working on million line code bases, because it does. I can’t tell you how many times I’ve spent multiple days just trying to figure out the root cause of the bug. Not even the fix. Just like why does this happen? And that’s hard."
  },
  {
    "start": 1230,
    "end": 1231,
    "speaker": "Lex Fridman",
    "timestamp": "(03:12:42)",
    "text": "Yeah. And especially if it’s in production, it’s like, well a user’s going to see this crash. It’s like, yeah, well you should minimize the number of times any user ever sees the crash, not by having a nice blue screen or whatever the fuck, but actually stopping everything. And that’s going to create an incentive for you to never have that happen. You’re actually going to put in the time to make sure it never happens."
  },
  {
    "start": 1232,
    "end": 1234,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:13:09)",
    "text": "And the nice part is with the web and all that, you can always pop up something and say, “Hey, things have gone very, very wrong or unable to recover.” You can give them a nice message and then log it off so you can see it, and then measure how often are you doing it. I understand that there’s a bit of interestingness to a web project like do you want to always crash a server? There’s a bit of a gamble if you release a bad version and you crash all your servers constantly. That’s a pain you’re going to have to accept. ADHD"
  },
  {
    "start": 1235,
    "end": 1236,
    "speaker": "Lex Fridman",
    "timestamp": "(03:13:36)",
    "text": "I think this is more applicable for single systems like robots and so on. You have struggled with ADHD. I think a lot of people are really inspired by the fact that you’re able to be productive and flourish while having ADHD. How’d you overcome it?"
  },
  {
    "start": 1237,
    "end": 1238,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:13:57)",
    "text": "Well, there’s a lot of things that ADHD affects and so I’ll start with some of the easiest things, because there’s directly applicable, then these kind of collateral damage applicable things that happen. So one thing that has really helped me with ADHD is maturity. I think that’s just a thing that everyone needs more of. Meaning that I found myself getting so wiggly and so out of control when I would try to sit down and read, and I just couldn’t handle it. I just felt like I’d read a page and didn’t read anything. The part of me that just went, “Oh man, gosh, I just can’t even do this.” I had to just simply quit listening to it and said, “Nope, I’m rereading this page.” I remember reading some pages in college like 18 times in a row, just like I’m going to force myself to just do this the correct way."
  },
  {
    "start": 1243,
    "end": 1244,
    "speaker": "Lex Fridman",
    "timestamp": "(03:16:50)",
    "text": "You said a lot of interesting things. So on the reading and for me it’s also audiobook side, I do the same thing and I’ve gotten much better at it, which is I tune out mentally and I read a page and you don’t understand anything on the page. You didn’t actually read it. And yeah, I forced myself to just reread it or re-listen to an audiobook, which is a much more common problem for me now, and forcing myself to really pay attention. Because I listen to audiobooks often when I run and it’s so easy to just tune out."
  },
  {
    "start": 1246,
    "end": 1247,
    "speaker": "Lex Fridman",
    "timestamp": "(03:18:00)",
    "text": "Yeah, there’s people, they’re like doing stuff, there’s nature, it doesn’t matter. You’re listening to every single word and loading it in and trying to stay focused, even there’s just so many distractions all around you. Yeah."
  },
  {
    "start": 1248,
    "end": 1249,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:18:10)",
    "text": "It’s definitely a learned skill and it takes a lot of time. And when I say, “Oh, I was able to do from here to here,” I’m speaking over the course of like five years of doing this every day. It’s not some small… There’s no… The nice part about that decision though is you can make that decision today. You can make it right now. You’re going to be like, “From here on out, I’ll never make that mistake again. I will say I’m going to read 50 pages, I will sit down and read 50 pages, and when I get distracted I’ll go back to the last place I remember and I’ll start again.” And like that’s a decision you can make. That’s a mature, non-emotional decision to make. And you can do that, it just may be really painful for the first couple years of making said decisions. And then it gets easier and then it gets easier, and then it becomes more natural to change yourself."
  },
  {
    "start": 1250,
    "end": 1251,
    "speaker": "Lex Fridman",
    "timestamp": "(03:18:53)",
    "text": "Yeah. And with every medium, with every platform, I think it’s like a new skill. For me, like using social media has been that, just like I end up like doom scrolling too easily on platforms. And one solution is not to look at all, which is kind of what I lean on mostly these days, but I feel like I should be able to check, just read, okay, feel a thing, learn a thing, and then put it down, versus you have this glazed look over your eye and you’re not really paying attention anymore and you’re dead inside and you feel horrible afterwards. I don’t understand."
  },
  {
    "start": 1252,
    "end": 1253,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:19:33)",
    "text": "The horrible afterwards is real serious. I’ve definitely… I can 100% notice that I am a more anxious person the more time I spend scrolling."
  },
  {
    "start": 1254,
    "end": 1255,
    "speaker": "Lex Fridman",
    "timestamp": "(03:19:41)",
    "text": "Yeah, yeah."
  },
  {
    "start": 1256,
    "end": 1257,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:19:42)",
    "text": "I can just feel it. It’s like something inside of me that’s kind of… I don’t know how to say it other than it like wants to get out but I don’t really know what that is. It’s not anger, but it’s not… It’s very anxious."
  },
  {
    "start": 1258,
    "end": 1259,
    "speaker": "Lex Fridman",
    "timestamp": "(03:19:52)",
    "text": "It’s like the opposite of the feeling I have when I wake up in the morning and I’m feeling good, and I look out in nature and look at the sun and just, and there’s like a bird chirping and this kind of thing. Scrolling through social media, even if it’s like super positive stuff or whatever, it’s still not the same feeling as the bird chirping. Bird chirping on Instagram is a different bird chirping than in real life, cause bird chirping on Instagram, I’ll start swiping until there’s demons of different types fighting inside my head and then different anxiety, insecurity, whatever the hell. Just the mixture of chaos versus the bird chirping in real life. That is beautiful. But again, that’s the same thing as with the audiobook. It boils down to… Man, these people that talk about meditation, I think that’s probably… they’re onto something, because that’s what it is be able to like focus calmly and deliberately on a thing, whether it’s reading or audiobook or existence. When they sort of observe the breath, you’re able to silent out everything else and remove everything else from focus. Yeah. That’s a skill. That’s a skill."
  },
  {
    "start": 1260,
    "end": 1262,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:21:05)",
    "text": "I heard it put really beautifully, which is that we in America really have misunderstood liberty because we typically have liberty as just the freedom to do whatever you want. And the argument was that it’s not the freedom to do whatever you want, it’s the freedom to be able to do what you will. And how often is what you actually want to do, you don’t do because you get trapped doing something that you’ve convinced yourself in this quick moment you want to do? And so it’s like, “I want liberty. I want the ability to control my energy and to be able to do the thing I want to do, not to get distracted and destroyed in all the millions of distractions.” And some of us get handed a worse deck of cards, some of us get a better deck of cards, but I don’t think there’s anybody that doesn’t struggle with it in the technological age. Productivity"
  },
  {
    "start": 1263,
    "end": 1264,
    "speaker": "Lex Fridman",
    "timestamp": "(03:21:48)",
    "text": "Yeah, and that’s the skill. What can you say to the skill of achieving focus in programming? Do you have a process of how you sit down and try to sort of approach a problem? So, all the different, not just distractions but the challenges of starting a project, of thinking through the design, how to maintain real focus, because it’s really difficult intellectual endeavor."
  },
  {
    "start": 1265,
    "end": 1266,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:22:15)",
    "text": "At this point I’m lucky, but when I first started I can remember that every last part of programming. I had to go look up, I had to go read, I had side quests at all time. Every step was a side quest. Why is my screen blinking when I’m trying to render this thing out? Oh, I didn’t know about double buffering. Why is this happening? How do I even write to the screen? How do I… Everything was a question. I had more questions than answers. And so I constantly had the problem of side quests, and I find that to be a very exhausting thing. But as I learned my instrument very, very well, I don’t have as many side quests. I become more and more able to just focus on the thing I want to do. And I find that to be something that is just super, super useful. So, when I say I’m kind of lucky, meaning that I’ve spent so much of my life preparing for this moment that now when I have the opportunity to do something, I can just do that thing and I don’t…"
  },
  {
    "start": 1269,
    "end": 1270,
    "speaker": "Lex Fridman",
    "timestamp": "(03:24:15)",
    "text": "I’m sure there’s still like things that pull at you, like curiosities, distractions, like, “Ooh, I wonder how…” Anytime you have access to the internet, you’re going to get-"
  },
  {
    "start": 1271,
    "end": 1272,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:24:26)",
    "text": "Twitter’s a big one on that one. Yeah."
  },
  {
    "start": 1273,
    "end": 1274,
    "speaker": "Lex Fridman",
    "timestamp": "(03:24:28)",
    "text": "… you’re going to get curious about stuff, including, I guess you’re speaking about everything in the editors optimize, but, okay, you can always improve stuff. You can always find better plugins and macros and, “Oh, let me… You know what, this thing that took this pain point, I just found this tiny pain point, let me spend the next five days creating a plugin for my editor or whatever the fuck to remove that one pain point,” when you should have just kept going as opposed to taking side quests."
  },
  {
    "start": 1275,
    "end": 1276,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:24:59)",
    "text": "So, I have a rule which is I do not edit my RC other than some kind of cataclysmic thing, like someone updates a plugin, I didn’t know they updated it and now there’s like a hard error in my editor and I have to move forward. But I have a rule where I will edit my RC, my Neovim RC or anything once a year. Something that bothers me, I’ll write it down, I’ll remember it. I’ll be like, “Okay, I want to change that,” but I will just not go back to it. Now, every now and then I’ll break that rule if I know, if like, “Oh, I want a new remap to be able to do this one command and that takes literally 13 seconds, like copy paste, do this, bop-bop-bop, done. Okay, I have this new remap, it made perfect sense in this situation, but I don’t go plug-in exploring. I don’t try to solve every problem."
  },
  {
    "start": 1279,
    "end": 1280,
    "speaker": "Lex Fridman",
    "timestamp": "(03:26:13)",
    "text": "All right, zero to 60, let’s talk about the perfect setup. What’s your perfect programming setup, keyboard operating system, how many screens, chair?"
  },
  {
    "start": 1281,
    "end": 1282,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:26:24)",
    "text": "All right, I like all these."
  },
  {
    "start": 1283,
    "end": 1284,
    "speaker": "Lex Fridman",
    "timestamp": "(03:26:27)",
    "text": "IDE, let’s go."
  },
  {
    "start": 1285,
    "end": 1286,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:26:29)",
    "text": "So, keyboard, you’re using my favorite keyboard right there, the Kinesis Advantage. Saved my career. Beautiful keyboard. Concavity and thumb clusters are just so important because if you really think about it, especially if you’re using qwerty, when you’re pressing the symbols on a standard keyboard, you’re just doing this the whole time: backspace, enter, symbols. You’re just doing this, and it just screws up your wrist constantly doing this. And this when you’re constantly doing like ctrl and shift. And it just is like messing you up, so it’s just like right here. That’s so much nicer in life. So, keyboard most important, I’d say. Get that one done."
  },
  {
    "start": 1287,
    "end": 1288,
    "speaker": "Lex Fridman",
    "timestamp": "(03:27:01)",
    "text": "For people who don’t know, Kinesis keyboard, I think the thing that you experience the most is exactly the thing you just said now, which is the backspace is really easy to press versus what it is on normal keyboards. So, backspace in general symbolizes you’re deleting a thing, it symbolizes a mistake. Not symbolizes, it usually means a mistake. And so not only did you just make a mistake in what you were typing, you also have to take a physically painful action, annoying action to fix that mistake. And for most of us, we make a lot of mistakes, so Kinesis just makes it pleasant and fast and easy physically to correct the mistake. That’s probably for me the number one reason of Kinesis. Everything else, yeah, super plus with the macros and the positioning, the concavity like you mentioned, but their mistakes are pleasant."
  },
  {
    "start": 1289,
    "end": 1290,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:27:57)",
    "text": "Yeah. I am on that team, so that’s why I love that. I would say that’s one of the most important things. The next thing that I find to be very, very important is that one monitor. I’m a one monitor kind of guy."
  },
  {
    "start": 1291,
    "end": 1292,
    "speaker": "Lex Fridman",
    "timestamp": "(03:28:09)",
    "text": "What? Really?"
  },
  {
    "start": 1293,
    "end": 1294,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:28:10)",
    "text": "So, when I program, when I do anything… Now, when I stream, I obviously have a second computer that runs the stream because I sometimes crash my computer, I have to restart or whatever. So, I do have a second screen there that I put stuff up, but most of the time you’ll notice that even when I’m streaming, you’ve been there, I have to physically switch to the streaming chat channel for me to read it, and that’s because I’m operating off of one screen. And so I have this whole style in which I like to navigate, inspired by StarCraft, is that I believe in the press one key, go where you want to be mentality. And so everything about my setup is press one key. So, when I want to go to Twitch chat, alt-two, Twitch chat. When I want to go to my browser, alt-one. That’s my browser. Alt-three, that’s where I go to my programming. That’s power finger, obviously. The big middle finger right there, just smash it down. Alt-six is going to be gimp, so my GNU image manipulation program, so if I want to draw, I go there."
  },
  {
    "start": 1297,
    "end": 1298,
    "speaker": "Lex Fridman",
    "timestamp": "(03:30:06)",
    "text": "Via keyboard."
  },
  {
    "start": 1299,
    "end": 1300,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:30:07)",
    "text": "Via keyboard. Then in Vim I developed a plugin called Harpoon, which is I press one button and I can pin one of the files to like a temporary buffer. I think Projectile is potentially close to this in Emacs. I can’t remember if Projectile… I think Projectile is closer to my sessionizing script. Anyways, so now I have four pinned files in which I can go to any of those pinned files with just a single keystroke. And so now it’s just like… Because every time you develop a feature, usually you have like three files you’re kind of primarily working in. And I can fuzzy find for the other files and that’s that, but usually I just have like these three power files that I’m always swapping in between. And so it’s like now everything is just, “I want go to the browser.” That’s one press. “I want to go to my workstation.” That’s one press. “I want to go to a specific folder, I need to change folders.”"
  },
  {
    "start": 1302,
    "end": 1303,
    "speaker": "Lex Fridman",
    "timestamp": "(03:31:28)",
    "text": "You’re making me think a lot whether I can live with your system, whether it’s better because it feels better."
  },
  {
    "start": 1304,
    "end": 1305,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:31:33)",
    "text": "It at least intellectually feels better. It may not be great for some people."
  },
  {
    "start": 1306,
    "end": 1307,
    "speaker": "Lex Fridman",
    "timestamp": "(03:31:36)",
    "text": "Well, there’s a few profound things you said, which is like really what the number of windows or tasks you’re switching between, whether it’s programming, the number of files you’re working on, it’s small at any one time, at any one space of 20 minutes or something like that. So, okay, that’s a profound truth. Sometimes we think like, “Oh I need the full freedom to search,” but you don’t. You usually work on a very small slice. But I guess the trade-off there… I always have three monitors, not when I’m traveling, but my happy place is three monitors. It’s like, do you really need all of them to be present there? So, you’re turning your head. Now, the monitors I have is two vertical ones, which is just better for certain kinds of content. They’re positioned vertically, so you can read. You can use your eyes to scan quickly."
  },
  {
    "start": 1308,
    "end": 1309,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:32:29)",
    "text": "Interesting. So, I don’t even do that. I even have it so zoomed in that I probably only have like maybe 25 lines of code at any one time on my 27-inch monitor."
  },
  {
    "start": 1310,
    "end": 1311,
    "speaker": "Lex Fridman",
    "timestamp": "(03:32:37)",
    "text": "Yeah, I think that’s… I think I feel fundamentally constrained when I can’t see more because your eyes are just good at jumping. You could-"
  },
  {
    "start": 1312,
    "end": 1313,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:32:52)",
    "text": "Why not search? Why not press a couple of keystrokes? Ctrl-U, ctrl-D, jump up and down by a half page."
  },
  {
    "start": 1314,
    "end": 1315,
    "speaker": "Lex Fridman",
    "timestamp": "(03:32:58)",
    "text": "Because the ape visual system was designed to… You’re loading a lot of information. If every time you have to investigate this table, what’s on this table, you have to press a keystroke, you could develop the skillset that integrates that information but it’s really… There is an effective thing where if you have a sheet of paper like this and I’m looking at it, my eyes will be able to load in the structure of the information, the topics of the information. You just can do it faster, I think. There’s a big cost because it’s an extra monitor, but there is some stuff that’s vertical when vertically positioned. See, code is an iffy one code because code, 25 lines at a time, I think you can do a lot."
  },
  {
    "start": 1317,
    "end": 1318,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:34:54)",
    "text": "Even the text one, the reading one, fundamentally I think I agree with you, that you can see a lot more and you can kind of look up and down, and see those two things. And probably in articles or things like that, if there’s a graph down here that’s really big that take up your whole screen plus text, I could see why that would be very beneficial to zoom out, to be able to have all that information, but for me, I can only look at like a square inch. Really, that’s all my eyes can actually focus on. So, when I’m reading, I’m right here. Then I have to structurally try to pattern match what I think the information looks like. Then I have to start reading it."
  },
  {
    "start": 1320,
    "end": 1321,
    "speaker": "Lex Fridman",
    "timestamp": "(03:35:46)",
    "text": "But you have to kind of train your brain to know that you can navigate spatially using keys."
  },
  {
    "start": 1322,
    "end": 1323,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:35:53)",
    "text": "Yeah, Neovim by the way."
  },
  {
    "start": 1324,
    "end": 1325,
    "speaker": "Lex Fridman",
    "timestamp": "(03:35:56)",
    "text": "Oh, maybe it has everything to do with Neovim. Okay."
  },
  {
    "start": 1326,
    "end": 1327,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:35:58)",
    "text": "All right. And then Neovim is obviously the next big one. I love Neovim. Reason being is that I think you can make all the arguments that you want about which editor is the best. I do not think you can make an argument that Vim motions aren’t superior."
  },
  {
    "start": 1328,
    "end": 1329,
    "speaker": "Lex Fridman",
    "timestamp": "(03:36:10)",
    "text": "Here we go. Can you explain Vim motions? What is this? So, Neovim… Vim is an old school editor. Neovim-"
  },
  {
    "start": 1330,
    "end": 1331,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:36:17)",
    "text": "It’s a modern take on an old school editor."
  },
  {
    "start": 1332,
    "end": 1333,
    "speaker": "Lex Fridman",
    "timestamp": "(03:36:19)",
    "text": "Yeah. And what’s ELI5? What does it take to work with Neovim?"
  },
  {
    "start": 1334,
    "end": 1335,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:36:29)",
    "text": "Oh, okay. I thought you were talking about a Vim motion there. That’s how… I know, but you know that meme that’s just like, “Hey, Jarvis, can I tell you about Vim motions?” Because they can’t fit anything else in their head because they only have Vim motions. You said EL5, explain it like I’m five, but in my head it’s like, “Okay, E is jump to the end of the word, L is the one more…” Dude, I’m so broken that I’m like, “Okay, Vim motion,” when I hear letters. Yeah, so, you can think of it like this is that Vim has a language to describe movements in text because its primary mode of operation is manipulating or editing text. So, it is a well-thought through set of movements, deleting, yanking, pasting, copying, all that kind of stuff that goes in, motions that are optimized for working with pretty much code."
  },
  {
    "start": 1339,
    "end": 1340,
    "speaker": "Lex Fridman",
    "timestamp": "(03:39:14)",
    "text": "Oh, so, this is not just about writing text, this is about modifying text. It’s primarily about modifying text."
  },
  {
    "start": 1341,
    "end": 1342,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:39:19)",
    "text": "Yes."
  },
  {
    "start": 1343,
    "end": 1344,
    "speaker": "Lex Fridman",
    "timestamp": "(03:39:19)",
    "text": "And I’m sure that most editors including Emacs, including VS Code can do all those same things, but there is something… They just don’t encourage you to discover those things. That’s like an important thing about a lot of technologies and programming languages that a lot of them can do a lot of the stuff, but it’s something about whether it’s the community or the style of the language or anything like this that encourages you to not be lazy in the beginning and learn the fast way to edit text, in this particular example, how to use the keyboard. That’s a fascinating just reality of how technology is used. You want to be encouraged to find the fast thing as quickly as possible so that long term it’s efficient and fun to use the thing."
  },
  {
    "start": 1345,
    "end": 1346,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:40:09)",
    "text": "Yeah. It takes a long time for dividends, like a long time, but on top of that, notice I didn’t say Vim. I’m not saying, “Go use Vim,” I’m saying, “Vim motions.” Let me give you one more example. I’m a big fan. Let’s say you have a line that contains some variable, some function you’re calling something that takes in a string. And you need to do that again, so you would typically copy that line, you’d paste that line below, you’d go into the string and you’d change the string. Let’s say it’s calling some sort of configuration, you need to call it three times with three different configuring strings. In Vim, I like to do shift-V to highlight the whole line, and then Y. Some people do YY, but I don’t like to do double ones. I like to be able to do two different fingers because you can do that way faster than one finger twice."
  },
  {
    "start": 1348,
    "end": 1349,
    "speaker": "Lex Fridman",
    "timestamp": "(03:41:23)",
    "text": "To backtrack, really dumb question, CI, what’s the difference between typing the letters and using the letters to navigate and edit? How do you switch between the two modes?"
  },
  {
    "start": 1350,
    "end": 1351,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:41:34)",
    "text": "Okay, so insert mode means that you’re just putting in text, and then normal mode means that you’re moving your cursor."
  },
  {
    "start": 1352,
    "end": 1353,
    "speaker": "Lex Fridman",
    "timestamp": "(03:41:40)",
    "text": "And how do you switch between the two?"
  },
  {
    "start": 1354,
    "end": 1355,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:41:42)",
    "text": "Escape. Escape goes from insert mode into normal mode. And to go into insert mode press I to take your current cursor and go to the beginning, A to go to the end of the year Cursor, capital A to go to the end of the line, capital I to go to the beginning of line, O to put a new line below and then put your cursor at the proper intended for the language, shift-O to shift your current line down, and then put a new line in. You can see, there’s a lot-"
  },
  {
    "start": 1356,
    "end": 1357,
    "speaker": "Lex Fridman",
    "timestamp": "(03:42:04)",
    "text": "So, you’re pressing escape a lot."
  },
  {
    "start": 1358,
    "end": 1359,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:42:05)",
    "text": "Yeah, I mapped mine. I do ctrl-C. Ctrl-C does the same thing except for in one edge case. People hate that. I got used to it just due to the fact that I was using IntelliJ, and I really hate pressing the escape key, so I just got used to pressing escapee."
  },
  {
    "start": 1360,
    "end": 1361,
    "speaker": "Lex Fridman",
    "timestamp": "(03:42:17)",
    "text": "That seems like an essential thing to do if you’re using Neovim to map escape to something."
  },
  {
    "start": 1362,
    "end": 1363,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:42:22)",
    "text": "Cap lock would be your standard go-to."
  },
  {
    "start": 1364,
    "end": 1365,
    "speaker": "Lex Fridman",
    "timestamp": "(03:42:24)",
    "text": "Oh yeah, I map it too. Cool. I got you. I got you."
  },
  {
    "start": 1366,
    "end": 1367,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:42:27)",
    "text": "Yeah, so then it’s just really easy to press it, and boom, boom, boom, not a big deal at all. But yeah, I think that if you’re willing to learn it, the emotions are superior, but if you’re not willing to learn it, then they’re not superior. You should just not do it. If you’re willing to endure pain, it’s good. If you’re not, it’s actually way worse. It’s 100 worse."
  },
  {
    "start": 1368,
    "end": 1369,
    "speaker": "Lex Fridman",
    "timestamp": "(03:42:45)",
    "text": "Right, so if you like pain, you use Neovim. Totally. I understand."
  },
  {
    "start": 1370,
    "end": 1371,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:42:45)",
    "text": "Yeah, you’re totally on-board."
  },
  {
    "start": 1372,
    "end": 1373,
    "speaker": "Lex Fridman",
    "timestamp": "(03:42:45)",
    "text": "100%."
  },
  {
    "start": 1374,
    "end": 1375,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:42:45)",
    "text": "See, now you get it."
  },
  {
    "start": 1376,
    "end": 1377,
    "speaker": "Lex Fridman",
    "timestamp": "(03:42:51)",
    "text": "If you like joy, you use Emacs."
  },
  {
    "start": 1378,
    "end": 1379,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:42:53)",
    "text": "Sorry, sorry, did Emacs ever get a good text editor? I know they’re a great operating system, but I never caught up if they got a good text editor."
  },
  {
    "start": 1380,
    "end": 1381,
    "speaker": "Lex Fridman",
    "timestamp": "(03:43:00)",
    "text": "Operating system? I think you’ve been miseducated my friend. So, at least 30 minutes on Emacs versus Neovim is what Reddit requested. Have you actually used Emacs in order to be able to talk so much shit or no?"
  },
  {
    "start": 1382,
    "end": 1383,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:43:13)",
    "text": "I used it for a year."
  },
  {
    "start": 1384,
    "end": 1385,
    "speaker": "Lex Fridman",
    "timestamp": "(03:43:16)",
    "text": "You used it for a year?"
  },
  {
    "start": 1386,
    "end": 1387,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:43:16)",
    "text": "Yeah, yeah. Doom Emacs, Spacemacs and regular Emacs."
  },
  {
    "start": 1388,
    "end": 1389,
    "speaker": "Lex Fridman",
    "timestamp": "(03:43:19)",
    "text": "But you don’t even know Lisp, so did you really use it?"
  },
  {
    "start": 1390,
    "end": 1391,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:43:21)",
    "text": "I kind of hacked my way through kind of like, “Okay, so this is how to configure…” You can kind of get your way through and do all that."
  },
  {
    "start": 1392,
    "end": 1393,
    "speaker": "Lex Fridman",
    "timestamp": "(03:43:28)",
    "text": "So, you recommend to mastering Neovim and really learn the depths of it, but Emacs is okay to just kind of use before making a judgment. I think everybody…"
  },
  {
    "start": 1394,
    "end": 1395,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:43:38)",
    "text": "You got me on that one?"
  },
  {
    "start": 1396,
    "end": 1397,
    "speaker": "Lex Fridman",
    "timestamp": "(03:43:39)",
    "text": "Yeah, no, and what’s Neovim written? It’s Lua?"
  },
  {
    "start": 1398,
    "end": 1399,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:43:43)",
    "text": "Yeah, so Lua would be the configuration language, but you have… It’s written in C, but you have Lua 4. And Lua is just a dead simple language. Anyone can program Lua."
  },
  {
    "start": 1400,
    "end": 1401,
    "speaker": "Lex Fridman",
    "timestamp": "(03:43:51)",
    "text": "I actually don’t know why… I think it’s because my love for Lisp that I went with Emacs. I think you just choose a path and you walk down that path. And because there’s just such a vibrant, intense battle between the two communities, you just start fighting just because everybody else is fighting. And then one day you’re an old warrior on a horse, and you’re wondering, “What was this all for?” And it’s quite sad, in all seriousness, that I haven’t to this day tried Neovim. I think because there is a learning curve. There’s a learning curve to a lot of these editors."
  },
  {
    "start": 1402,
    "end": 1403,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:44:32)",
    "text": "Yeah. To really learn it."
  },
  {
    "start": 1404,
    "end": 1405,
    "speaker": "Lex Fridman",
    "timestamp": "(03:44:34)",
    "text": "To really learn it. And I think this is some of the criticism of maybe VS Code or Sublime or Atom that it’s so easy to not learn it, to just kind of halfass use it. And there is a big benefit to having editors that force you to have some learning curve, where you take the art, the science, the procedure of editing seriously. Because you spend so much time in it, you might as well learn how to use the thing."
  },
  {
    "start": 1406,
    "end": 1407,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:45:05)",
    "text": "My big takeaway really, what I’m trying to say with all these words is that I honestly don’t actually think that… The editor obviously does not make the programmer, but I think it says a lot about your character as a programmer if you don’t know how to use your editor well. There’s something about a person who’s willing to commit their life to programming, and spending literally 50,000 hours doing an activity over the course of their lifetime, and never take the time to learn their editor through and through. It just seems strange."
  },
  {
    "start": 1409,
    "end": 1410,
    "speaker": "Lex Fridman",
    "timestamp": "(03:46:04)",
    "text": "Especially for tools you use a lot."
  },
  {
    "start": 1411,
    "end": 1412,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:46:07)",
    "text": "[inaudible 03:46:07]."
  },
  {
    "start": 1413,
    "end": 1414,
    "speaker": "Lex Fridman",
    "timestamp": "(03:46:06)",
    "text": "You have to look at your whole life, your life, whatever, if you’re a developer or anything, what is the thing you do a lot?"
  },
  {
    "start": 1415,
    "end": 1416,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:46:16)",
    "text": "Meetings."
  },
  {
    "start": 1417,
    "end": 1418,
    "speaker": "Lex Fridman",
    "timestamp": "(03:46:17)",
    "text": "Yeah, yeah."
  },
  {
    "start": 1419,
    "end": 1420,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:46:20)",
    "text": "Sorry. Keep going."
  },
  {
    "start": 1421,
    "end": 1422,
    "speaker": "Lex Fridman",
    "timestamp": "(03:46:21)",
    "text": "Ask a question like: how can this be done a lot better? Because every single day you do this for hours a day, how many hours did you spend on thinking how to do this better or whether to do it at all, in the case of meetings? People surprisingly just don’t do this enough. I see this, just to go back to jujitsu, there’s a lot of people that show up and do jujitsu or martial arts, and they do it the same way over and over and over, and they invest tremendous amount of energy. And they don’t ask like, “How do I do it differently to improve faster?” In the case of jujitsu or any kind of sport, same with practicing the piano or the guitar, they just religiously put in a lot of time and derive a lot of joy from getting better. They don’t enough ask the meta question of like, “How can I do this better?” And with editors, it’s surprisingly how often people do just that."
  },
  {
    "start": 1426,
    "end": 1427,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:50:30)",
    "text": "I would 100% agree that Cursor seems like such a cool product. I actually think there’s a lot of really neat things coming down with all of that. And I could change from Neovim. I don’t use Neovim because I love Neovim, I use Neovim because I love the instrument I play. And so it’s like if Cursor can meet those needs, I could see myself moving over. I don’t have some sort of obsessed attachment with it. I am curious though that every time I use AI… I think I just have skill issues. I think I’m just so riddled with skill issues when it comes to using AI, I have yet-"
  },
  {
    "start": 1428,
    "end": 1429,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:51:00)",
    "text": "I think I’m just so riddled with skill issues when it comes to using AI, I have yet to be able to use it in a way that I really love it."
  },
  {
    "start": 1430,
    "end": 1431,
    "speaker": "Lex Fridman",
    "timestamp": "(03:51:06)",
    "text": "We’ll talk about it, but before then-"
  },
  {
    "start": 1432,
    "end": 1433,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:51:08)",
    "text": "Oh, ball to sit on. I forgot to say that, ball to sit on. Desk needs to be properly heighted. One monitor. Eyes should be two-thirds way up the screen. I don’t like to turn my head. I prefer my hands in a pistol neutral position. And there we go."
  },
  {
    "start": 1434,
    "end": 1435,
    "speaker": "Lex Fridman",
    "timestamp": "(03:51:25)",
    "text": "A ball to sit on. Yoga ball."
  },
  {
    "start": 1436,
    "end": 1437,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:51:26)",
    "text": "Yoga ball."
  },
  {
    "start": 1438,
    "end": 1439,
    "speaker": "Lex Fridman",
    "timestamp": "(03:51:27)",
    "text": "What’s that about?"
  },
  {
    "start": 1440,
    "end": 1441,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:51:28)",
    "text": "It just helps just maintain good posture, because when I have something to lean against, I do this."
  },
  {
    "start": 1442,
    "end": 1443,
    "speaker": "Lex Fridman",
    "timestamp": "(03:51:33)",
    "text": "You’re for hours sitting without… Wait, what are you doing?"
  },
  {
    "start": 1444,
    "end": 1445,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:51:37)",
    "text": "I sit on the ball, and then I bounce."
  },
  {
    "start": 1446,
    "end": 1447,
    "speaker": "Lex Fridman",
    "timestamp": "(03:51:40)",
    "text": "Is your back leaning on a thing?"
  },
  {
    "start": 1448,
    "end": 1449,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:51:41)",
    "text": "No."
  },
  {
    "start": 1450,
    "end": 1451,
    "speaker": "Lex Fridman",
    "timestamp": "(03:51:42)",
    "text": "What the fuck?"
  },
  {
    "start": 1452,
    "end": 1453,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:51:43)",
    "text": "Well, how else do you-"
  },
  {
    "start": 1454,
    "end": 1455,
    "speaker": "Lex Fridman",
    "timestamp": "(03:51:46)",
    "text": "You’re the only person in the world sitting on a yoga ball as you program for hours. You do realize this, right?"
  },
  {
    "start": 1456,
    "end": 1457,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:51:52)",
    "text": "It feels great. The problem is whenever I get a back, I just slouch and I find myself just getting uncomfortable. And I’m like, “I’m uncomfortable.” My shoulders are getting goofed up. I’m chicken necking constantly. It’s just like-"
  },
  {
    "start": 1458,
    "end": 1459,
    "speaker": "Lex Fridman",
    "timestamp": "(03:52:10)",
    "text": "But you’re able to keep your posture for hours on the yoga ball?"
  },
  {
    "start": 1460,
    "end": 1461,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:52:12)",
    "text": "Yeah. And so I can just do that. And then I find myself, if I slouch, I’m like, “Okay, Nope. Got to get back."
  },
  {
    "start": 1462,
    "end": 1463,
    "speaker": "Lex Fridman",
    "timestamp": "(03:52:18)",
    "text": "Do you have incredible back muscles or what?"
  },
  {
    "start": 1464,
    "end": 1465,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:52:19)",
    "text": "No. Well, I don’t think it takes incredible back muscles to-"
  },
  {
    "start": 1466,
    "end": 1467,
    "speaker": "Lex Fridman",
    "timestamp": "(03:52:23)",
    "text": "Keep posture."
  },
  {
    "start": 1468,
    "end": 1469,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:52:24)",
    "text": "… remain upright. Yeah, I think that’s a pretty basic human function. I would not consider myself a strong person."
  },
  {
    "start": 1470,
    "end": 1471,
    "speaker": "Lex Fridman",
    "timestamp": "(03:52:29)",
    "text": "Yeah. Basic human function. I don’t know."
  },
  {
    "start": 1472,
    "end": 1473,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:52:33)",
    "text": "Facts and logic."
  },
  {
    "start": 1474,
    "end": 1475,
    "speaker": "Lex Fridman",
    "timestamp": "(03:52:34)",
    "text": "Okay, cool. With one screen. Neovim. What operating system?"
  },
  {
    "start": 1476,
    "end": 1477,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:52:41)",
    "text": "Linux, just because I want a good window manager. That’s the whole press one button, bring up Chrome. I just use i3. I’m sure I could use something better than i3. People always tell me all these window managers are really great. But I just have those three screens I switch between, so it doesn’t really… I don’t really care what I use, just long as I can press one button and go."
  },
  {
    "start": 1478,
    "end": 1479,
    "speaker": "Lex Fridman",
    "timestamp": "(03:53:02)",
    "text": "Yeah, I’m the same, so half and half. Half Linux, the other half Windows with Linux, meaning WSL. What’s that? Windows Subsystem for Linux."
  },
  {
    "start": 1480,
    "end": 1481,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:53:12)",
    "text": "Weasel."
  },
  {
    "start": 1482,
    "end": 1483,
    "speaker": "Lex Fridman",
    "timestamp": "(03:53:13)",
    "text": "Weasel. See, no, there’s got to be a better one that’s more positive. Weasel just sounds-"
  },
  {
    "start": 1484,
    "end": 1485,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:53:19)",
    "text": "Seems right up Microsoft’s alley. That seems perfect."
  },
  {
    "start": 1486,
    "end": 1487,
    "speaker": "Lex Fridman",
    "timestamp": "(03:53:24)",
    "text": "People often accuse me of being a shill for somebody, sometimes dictators. If I’m a shill for anybody, it’s for Windows. There you go. I get paychecks every week from-"
  },
  {
    "start": 1488,
    "end": 1489,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:53:35)",
    "text": "Dang. Bought by Bill Gates."
  },
  {
    "start": 1490,
    "end": 1491,
    "speaker": "Lex Fridman",
    "timestamp": "(03:53:37)",
    "text": "Well, he’s not Microsoft anymore."
  },
  {
    "start": 1492,
    "end": 1493,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:53:38)",
    "text": "I know."
  },
  {
    "start": 1494,
    "end": 1495,
    "speaker": "Lex Fridman",
    "timestamp": "(03:53:40)",
    "text": "Developers, developers, develop. No, I’m just joking. I think, man, I need to try Mac. I need to try. I’m surrounded by people with iPhones. I use Android."
  },
  {
    "start": 1496,
    "end": 1497,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:53:52)",
    "text": "I use the Android."
  },
  {
    "start": 1498,
    "end": 1499,
    "speaker": "Lex Fridman",
    "timestamp": "(03:53:53)",
    "text": "Yeah. There you go. See? Oh."
  },
  {
    "start": 1500,
    "end": 1501,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:53:55)",
    "text": "We’re losers together."
  },
  {
    "start": 1502,
    "end": 1503,
    "speaker": "Lex Fridman",
    "timestamp": "(03:53:56)",
    "text": "Losers on a sinking ship. Okay, just to stay on Neovim for a sec and to give love and a shout-out to your friend, Teej."
  },
  {
    "start": 1504,
    "end": 1505,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:54:09)",
    "text": "He Streams, by the way."
  },
  {
    "start": 1506,
    "end": 1507,
    "speaker": "Lex Fridman",
    "timestamp": "(03:54:10)",
    "text": "He’s a streamer. And I subscribed. And I’ve been enjoying it. My allegiance is slowly shifting from you to him. The quality is far superior with him, the looks, the intelligence, the skillset, everything, just far superior. No. Okay, he-"
  },
  {
    "start": 1508,
    "end": 1509,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:54:29)",
    "text": "You know you’re making his day."
  },
  {
    "start": 1510,
    "end": 1511,
    "speaker": "Lex Fridman",
    "timestamp": "(03:54:32)",
    "text": "All right. He mentioned that he loves Neovim because it gives him the ability to eliminate having to do things he doesn’t like. That’s just a nice way to frame what this automation process that you described of automating a way, assigning shortcuts to things that are painful, that procedure. I wonder if you agree with that."
  },
  {
    "start": 1512,
    "end": 1513,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:55:00)",
    "text": "Fully agree. We have very similar mentalities when it comes to usage of Neovim, why people should use it, all that kind of stuff, and how to even use it well. He definitely takes it probably to a further degree. He spends more time automating and all that. I don’t necessarily derive a lot of joy from getting the perfect setup. But a lot to learn from. He’s very, very good at what he does. He’s 30 years old, been programming for not too many years, and he is one of the most talented developers for sure. It’s very shocking to see how smart someone can be."
  },
  {
    "start": 1514,
    "end": 1515,
    "speaker": "Lex Fridman",
    "timestamp": "(03:55:33)",
    "text": "People should check him out at teej_dv. Teej."
  },
  {
    "start": 1516,
    "end": 1517,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:55:38)",
    "text": "DV. His last name is DeVries. DeVries."
  },
  {
    "start": 1518,
    "end": 1519,
    "speaker": "Lex Fridman",
    "timestamp": "(03:55:42)",
    "text": "Oh, it’s not developer. Okay, cool."
  },
  {
    "start": 1520,
    "end": 1521,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:55:42)",
    "text": "Yeah, yeah, it’s just TJ. That’s just his name just spelled fun."
  },
  {
    "start": 1522,
    "end": 1523,
    "speaker": "Lex Fridman",
    "timestamp": "(03:55:46)",
    "text": "All right, Teej. What do you love about him?"
  },
  {
    "start": 1524,
    "end": 1525,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:55:48)",
    "text": "Wow. How much did he pay you to ask these questions?"
  },
  {
    "start": 1526,
    "end": 1527,
    "speaker": "Lex Fridman",
    "timestamp": "(03:55:51)",
    "text": "Thousands of dollars. Thousands."
  },
  {
    "start": 1528,
    "end": 1529,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:55:51)",
    "text": "Just so many dollars."
  },
  {
    "start": 1530,
    "end": 1531,
    "speaker": "Lex Fridman",
    "timestamp": "(03:55:53)",
    "text": "I can’t even count that many dollars."
  },
  {
    "start": 1532,
    "end": 1533,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:55:59)",
    "text": "Trust. Obviously trust is the biggest thing, especially in the, quote, unquote, “streaming” YouTube world, if you will. It’s very easy to find people that will want to be a part of stuff. People tend to latch onto things, and it’s very hard to find someone that you can really, really trust. And so he’s just somebody whom I can genuinely trust. He will always tell the truth. He’s all the right things for a good friend in this kind of endeavor."
  },
  {
    "start": 1534,
    "end": 1535,
    "speaker": "Lex Fridman",
    "timestamp": "(03:56:25)",
    "text": "As a good friend, he told me questions I could backstab you with."
  },
  {
    "start": 1536,
    "end": 1537,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:56:30)",
    "text": "Okay, I hate him. I forgot how much I don’t trust him."
  },
  {
    "start": 1538,
    "end": 1539,
    "speaker": "Lex Fridman",
    "timestamp": "(03:56:35)",
    "text": "Speaking of a harpoon, you mentioned it. He said to ask you basically how many years or decades it’s going to take to transition to Harpoon 2 to actually release it, develop it, and so on. Can you describe what Harpoon is and why your seem to be incapable of finishing a single project?"
  },
  {
    "start": 1540,
    "end": 1541,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:56:58)",
    "text": "That was a lovely framed question. Harpoon 2 is actually done. This is what I did: To avoid the swirl in the thousands of questions I will inevitably get, I kept the master branch as Harpoon 1, and I’ve kept Harpoon 2 as Harpoon 2 branch. And people that don’t read the read me to say that I just use Harpoon 2 now, that’s their fault. That’s it. I really don’t like answering hundreds of questions about open source stuff. I used to love doing open source and all that, but I got my soul crushed during the Falcor years, and so I guess I’m just allergic to being a really active maintainer."
  },
  {
    "start": 1544,
    "end": 1545,
    "speaker": "Lex Fridman",
    "timestamp": "(03:58:33)",
    "text": "Since you mentioned it, what keyboard layout do you use? You use Dvorak?"
  },
  {
    "start": 1546,
    "end": 1547,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:58:36)",
    "text": "I use Dvorak, but I used a custom version of Dvorak. The reason why I used it is in 2017, we are just having my second kid, it was Christmas and I’m having so much pain in my arm and I’m sitting there freaking out like, “Oh my gosh, is this the end of my career? Am I done programming? Is this all over?” And so I decided that I was going to create my own keyboard layout optimized to prevent the pain that I’m experiencing, so I used to Dvorak as the base and then laid out the symbols in a symmetrical, reasonable way so that it’s opening, closing, opening, closing, opening, closing. And they all are right here. I actually have to hold shift to press a number. Symbols are actually my first thing I get to press. And so it’s very optimized for a laptop keyboard layout so I can use my laptop in a very efficient, nice way. That’s how I got started on Dvorak and all that. I wouldn’t actually recommend it because I didn’t have a Kinesis at the time. I didn’t even know Kinesis existed at that time. And so when I discovered Kinesis in also 2017, that’s when I was like, “Oh, okay.”"
  },
  {
    "start": 1548,
    "end": 1549,
    "speaker": "Lex Fridman",
    "timestamp": "(03:59:37)",
    "text": "Would you recommend Kinesis to people?"
  },
  {
    "start": 1550,
    "end": 1551,
    "speaker": "ThePrimeagen",
    "timestamp": "(03:59:40)",
    "text": "I’m technically sponsored by Kinesis, so it’s hard for someone to believe someone that’s sponsored by it. But I did use it before I ever became sponsored. They’re the only sponsor that I reached out to and said, “I need a sponsorship from you. I’m going to use you either way. You can say no, but I really love it.” And for the first three years of using Kinesis, they gave me free Kinesises, Kenisi, as my sponsorship."
  },
  {
    "start": 1552,
    "end": 1553,
    "speaker": "Lex Fridman",
    "timestamp": "(04:00:04)",
    "text": "Kenisi. Yeah, I’m always torn. I tried to leave so many times."
  },
  {
    "start": 1554,
    "end": 1555,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:00:08)",
    "text": "You can’t. It’s too good."
  },
  {
    "start": 1556,
    "end": 1557,
    "speaker": "Lex Fridman",
    "timestamp": "(04:00:10)",
    "text": "But, see, I have this absurd situation of traveling with it."
  },
  {
    "start": 1558,
    "end": 1559,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:00:16)",
    "text": "I relate."
  },
  {
    "start": 1560,
    "end": 1561,
    "speaker": "Lex Fridman",
    "timestamp": "(04:00:17)",
    "text": "Yeah. I’m literally going to the war zone in Ukraine, I have a Kinesis keyboard, a laptop, and just a few other small things and that’s it. And it’s like is Kinesis keyboard really going to be 30% of volume that you’re bringing to a war zone? But-"
  },
  {
    "start": 1562,
    "end": 1563,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:00:37)",
    "text": "Looks like the answer is yes."
  },
  {
    "start": 1564,
    "end": 1565,
    "speaker": "Lex Fridman",
    "timestamp": "(04:00:39)",
    "text": "Yeah. Do you really derive that much value? I think it’s probably spiritual or psychological for me. It feels like home. There’s comfort associated with it. I try to leave."
  },
  {
    "start": 1566,
    "end": 1567,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:00:50)",
    "text": "I love this experience. It’s like a relationship you have with the thing."
  },
  {
    "start": 1568,
    "end": 1569,
    "speaker": "Lex Fridman",
    "timestamp": "(04:00:56)",
    "text": "It is. But I’m trying to figure out if it’s a toxic relationship or not. I think it’s mostly love. I think it’s love. Like all relationship, there’s some push and pull complications, but-"
  },
  {
    "start": 1570,
    "end": 1571,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:01:06)",
    "text": "They say that distance makes the heart grow fonder, so maybe sometimes the Kinesis keyboard needs to stay at home and the laptop keyboard can be the one so that your heart grows even more fond and that connection grows even deeper."
  },
  {
    "start": 1572,
    "end": 1573,
    "speaker": "Lex Fridman",
    "timestamp": "(04:01:18)",
    "text": "I already miss it as you say it, so I don’t know. I think it’s coming along to all the trips. If it breaks down, though… I was worried that Kinesis was shut down as a company. I’m like, what’s the business model here? Who actually uses these keyboards? But apparently they’re still going strong."
  },
  {
    "start": 1574,
    "end": 1576,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:01:33)",
    "text": "Yeah. Who uses these keyboards? As you use the keyboard “I have to take it with me everywhere.” I wonder who uses these keyboards. Coffee"
  },
  {
    "start": 1577,
    "end": 1578,
    "speaker": "Lex Fridman",
    "timestamp": "(04:01:42)",
    "text": "Yeah. Yep. I should mention that one of the things when I first became a fan of yours, I heard you talk about coffee and term… I still don’t, by the way, understand what you’re even talking about. I need to actually use it. But you run, amongst many things, a coffee company. Man, this smells so good. This one is dark mode, dark roast, whole coffee beans. There is seg origin, dash, dash location. Brazil."
  },
  {
    "start": 1579,
    "end": 1580,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:02:14)",
    "text": "Yeah, there’s a bunch of stuff on there."
  },
  {
    "start": 1581,
    "end": 1582,
    "speaker": "Lex Fridman",
    "timestamp": "(04:02:16)",
    "text": "Stuff on there that’s very devy. Shop, server, web. Can you legit, as such, order coffee via SSH?"
  },
  {
    "start": 1583,
    "end": 1584,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:02:25)",
    "text": "As of right now, it’s the only way you can get the coffee is via SSH. Okay, can I just origin, origin story you?"
  },
  {
    "start": 1585,
    "end": 1586,
    "speaker": "Lex Fridman",
    "timestamp": "(04:02:33)",
    "text": "Yeah, yeah. Yeah, right, I was going to do some kind of command line. Command to request or dash dash help or something or-"
  },
  {
    "start": 1587,
    "end": 1588,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:02:33)",
    "text": "Command coffee?"
  },
  {
    "start": 1589,
    "end": 1590,
    "speaker": "Lex Fridman",
    "timestamp": "(04:02:33)",
    "text": "Command coffee."
  },
  {
    "start": 1591,
    "end": 1592,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:02:44)",
    "text": "Okay. TJ and I, again, same Teej, Teej TV, about… By the way, very amazing designs done by David Hill. They’re very, very good. Let me give the basic ideas. It must’ve been about a year and a half ago, TJ and I were talking like, “Hey, every one of these people that have some sort of following, some sort of online presence, they’re always selling a thing,” but I got nothing to sell. I don’t really want to do merch. I’ve never really enjoyed doing merch. I just find that, I don’t know, it’s just not as much fun for me."
  },
  {
    "start": 1593,
    "end": 1594,
    "speaker": "Lex Fridman",
    "timestamp": "(04:03:15)",
    "text": "Don’t want to have a tequila?"
  },
  {
    "start": 1595,
    "end": 1596,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:03:15)",
    "text": "I don’t want a tequila. I want something that-"
  },
  {
    "start": 1597,
    "end": 1598,
    "speaker": "Lex Fridman",
    "timestamp": "(04:03:19)",
    "text": "Like The Rock."
  },
  {
    "start": 1599,
    "end": 1600,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:03:19)",
    "text": "And I also want something that I really don’t feel bad about selling. There’s a lot of people that will go on the internet and they’ll shill for a whole bunch of products like, “Oh, okay, try this, try this.” And this is why I’ve only ever really done Kinesis is because it’s like, well, I can point to something that was really bad in my life, I was very scared, and now it’s not bad anymore. It’s like, okay, that one made sense. But everything else always has been… It’s harder for me. And so we just talked for so long, and we love Neovim, so we’re just like, “Why haven’t we could do something from Neovim?” And we’re laughing about that, ordering from Neovim is just so ridiculous."
  },
  {
    "start": 1602,
    "end": 1603,
    "speaker": "Lex Fridman",
    "timestamp": "(04:04:11)",
    "text": "Sassiest?"
  },
  {
    "start": 1604,
    "end": 1605,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:04:11)",
    "text": "Oh yeah, he has a lot of sass."
  },
  {
    "start": 1606,
    "end": 1607,
    "speaker": "Lex Fridman",
    "timestamp": "(04:04:13)",
    "text": "Beard?"
  },
  {
    "start": 1608,
    "end": 1609,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:04:14)",
    "text": "Yep, he has a beard. He does SST. He does a lot of stuff. Very, very talented. We’ll call him DevOps engineer. He’s more than that. But very talented guy. Him and another person named Adamdotdev, vegan, by the way, great guy. We take him to Korean barbecue all the time. He eats nothing."
  },
  {
    "start": 1610,
    "end": 1611,
    "speaker": "Lex Fridman",
    "timestamp": "(04:04:33)",
    "text": "That’s great."
  },
  {
    "start": 1612,
    "end": 1613,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:04:34)",
    "text": "And Liz, she has been super important to the terminal coffee company. I think without her, we would not have been able to do what we have done. And then also David Hill, designer, he does Laravel. He designs for Laravel. Very talented designer. And so we all came together. And we were just laughing about how could we do something that’s just ridiculous? And that’s what we came up with. Yeah, there you go. You just open the website. You literally cannot order. We actually do not allow you to order."
  },
  {
    "start": 1614,
    "end": 1615,
    "speaker": "Lex Fridman",
    "timestamp": "(04:05:05)",
    "text": "The website is something that looks like the terminal. Use command below to order your delicious whole coffee bean. SSH terminal.shop."
  },
  {
    "start": 1616,
    "end": 1617,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:05:14)",
    "text": "Yeah. You can only SSH into it. You have to copy that command and throw it in there. If you want to add in the little terminal shop for your known hosts, you could do that."
  },
  {
    "start": 1618,
    "end": 1619,
    "speaker": "Lex Fridman",
    "timestamp": "(04:05:22)",
    "text": "How do you handle payment?"
  },
  {
    "start": 1620,
    "end": 1621,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:05:24)",
    "text": "Through Stripe. And so one of the things, we’ll be adding a mobile checkout to where I’ll show a QR code in the terminal and you can just check out on your phone, but right now, you enter in your credentials, it goes to Stripe."
  },
  {
    "start": 1622,
    "end": 1623,
    "speaker": "Lex Fridman",
    "timestamp": "(04:05:34)",
    "text": "Via all terminal, like SSH."
  },
  {
    "start": 1624,
    "end": 1625,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:05:36)",
    "text": "Yeah, SSH, obviously it stands for Secure Shell. It uses elliptical quantum safe algorithms to ensure that your data’s not being intercepted."
  },
  {
    "start": 1626,
    "end": 1627,
    "speaker": "Lex Fridman",
    "timestamp": "(04:05:45)",
    "text": "Yeah, but does he use AI?"
  },
  {
    "start": 1628,
    "end": 1629,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:05:48)",
    "text": "I’m pretty sure Dax uses AI. That-"
  },
  {
    "start": 1630,
    "end": 1631,
    "speaker": "Lex Fridman",
    "timestamp": "(04:05:50)",
    "text": "You said quantum, so I don’t know."
  },
  {
    "start": 1632,
    "end": 1633,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:05:52)",
    "text": "Quantum AI?"
  },
  {
    "start": 1634,
    "end": 1635,
    "speaker": "Lex Fridman",
    "timestamp": "(04:05:53)",
    "text": "Can this-"
  },
  {
    "start": 1636,
    "end": 1637,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:05:54)",
    "text": "Fusion quantum AI?"
  },
  {
    "start": 1638,
    "end": 1639,
    "speaker": "Lex Fridman",
    "timestamp": "(04:05:55)",
    "text": "Can this even be a company if it’s not using AI?"
  },
  {
    "start": 1640,
    "end": 1641,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:05:59)",
    "text": "We have some crypto chains with some quantum AI that’s powered by Fusion, so it’s pretty wild. Anyway, yeah, we just came together where we thought, what is the… That was from the Mike Tyson fight. It was literally that night Mike Tyson kissed the reporter and then walked out without any clothes. We did an ad for somebody."
  },
  {
    "start": 1643,
    "end": 1644,
    "speaker": "Lex Fridman",
    "timestamp": "(04:06:39)",
    "text": "I love this."
  },
  {
    "start": 1645,
    "end": 1646,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:06:39)",
    "text": "We just wanted to do something where there’s no level and there’s no world that makes me feel bad about selling this in people buying it. It’s good ethical coffee. We developed the entire supply chain and everything. It’s all packaged, it’s all boutique. It’s pretty high-end coffee. It tastes really, really good."
  },
  {
    "start": 1648,
    "end": 1649,
    "speaker": "Lex Fridman",
    "timestamp": "(04:07:27)",
    "text": "Yeah, it’s fun, everything. The humor on it is great. People should go to terminal.shop."
  },
  {
    "start": 1650,
    "end": 1651,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:07:32)",
    "text": "SSH terminal.shop."
  },
  {
    "start": 1652,
    "end": 1653,
    "speaker": "Lex Fridman",
    "timestamp": "(04:07:34)",
    "text": "I’m speaking to people that don’t know what SSH is. And there, you can read the command and then figure out how to use SSH in order to… It’s a kind of documentation, right?"
  },
  {
    "start": 1654,
    "end": 1655,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:07:45)",
    "text": "Yeah."
  },
  {
    "start": 1656,
    "end": 1657,
    "speaker": "Lex Fridman",
    "timestamp": "(04:07:45)",
    "text": "On the website."
  },
  {
    "start": 1658,
    "end": 1659,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:07:47)",
    "text": "If you can’t use SSH, you probably should just not worry about buying our coffee. That’s the whole-"
  },
  {
    "start": 1660,
    "end": 1661,
    "speaker": "Lex Fridman",
    "timestamp": "(04:07:52)",
    "text": "Well, you can learn."
  },
  {
    "start": 1662,
    "end": 1663,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:07:53)",
    "text": "You can learn. If you’re active and you’re a computer person, you’d like to launch the terminal and feel like a hacker, go for it. We even have subscriptions."
  },
  {
    "start": 1664,
    "end": 1665,
    "speaker": "Lex Fridman",
    "timestamp": "(04:07:59)",
    "text": "What I would love to see… This is how it came up I think on the cursor conversation, is that I would love it if an AI agent did this, like Anthropos computer use or something like that, actually took the action of ordering the coffee while it was programming."
  },
  {
    "start": 1666,
    "end": 1667,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:08:17)",
    "text": "Yeah, like, “Hey, order me some coffee,” and it actually go off. “Give me dark roast.” Order coffee. It could actually go through the whole flow of order."
  },
  {
    "start": 1668,
    "end": 1670,
    "speaker": "Lex Fridman",
    "timestamp": "(04:08:24)",
    "text": "Yeah, the whole flow. But even better, if you didn’t ask it to order coffee, you asked it to do something, and as a tangent, as a side quest it did that. Which is computer use does that. They showed off that it’s able to go to I think Google for some images, take a pause, and then continue doing other stuff. Anyway, yeah, super cool idea. Love it. Speaking of which, let’s talk AI. Programming with AI"
  },
  {
    "start": 1671,
    "end": 1672,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:08:50)",
    "text": "All right."
  },
  {
    "start": 1673,
    "end": 1674,
    "speaker": "Lex Fridman",
    "timestamp": "(04:08:50)",
    "text": "You’ve been both positive and negative on the role of AI in the whole programming software engineering experience. As it stands today, what do you think? What’s your general view about AI? What is it effective at? What is it not so good at?"
  },
  {
    "start": 1675,
    "end": 1676,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:09:06)",
    "text": "Okay, my general view is it comes down to something that’s pretty simple, which is that if you’re doing something in which is very predictable, AI is really nice. When you’re doing something that is just not predictable, AI is not very nice to use. If you’re using anything that’s more cutting edge, AI will not be using it, or AI won’t be very good at doing stuff with it. It’s not great at Zig because Zig is just, say, less documented. It’s really great at TypeScript."
  },
  {
    "start": 1681,
    "end": 1682,
    "speaker": "Lex Fridman",
    "timestamp": "(04:11:38)",
    "text": "I do think that’s a skill set."
  },
  {
    "start": 1683,
    "end": 1684,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:11:40)",
    "text": "Yeah. Skill issue for sure."
  },
  {
    "start": 1685,
    "end": 1686,
    "speaker": "Lex Fridman",
    "timestamp": "(04:11:42)",
    "text": "Skill issue. For people who are not aware, that’s a hashtag thing sometimes used mockingly in this case. There’s several layers mockingly, but also seriously, meaning the criticism is grounded in the fact that you lack the skill versus some kind of fundamental truth. Yes. I think that that’s the reason I use actually Copilot cursor a lot is for developing the skill of editing AI so I can just learn how to do that better and better. Because I think as I do that better and better, I start to utilize AI better. At this time, it is a bit of a boilerplate code thing, but you can do out of the box novel design decisions or tricky design decisions from scratch but fill out stuff using AI and then just learn the skill of modifying."
  },
  {
    "start": 1694,
    "end": 1695,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:17:03)",
    "text": "I know that."
  },
  {
    "start": 1696,
    "end": 1697,
    "speaker": "Lex Fridman",
    "timestamp": "(04:17:03)",
    "text": "And AI helps me actually get it done, because that thing, the empty page, like I mentioned before, it helps me write the thing, get it done, get it tested, ship the thing. Maybe it’s just because it’s just less lonely to work with an AI. I don’t know. I don’t know if any of that made sense, but-"
  },
  {
    "start": 1698,
    "end": 1699,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:17:22)",
    "text": "It all made perfect sense. I really do like that phrase, it makes it less lonely. I think there’s something to that that’s interesting having just some level of interaction that’s not just like an LSP autocomplete, having something that’s actually a little bit more than just that where it actually is thinking through and you can see a different thought and you’re like, “Oh wow, that’s a way different approach than I would’ve taken. Hey, that’s cool. I like these kind things.”"
  },
  {
    "start": 1702,
    "end": 1703,
    "speaker": "Lex Fridman",
    "timestamp": "(04:19:23)",
    "text": "I don’t know if this is a general rule, this is my anecdote data. The better you’re programming, the less you want to use the AI, the more gets in the way. The good programmers-"
  },
  {
    "start": 1704,
    "end": 1705,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:19:32)",
    "text": "It’s fair enough, as far as I can tell."
  },
  {
    "start": 1706,
    "end": 1707,
    "speaker": "Lex Fridman",
    "timestamp": "(04:19:34)",
    "text": "The more beginner programmers are much more happy to use AI. When I use AI, it’s for basic for just… I don’t know if there’s a better term. It’s not boilerplate, but it’s pretty easy programming. And that kind of programming is much easier to do. The 10 X, not to use the meme, programmers that I know that are ultra productive and brilliant people, they hate AI. They’re like, “This is nowhere close to what’s needed.” There’s something to that. I still think they should be using AI just for the learning because it’s going to get smarter, it’s going to get better. It’s the same thing, it’s like when you super optimize Neovim or super optimize Emacs, you may not discover new things that are in the pipeline, so it’s always good to be training in that way."
  },
  {
    "start": 1708,
    "end": 1709,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:20:26)",
    "text": "Let me ask you a question here just for my understanding. You talked about this idea that you have all these LLM prompts, all this big backlog of messy LLM prompts that you have these templates for that you can do various actions. You have these strategies of making itself explain itself and then do the right thing. As far as I can tell, that’s really built into a lot of people."
  },
  {
    "start": 1711,
    "end": 1712,
    "speaker": "Lex Fridman",
    "timestamp": "(04:21:23)",
    "text": "Obviously open question. It’s a fascinating one. I personally think, yes, you’re falling behind. Not you, but if you’re not-"
  },
  {
    "start": 1713,
    "end": 1714,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:21:24)",
    "text": "It could be me, it could be me."
  },
  {
    "start": 1715,
    "end": 1716,
    "speaker": "Lex Fridman",
    "timestamp": "(04:21:33)",
    "text": "… not playing with it, you’re falling behind because the thing I’m doing with the prompts is you’re learning, you’re building up this intuition about how AI works. You’re understanding what is its strengths and weaknesses? Not even the current version, but the next version and so on. What does it mean to teach an AI system about the world? What kind of information does it need to make effective decisions? I think that does transfer to smarter and smarter models. You’ll need to make less rigorous and specific in details instructions over time, but you still have to have that kind of thing."
  },
  {
    "start": 1719,
    "end": 1720,
    "speaker": "Lex Fridman",
    "timestamp": "(04:24:00)",
    "text": "You guys did the video of two idiots, one keyboard, People should go watch that video, where you guys obviously sucked at it."
  },
  {
    "start": 1721,
    "end": 1722,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:24:07)",
    "text": "Yeah, co-using."
  },
  {
    "start": 1723,
    "end": 1724,
    "speaker": "Lex Fridman",
    "timestamp": "(04:24:08)",
    "text": "That was pretty cool, which you guys did, which is controlling one Neovim interface from two different keyboards."
  },
  {
    "start": 1725,
    "end": 1726,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:24:15)",
    "text": "Yeah. And then we each get an allowance of certain characters or motions we could perform."
  },
  {
    "start": 1727,
    "end": 1728,
    "speaker": "Lex Fridman",
    "timestamp": "(04:24:19)",
    "text": "Yeah. And so you both had to communicate together. That’s a real skill. I’m sure you can get super efficient with that, but it just takes time to learn that kind of thing. So yeah, I think there’s some value to it, but I think there’s a learning curve."
  },
  {
    "start": 1729,
    "end": 1730,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:24:37)",
    "text": "One thing to be pretty clear is that I actually use AI quite a bit. I just don’t use it for programming. And so one thing I’ve been trying to get it to is to be able to have a long interview or understand what Twitch Chat is saying and become Twitch chat and be able to speak as if it is Twitch chat. Try to learn how to prompt it in different ways. And so I think those things for me are just really fun."
  },
  {
    "start": 1732,
    "end": 1733,
    "speaker": "Lex Fridman",
    "timestamp": "(04:25:23)",
    "text": "In programming. And I should also say that I’m using it in every walk of life, in every context. I use that same kind of exploration about prompts and so on, I’m using and learning. I think it legit is a whole field in itself."
  },
  {
    "start": 1734,
    "end": 1735,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:25:41)",
    "text": "Yeah."
  },
  {
    "start": 1736,
    "end": 1737,
    "speaker": "Lex Fridman",
    "timestamp": "(04:25:42)",
    "text": "Prompt engineering and how to interact with AI systems, I think it’s worth the investment. Can you actually speak to that? Because I saw you’re basically pulling from Twitch chat and having an LLM speak. I didn’t realize, you’re not reading the exact chat messages."
  },
  {
    "start": 1738,
    "end": 1739,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:26:04)",
    "text": "Yeah."
  },
  {
    "start": 1740,
    "end": 1741,
    "speaker": "Lex Fridman",
    "timestamp": "(04:26:04)",
    "text": "You’re doing kind of some kind of summarization?"
  },
  {
    "start": 1742,
    "end": 1743,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:26:07)",
    "text": "Yeah. So I ended up making like eight queries off to OpenAI where it’s just like the first thing is like I have it have it like a default personality. “Hey, you’re Randall, the manager, you’re a software engineering manager.” Kind of explain their position, what they like, what they don’t like, and then be like, “These are the list of thoughts you have in your head and you need to talk to this person and ask them a question.”"
  },
  {
    "start": 1744,
    "end": 1745,
    "speaker": "Lex Fridman",
    "timestamp": "(04:26:28)",
    "text": "This is amazing."
  },
  {
    "start": 1746,
    "end": 1747,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:26:28)",
    "text": "“Give me 10 of these responses that you think are probably thoughts that you have and you want to ask.” Make it kind of give you a list and then be like, “Okay.” Then re-prompt and be like, “Hey, you’re Randall, you’re this, this, this, this, this. You have these 10 questions before you and now you need to select one of them and reword it in a way that sounds more like you, the engineering manager.” And I’m constantly trying to make it iterate on itself as opposed to just one-shotting it. And I found if I iterate too much, it loses what it was originally trying to ask if I don’t do it enough and it’s just too degenerate from Twitch chat. And so it’s like I have a lot of improvement to do with this idea-"
  },
  {
    "start": 1748,
    "end": 1749,
    "speaker": "Lex Fridman",
    "timestamp": "(04:27:07)",
    "text": "Just to clarify, you’re feeding in Twitch chat, “You’re a manager, these are the thoughts you have in your head, pick out some of the most profound thoughts”?"
  },
  {
    "start": 1750,
    "end": 1751,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:27:20)",
    "text": "Effectively. It’s like depending on what I want it to do, I’m trying to work on a better system still for it."
  },
  {
    "start": 1752,
    "end": 1753,
    "speaker": "Lex Fridman",
    "timestamp": "(04:27:20)",
    "text": "Brilliant."
  },
  {
    "start": 1754,
    "end": 1755,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:27:25)",
    "text": "And so it’s like, “How can I give voice to Twitch chat? Can I make it so that I can create adversarial characters against Twitch chat or for Twitch chat? Can I incorporate YouTube?” All that kind of stuff. And how do you describe to an LLM to role-play into its position? And so just thinking through those kinds of things. So maybe I am having some prompt skills, but it’s just not in the coding world yet."
  },
  {
    "start": 1756,
    "end": 1757,
    "speaker": "Lex Fridman",
    "timestamp": "(04:27:46)",
    "text": "Sure."
  },
  {
    "start": 1758,
    "end": 1759,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:27:47)",
    "text": "One day I’ll get there."
  },
  {
    "start": 1760,
    "end": 1761,
    "speaker": "Lex Fridman",
    "timestamp": "(04:27:48)",
    "text": "I saw that you were playing with different voices. There was like a sexy voice?"
  },
  {
    "start": 1762,
    "end": 1763,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:27:54)",
    "text": "That started off as a French voice-"
  },
  {
    "start": 1764,
    "end": 1765,
    "speaker": "Lex Fridman",
    "timestamp": "(04:27:55)",
    "text": "French voice?"
  },
  {
    "start": 1766,
    "end": 1767,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:27:56)",
    "text": "… and then it turns out ElevenLabs just cannot do a French lady. And when you do multilingual French lady, she starts talking. It’s like, “What? What is this?”"
  },
  {
    "start": 1768,
    "end": 1769,
    "speaker": "Lex Fridman",
    "timestamp": "(04:28:08)",
    "text": "I tuned into one of your streams and there’s this lady in a sexualized way."
  },
  {
    "start": 1770,
    "end": 1771,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:28:16)",
    "text": "It became too funny. And so we call her Not French Stormy Daniels."
  },
  {
    "start": 1772,
    "end": 1773,
    "speaker": "Lex Fridman",
    "timestamp": "(04:28:20)",
    "text": "Oh, nice."
  },
  {
    "start": 1774,
    "end": 1775,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:28:21)",
    "text": "Yeah. But I want to go back to the AI and some of the aspects."
  },
  {
    "start": 1776,
    "end": 1777,
    "speaker": "Lex Fridman",
    "timestamp": "(04:28:24)",
    "text": "Sure."
  },
  {
    "start": 1778,
    "end": 1779,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:28:25)",
    "text": "And so my big gripe with AI has nothing to do with its capabilities. It’s exactly capable, as it should be capable, because that’s what people programmed it as. The things that I really dislike is, A, there’s a whole group of people that are just like, “The end is nigh. AI is here, you just need to stop programming.” I cannot tell you, even you mentioned Peter levels earlier, he made some sort of tweet and one of the person’s responses was, “No one in 2025 or whatever should be acquiring hard skills. You should rely on everything for the AI effectively.” And it’s just like these are really damning pieces of advice for young people. Young people are being told that you should never become an expert in anything, you should always offload."
  },
  {
    "start": 1782,
    "end": 1783,
    "speaker": "Lex Fridman",
    "timestamp": "(04:30:27)",
    "text": "But I also think even on top of that, just even acquiring the hard skills or whether that means, programming from scratch, for example, in the context of programming, that’s going to make you better at steering the AI, not just correcting the AI, but steering the AI. I think there is some kind of, if you know how a computer works, you can program Python better. It’s maybe counterintuitive, but if you know the low level abstractions, some intuition around that, you can steer the high level abstractions better."
  },
  {
    "start": 1784,
    "end": 1785,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:31:01)",
    "text": "Yeah."
  },
  {
    "start": 1786,
    "end": 1787,
    "speaker": "Lex Fridman",
    "timestamp": "(04:31:01)",
    "text": "But that just seems to be the case. Unless of course AI becomes like truly super intelligent like many levels above, but it’s very unlikely in the short term. And in the long term it’s still good as it gets better and better and better to be able to ride the wave of the improvement."
  },
  {
    "start": 1788,
    "end": 1789,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:31:19)",
    "text": "Yeah, I’m on that team very much so."
  },
  {
    "start": 1790,
    "end": 1791,
    "speaker": "Lex Fridman",
    "timestamp": "(04:31:21)",
    "text": "A lot of people have written to me, I think a lot of developers, programmers are really concerned about the future of their profession in the context of quickly improving AI systems. So do you think AI will eventually replace programmers?"
  },
  {
    "start": 1792,
    "end": 1793,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:31:37)",
    "text": "The hard part about that phrase is you use the term eventually, meaning do I think in five years, 10 years, a hundred years? What does that term actually mean? I think at some point if all things continue at the current rate of improvement, there does come a point where programming as a hard skill does become unnecessary. At some eventual point, way, way down the road, yes. I don’t know what that point looks like. I don’t know when it’s going to happen. I don’t even attempt to make predictions about that. But there are still some leaps and bounds we need to make."
  },
  {
    "start": 1795,
    "end": 1796,
    "speaker": "Lex Fridman",
    "timestamp": "(04:32:46)",
    "text": "Yeah, absolutely. I would say that I think it depends how you define programming also, because when the community moves from assembly to C, from C to, I don’t know, Python and JavaScript, that’s evolution. That’s really painful for a lot of people who are used to programming that lower-level language, so there’s going to be a continuous evolution. And maybe that means with AI, there’s going to be more and more evolution towards natural language as part of the tool chain like being able to learn how to write proper prompts. Yeah, because natural language is still a language. And in the long term, it’s possible that a large percentage of programming is natural language. There are probably still going to be some percentage that’s not, that’s going to be extremely structured language."
  },
  {
    "start": 1797,
    "end": 1798,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:33:45)",
    "text": "Right now, I don’t think we are anywhere near natural language being possible because it’s ambiguous. And I think what we’ll end up seeing as people push really hard into this, you’re going to see some sort of pseudo-lang, which is going to be a language for AIs in which you prompt, which is going to be less ambiguous. People keep striving towards the less ambiguous state. And at that point you’re just programming yet another evolution into a higher order language. And perhaps that is a future in which people will have a more terse language. I’m just not sure how much more terse it can get."
  },
  {
    "start": 1800,
    "end": 1801,
    "speaker": "Lex Fridman",
    "timestamp": "(04:34:37)",
    "text": "But there’s just people who are programmers who are worried about their jobs. Not a complete replacement, but maybe a rapid evolution of what it means to be a programmer. Like you mentioned, if natural language becomes a way that you can communicate or you can program, that means the pool of people who can get programming jobs changes rapidly, so they’re really concerned."
  },
  {
    "start": 1802,
    "end": 1803,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:35:01)",
    "text": "And to some extent, because no matter how much we want to say how good AI is, there comes a point where there exists a bug, there exists a large piece of software in which to describe the change requires just pages and pages of description to the point where it is significantly just faster or easier for someone to just whip something out. There’s definitely a balance there, it’s not like a perfect trade-off. And so I think people need to quit worrying and think about how they can integrate it and try, like prove it to themselves. Do they actually make themselves irrelevant?"
  },
  {
    "start": 1805,
    "end": 1806,
    "speaker": "Lex Fridman",
    "timestamp": "(04:36:11)",
    "text": "Yeah. Is there something you recommend how a developer or programmer could avoid the situation where AI can automate them away?"
  },
  {
    "start": 1807,
    "end": 1808,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:36:23)",
    "text": "I think that the bigger the project you can manage, the bigger the thing you can build, the more understanding both down and up the stack you can go, the more valuable you become. Because if you understand how to build something in the front end, okay, well, now you kick off some LLM task of some sort, that’s going to go off and make a change to the front end. Okay, while it’s doing that, you can go and kick off something in the CLI tool, you can go and you can go kick off something somewhere else. And as these things come back with results, you can review the results, make sure it’s the way you want it, change it, commit it, go to the next. You only become more, as you said in the end, more productive if we reach this state where it’s truly able to do that."
  },
  {
    "start": 1809,
    "end": 1810,
    "speaker": "Lex Fridman",
    "timestamp": "(04:37:00)",
    "text": "I think there is like a skill to working together with AI, which is why I’m kind of excited to watch you keep trying to do it."
  },
  {
    "start": 1811,
    "end": 1812,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:37:08)",
    "text": "Yeah."
  },
  {
    "start": 1813,
    "end": 1814,
    "speaker": "Lex Fridman",
    "timestamp": "(04:37:09)",
    "text": "It’s like we don’t know how it fits exactly, but it feels like AI should be a boost to productivity. And I definitely think it’s a boost to just the joy of programming. I think there’s a lot of people, yeah, it’s a job, but it’s also a source of meaning, a source of joy. Programming is fun, you’re creating something cool, and also potentially that a lot of people use."
  },
  {
    "start": 1815,
    "end": 1816,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:37:34)",
    "text": "There’s this one thing that just really frustrates me, and this is kind of going into the Devin category, which is that I want an intern that cares."
  },
  {
    "start": 1817,
    "end": 1818,
    "speaker": "Lex Fridman",
    "timestamp": "(04:37:41)",
    "text": "Yeah."
  },
  {
    "start": 1819,
    "end": 1820,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:37:42)",
    "text": "You don’t get that out of an LLM. It does not care, meaning that I don’t want it just to make a UI for me that displays these icons like I asked, I want it to care, I want it to think about it, I want it to present to me and me being like, “Oh yeah, yeah, that’s great.” And then me to make changes. And then later on it’s like, “Actually, I really rethought about this and actually it’d be way better if we change…” It doesn’t actually care about the craft. But when you work with an intern or you work with somebody else, they care. When they factor something, they actually go over and go, “Oh yeah, this is actually kind of bad. I’m going to come back to that.” They finish this, they go back over here and they make this even better. They actually care about the thing itself. It’s a completely different experience. I just want something that also cares that wants to make the thing better, not just simply accomplish the task."
  },
  {
    "start": 1822,
    "end": 1823,
    "speaker": "Lex Fridman",
    "timestamp": "(04:38:42)",
    "text": "I mean, there’s so many aspects to caring versus the trivial version of that is a kind of restlessness where you want to keep improving, and I think that is very much AI could do, where it constantly just ask itself, “Can I make this better?” And if it keeps doing that, it probably is going to take it to some ridiculous place, so actually it’s also knowing when to stop. I think developing something you can call taste, which is like trying, working extremely hard, constantly improving until it just feels right. This is it. And I think that is a thing that AI is not good at where it’s just like, “Yes, this is it.”"
  },
  {
    "start": 1824,
    "end": 1825,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:39:26)",
    "text": "I’ve had write iterated three times and three was the-"
  },
  {
    "start": 1826,
    "end": 1827,
    "speaker": "Lex Fridman",
    "timestamp": "(04:39:27)",
    "text": "Yeah, that’s it. We’re now there. And I think ultimately that is what humans are amazing at, which is like knowing when something is right like, “This is it.” Especially as you understand, as you develop taste in a particular industry, in a particular context application, knowing like, “This is it. Yeah, the rounded corners on this button, that’s exactly that. That’s beautiful.” So it’s just a sense of beauty, a sense of function, and efficiency, and so on. Yeah, but humans could do almost like supervision of AI systems in that context."
  },
  {
    "start": 1828,
    "end": 1829,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:40:08)",
    "text": "Yeah."
  },
  {
    "start": 1830,
    "end": 1831,
    "speaker": "Lex Fridman",
    "timestamp": "(04:40:09)",
    "text": "Yeah. You’ve ranted about Devin just full of rage."
  },
  {
    "start": 1832,
    "end": 1833,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:40:15)",
    "text": "I mean, first off, the people that run Devin are extremely nice. I want that to be understood. I don’t have some sort of upsetness against them or anything like that. Second, Devin, it’s like the full package when it comes to programming. So it’s going to have, you’re going to give it a task and a repo, and it’s going to go through, it’s going to try to understand the repo and the task, make the change to the repo by exploring it, then actually make a commit to GitHub and explain what it did. So hopefully you have this whole offline thing, which is the other part of this AI part that I actually really like, where it’s just like, “Go fix this thing.” Then I can just go and unbroke and fix this one thing and come back and go, “Okay, good enough, merge, boom.” I want that kind of running, being able to complete things."
  },
  {
    "start": 1836,
    "end": 1837,
    "speaker": "Lex Fridman",
    "timestamp": "(04:42:17)",
    "text": "Yeah. We should also mention that debugging, this might be intuitive or counterintuitive, AI is really bad at."
  },
  {
    "start": 1838,
    "end": 1839,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:42:26)",
    "text": "Yeah."
  },
  {
    "start": 1840,
    "end": 1841,
    "speaker": "Lex Fridman",
    "timestamp": "(04:42:27)",
    "text": "Like that is one of the hardest… It actually makes you realize how special humans are and how difficult the task of debugging is. Obviously, for trivial debugging, maybe you can find bugs, but that is the real art of programming is finding bugs, logical bugs, extremely complicated rare bugs, edge cases. AI can assist, but man, the hard ones really require so much context, so much experience, so much intuition from, again, operating in a fog full of uncertainty. It’s hard."
  },
  {
    "start": 1842,
    "end": 1843,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:43:06)",
    "text": "Yeah."
  },
  {
    "start": 1844,
    "end": 1845,
    "speaker": "Lex Fridman",
    "timestamp": "(04:43:07)",
    "text": "Of course AI could maybe create logs and do traces and do some kind of loading a huge amount of data that humans can’t, but ultimately that just means it could be a better assistant in debugging versus the actual lead debugger."
  },
  {
    "start": 1846,
    "end": 1847,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:43:27)",
    "text": "Yeah. I mean, it’d be great if they could. I mean, the more it can do that, the better, because as far as I can tell, correct me where I’m wrong on this, current state debugging is really, it looks at the code, it looks at the bug problem, it just kind of tries to text-predict where it’s most likely accurate, and then just tries to fix that spot. And so it’s like it’s likely this spot, you said admin panel, it’s slightly off, this, this, this. It’s probably this location, which could actually be a really great way to do search, let me do semantic searching, point to me where this is, because maybe that is a really great way to navigate large code bases. It’s like smart intelligent search. As opposed to trying to make it do the thing, ask it to just help you do the thing in pinpointing problems. I’d love to see more of that, because that’s for me is like the exciting part."
  },
  {
    "start": 1849,
    "end": 1850,
    "speaker": "Lex Fridman",
    "timestamp": "(04:45:08)",
    "text": "Yeah. I mean, that for me would be the big, if it can solve that, not solve that, but improve that, that would be huge, whether it’s agents or just LLMs integrated into IDE."
  },
  {
    "start": 1851,
    "end": 1852,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:45:19)",
    "text": "I think there’s this whole idea, I call it a denial of attention. I think there’s an entire attack vector that’s going to be happening. We’re using LLMs to generate fake bug reports, fake all these things to just actually effectively to demotivate and hurt open source maintainers. Polykill was the first bug that kind of had this experience, is this denial of attention where an active malicious maintainer just hounded the owner. And then a white knight came out and offered to buy some stuff from under them. And when they bought it, they actually replaced it with a malicious piece of code and then used it. So there’s this whole security world that’s developing around using these in a very aggressive format."
  },
  {
    "start": 1853,
    "end": 1854,
    "speaker": "Lex Fridman",
    "timestamp": "(04:46:04)",
    "text": "I mean, it’s a fascinating world we’re entering into, but I do agree with you that human developers will be a huge part of that world."
  },
  {
    "start": 1855,
    "end": 1856,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:46:11)",
    "text": "Yeah."
  },
  {
    "start": 1857,
    "end": 1858,
    "speaker": "Lex Fridman",
    "timestamp": "(04:46:11)",
    "text": "That the job might evolve, but it’s going to be there. If I can, I didn’t really look at this page, I thought it would be cool to go over with you. This is, again, the-"
  },
  {
    "start": 1859,
    "end": 1860,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:46:21)",
    "text": "Stack overflow, my favorite"
  },
  {
    "start": 1861,
    "end": 1862,
    "speaker": "Lex Fridman",
    "timestamp": "(04:46:23)",
    "text": "… Stack Overflow Developer Survey, talking about their sentiment and usage of AI systems. The general sentiment of, yes, 61% say yes, they use it and 25% say no, don’t plan to. So majority use it, majority have a favorable sentiment over it, favorable or very favorable or indifferent. That’s like looks like over 90%."
  },
  {
    "start": 1863,
    "end": 1864,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:46:52)",
    "text": "That’s really surprising that that many people just have no plan in looking into AI. As much as I don’t like using it for coding, I hope one day I can use it more. And so it’s like, to me, I’m always looking for the next thing. I’m just surprised that people are, that, I guess obstinate for it. Obviously, the second one, the AI tool sentiment, it must be only the users who responded to the top two of that first one just given the amount of respondents."
  },
  {
    "start": 1865,
    "end": 1866,
    "speaker": "Lex Fridman",
    "timestamp": "(04:47:17)",
    "text": "I wonder if no and don’t plan to are people who have tried it and quickly built up the intuition like, “This really sucks.”"
  },
  {
    "start": 1867,
    "end": 1868,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:47:25)",
    "text": "Yeah."
  },
  {
    "start": 1869,
    "end": 1870,
    "speaker": "Lex Fridman",
    "timestamp": "(04:47:26)",
    "text": "So it could be like experienced programmers. They’re like, “No, this is not making me more productive.” 81% agree that increasing productivity is the biggest benefit that the developers identify for AI tools. Okay, so this is, what are the benefits? Increased productivity, speed up learning, greater efficiency, improve accuracy in coding, make workload more manageable, improve collaborate. Where’s the fun, increased fun? I would say that’s like number one for me."
  },
  {
    "start": 1871,
    "end": 1872,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:47:55)",
    "text": "Maybe speed up learning is like a subcategory of fun. If you’re able to learn more and be able to become better. To me, that sounds good."
  },
  {
    "start": 1873,
    "end": 1874,
    "speaker": "Lex Fridman",
    "timestamp": "(04:48:05)",
    "text": "I don’t know. It’s different because productivity is part of fun too. There is just a lightness. I mean, maybe improved collaboration, all of these elements for sure."
  },
  {
    "start": 1875,
    "end": 1876,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:48:16)",
    "text": "My time using Copilot, there was certainly a level of wonder that would happen for quite some time where it’s just like, it’s just amazing what it can do."
  },
  {
    "start": 1877,
    "end": 1878,
    "speaker": "Lex Fridman",
    "timestamp": "(04:48:23)",
    "text": "Yeah."
  },
  {
    "start": 1879,
    "end": 1880,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:48:24)",
    "text": "I’m just super impressed by what it can do, even though I don’t use it. It’s amazing to me that we have something that can even get that close."
  },
  {
    "start": 1881,
    "end": 1882,
    "speaker": "Lex Fridman",
    "timestamp": "(04:48:31)",
    "text": "In terms of accuracy of AI tools, only 2.7% highly trust-"
  },
  {
    "start": 1883,
    "end": 1884,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:48:37)",
    "text": "I would say that you have to be very green to think that you should highly trust an AI output. You should be very skeptical."
  },
  {
    "start": 1885,
    "end": 1886,
    "speaker": "Lex Fridman",
    "timestamp": "(04:48:43)",
    "text": "Yeah, I don’t know where I stand. Probably somewhat distrust. Highly distrust seems aggressive."
  },
  {
    "start": 1887,
    "end": 1888,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:48:47)",
    "text": "It does seem a little, true. You should always assume that there’s something wrong, and then from there you can go and challenge it."
  },
  {
    "start": 1889,
    "end": 1890,
    "speaker": "Lex Fridman",
    "timestamp": "(04:48:57)",
    "text": "And then estimation of whether AI can handle complex tasks, most people don’t think it can handle complex tasks. I mean, it seems like people have a good sense of what it’s able to handle and not."
  },
  {
    "start": 1891,
    "end": 1892,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:49:07)",
    "text": "I would argue that people don’t have a good grasp of what complex is in programming."
  },
  {
    "start": 1893,
    "end": 1894,
    "speaker": "Lex Fridman",
    "timestamp": "(04:49:11)",
    "text": "Sure, yeah."
  },
  {
    "start": 1895,
    "end": 1896,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:49:12)",
    "text": "If you say, “Write me quicksort,” some people will think quicksort’s super complex. But I would argue that that’s actually probably the simplest thing you could ask an AI to do. Things that are so well documented, it’s going to do a great job at that."
  },
  {
    "start": 1897,
    "end": 1898,
    "speaker": "Lex Fridman",
    "timestamp": "(04:49:26)",
    "text": "Yeah. Probably high-level design decisions, which people don’t even use AI for right now, I guess agents are supposed to be doing that kind of stuff. That’s probably the most difficult thing or the most impactful thing, or the most difficult thing is finding bugs."
  },
  {
    "start": 1899,
    "end": 1900,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:49:42)",
    "text": "Yeah."
  },
  {
    "start": 1901,
    "end": 1902,
    "speaker": "Lex Fridman",
    "timestamp": "(04:49:43)",
    "text": "AI tools next year, writing code, and so on."
  },
  {
    "start": 1903,
    "end": 1904,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:49:47)",
    "text": "Now, this one, the ethics part. I’m actually super curious your take on the ethics. Will we see Europe laying down some new regulations?"
  },
  {
    "start": 1905,
    "end": 1906,
    "speaker": "Lex Fridman",
    "timestamp": "(04:49:56)",
    "text": "Oh, boy."
  },
  {
    "start": 1907,
    "end": 1908,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:49:56)",
    "text": "What about artists? What about people that are really… Because the difference between coding and artists is very, very simple. If you gave me a sheet of paper, I could draw you a crab. You go, “That’s a crab.” But you can’t do that with coding. It’s like it’s right or it’s wrong. There’s not a variation of interpretation for what a crab is. It’s like, “No, you cannot make that statement.” It’s very bounded in what it can express. And I could see why artists, that’s a very frustrating point. And then who gets rewarded for all that?"
  },
  {
    "start": 1910,
    "end": 1911,
    "speaker": "Lex Fridman",
    "timestamp": "(04:50:48)",
    "text": "Yeah, that’s a weird one. That’s a really weird one because most of these models I think are training on data they don’t technically have rights to be training on."
  },
  {
    "start": 1912,
    "end": 1913,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:50:56)",
    "text": "Yeah, there’s a lot of questions."
  },
  {
    "start": 1914,
    "end": 1915,
    "speaker": "Lex Fridman",
    "timestamp": "(04:50:58)",
    "text": "There’s an unspoken, it’s a real Wild West."
  },
  {
    "start": 1916,
    "end": 1918,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:51:01)",
    "text": "Because you could imagine that, I always use Europe because they tend to have like maybe the most consumer protection laws out there. You could imagine what happens if a law came down that said that if you used a model that produced GPL potential code, you have to open source? How many companies are going to be like, “Oh my gosh”? Like, “You have one year to get rid of all code that was generated that’s potentially GPL-sourced from a model.” You could imagine just the sheer panic that’s going to happen. It’d be a fire sale of code. Advice for young programmers"
  },
  {
    "start": 1919,
    "end": 1920,
    "speaker": "Lex Fridman",
    "timestamp": "(04:51:31)",
    "text": "So given all that, can you give advice to young programmers? This is another question from Reddit, the infinite wisdom of Reddit. “What should a person in their early 20s do to move forward in the tech industry?” And this is an interesting addition to the question, “And by doing it, will this be walking on someone else’s path?”"
  },
  {
    "start": 1921,
    "end": 1922,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:51:59)",
    "text": "I am going to try to answer that question, I guess the best I can, which I think that if you’re entering into the tech world, one of the hardest pieces of advice that I took a long time to learn was I became enamored and addicted. Obviously, we talked about that I program for way too many hours, forgetting to spend the time I needed with my wife, with my friends, all that stuff, like totally wrapping myself up into one activity. I think though it made me who I am, it was probably an unhealthy activity and probably not a wise activity. And so the best advice I can give is that you got to develop the love, the skill, the desire for it. Whether that’s just only using AI agents, programming yourself, using Zig or programming JavaScript, whatever that flavor is that’s going to get you coming back every single day, getting the reps in the gym, if you will for programming."
  },
  {
    "start": 1924,
    "end": 1925,
    "speaker": "Lex Fridman",
    "timestamp": "(04:53:22)",
    "text": "Yeah. I mean, the golden handcuffs comfort can destroy the soul in some sense. Yeah, so that’s really important to remember. There’s young people kind of thinking, “Do I even want to be a programmer now?” It seems like AI is getting better and better at programming. If they were trying to make that decision, would you still say, “Yeah, if this is something that fills you with joy”?"
  },
  {
    "start": 1926,
    "end": 1927,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:53:51)",
    "text": "I still want my kids to learn how to program if I can answer that, if that’s a good enough answer-"
  },
  {
    "start": 1928,
    "end": 1929,
    "speaker": "Lex Fridman",
    "timestamp": "(04:53:51)",
    "text": "Yeah, that’s a really powerful answer."
  },
  {
    "start": 1930,
    "end": 1931,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:53:57)",
    "text": "… in the sense that my kids are decades younger than a young person trying to learn how to program right now. And so I’m hoping that my kid can run and build whatever he wants in Roblox. I’m showing him ChatGPT and be like, “All right, let’s ask questions. How do we do this?” It’s still extremely confusing for him to do all these things. And so it’s like, “Let’s do this.” I want him to learn and be effective, and maybe one day he has to throw away all those skills in 20 years. But I bet you that whatever skills he threw away or whatever hard skills he had to throw away, an entirely new field that none of us have thought about, just like if you would have asked somebody in the ’70s about social networks, they’d be like, “What the heck are you even talking about?” Things will exist in the future that are going to be massively different, and crazy, and exciting."
  },
  {
    "start": 1932,
    "end": 1933,
    "speaker": "Lex Fridman",
    "timestamp": "(04:54:40)",
    "text": "Maybe in virtual reality."
  },
  {
    "start": 1934,
    "end": 1935,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:54:42)",
    "text": "There you go."
  },
  {
    "start": 1936,
    "end": 1937,
    "speaker": "Lex Fridman",
    "timestamp": "(04:54:42)",
    "text": "Maybe all of us actually down the line will just be building video games."
  },
  {
    "start": 1938,
    "end": 1939,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:54:46)",
    "text": "Just entertainment for all, the brave new world of our world?"
  },
  {
    "start": 1940,
    "end": 1941,
    "speaker": "Lex Fridman",
    "timestamp": "(04:54:51)",
    "text": "Well, I think entertainment is a kind of trivialized version of what a video game could be. It’s like, what is the purpose of life anyway? I mean, it could be a deeply fulfilling video game. It doesn’t have to be just like dopamine rush. It could be educational, it could be scary, it could be challenging, forcing an evolution, the leap into adventure that it makes up a fulfilling life. That could be video games. Who knows? Especially in virtual reality. I tend to… That’s the other thing. I play a lot of video games. I think there’s a lot of room to make video games deeply fulfilling, like there’s a lot of space where that can go."
  },
  {
    "start": 1942,
    "end": 1943,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:55:42)",
    "text": "I didn’t know you played a lot of video games, because when I asked you specifically, “Should I play World of Warcraft or do Advent of Code,” you’re like, “Advent of Code, Advent of Code.”"
  },
  {
    "start": 1944,
    "end": 1945,
    "speaker": "Lex Fridman",
    "timestamp": "(04:55:50)",
    "text": "Oh, well, that might mean I’ve never played World of Warcraft because there’s certain games I avoid. Fortnite, by the way, I think was one of them because I was worried it’d become too addicted."
  },
  {
    "start": 1946,
    "end": 1947,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:56:00)",
    "text": "Yeah, yeah."
  },
  {
    "start": 1948,
    "end": 1949,
    "speaker": "Lex Fridman",
    "timestamp": "(04:56:01)",
    "text": "So there’s certain games I just know I won’t get super addicted to. Like for example, I’m terrified of Civilization. I have never played a Civ’s game because I’m worried. I’m worried the dark path in my lead because there’s some games just really pull you in. I’m much better with, that’s why I play Skyrim. I can play these games or a Baldur’s Gate, and moderate how much I play. And they could be like a lifelong companion versus an addiction where it’s like sunrise and you’re like, “What’s happening with my life?” And I find myself naked behind a dumpster somewhere just wondering what happened. Yeah, so that’s how I choose my video games."
  },
  {
    "start": 1950,
    "end": 1951,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:56:43)",
    "text": "You’re not the first person who has specifically called out Civilization."
  },
  {
    "start": 1952,
    "end": 1953,
    "speaker": "Lex Fridman",
    "timestamp": "(04:56:48)",
    "text": "Yeah."
  },
  {
    "start": 1954,
    "end": 1955,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:56:48)",
    "text": "I’ve had more than one person, also very high up in the tech world, be like, “Civilization is my downfall. If I get near that game, I’m done.”"
  },
  {
    "start": 1956,
    "end": 1957,
    "speaker": "Lex Fridman",
    "timestamp": "(04:56:56)",
    "text": "Yeah."
  },
  {
    "start": 1958,
    "end": 1959,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:56:57)",
    "text": "I’ve never even played the game. Now it makes me be like, “Dude, I got to give this a try. That sounds crazy.”"
  },
  {
    "start": 1960,
    "end": 1961,
    "speaker": "Lex Fridman",
    "timestamp": "(04:57:02)",
    "text": "Yeah. And the new one is actually supposed to be-"
  },
  {
    "start": 1962,
    "end": 1963,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:57:00)",
    "text": "Give this a try. That sounds crazy."
  },
  {
    "start": 1964,
    "end": 1965,
    "speaker": "Lex Fridman",
    "timestamp": "(04:57:02)",
    "text": "Yeah. And the new one is actually supposed to be really, really good. What were we talking about? Yes. For that same young developer, is there a trajectory through jobs that you could give advice on? So you started out with Schedulicity?"
  },
  {
    "start": 1966,
    "end": 1967,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:57:17)",
    "text": "Yeah, that was my first full-time…. When I had the government contracting one before, that wasn’t quite full-time. It was in C. It was a lot of fun. And then building my own startup for quite some time. So if you count either of those as full-time, then those would be the full-time. Schedulicity was the official on the docs."
  },
  {
    "start": 1968,
    "end": 1969,
    "speaker": "Lex Fridman",
    "timestamp": "(04:57:32)",
    "text": "Is there some value to jumping around, working in one company and another to try to figure out what brings you joy?"
  },
  {
    "start": 1970,
    "end": 1971,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:57:41)",
    "text": "I think there’s a lot to that because not every job you’re going to get is going to be great. Now, your first job you could get could make you think you hate programming. It happened, I did an internship at a place and I keep on surprising you with more kind of things I did in the past, did an internship at-"
  },
  {
    "start": 1972,
    "end": 1973,
    "speaker": "Lex Fridman",
    "timestamp": "(04:57:59)",
    "text": "Fuck. You did so many things. It’s incredible."
  },
  {
    "start": 1974,
    "end": 1975,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:58:02)",
    "text": "… a place called Total Information Management System. Remember when I talked about that hours ago, about healthcare and that and industrial shipping and all that? It was a C-sharp shop. It was so bad that after I did that, I went and changed my major to mechanical engineering first semester in college."
  },
  {
    "start": 1976,
    "end": 1977,
    "speaker": "Lex Fridman",
    "timestamp": "(04:58:02)",
    "text": "Oh, boy. Oh, boy."
  },
  {
    "start": 1978,
    "end": 1979,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:58:17)",
    "text": "I thought I, “Okay. Actually I like computer science. I hate the programming.” So just because you’ve had a job doesn’t mean it’s going to be the one. And the thing is, here’s the best part though, if you get a job and you like it and you want to do it and it’s exciting, you don’t need to change. I think a lot of people are like, “Oh, I got to find the next thing. I’ve been here for two years.” There’s of this, you got to move around mindset. I don’t think you have to move around. I don’t think it hurts your career. Because if anything, you’ll gain more responsibility and you’ll be able to talk with way more authority. And the next time you interview, you’re going to be way more into like, “Oh yeah, I had to get these X people and these X people to be able to do all this stuff.”"
  },
  {
    "start": 1981,
    "end": 1982,
    "speaker": "Lex Fridman",
    "timestamp": "(04:59:15)",
    "text": "Especially when you’re younger, that’s the whole point. You’re like, “Take the risk. Take the leap out to the next thing, to the next thing.” And not for money, but for just personal joy, joy."
  },
  {
    "start": 1983,
    "end": 1984,
    "speaker": "ThePrimeagen",
    "timestamp": "(04:59:24)",
    "text": "And money could get at the end, that’s the best part. When you don’t strive for the money, sometimes the money just shows up anyways."
  },
  {
    "start": 1985,
    "end": 1986,
    "speaker": "Lex Fridman",
    "timestamp": "(04:59:29)",
    "text": "Yeah. And some of the, what makes life worth living is the people you work with, a good team. Some of it’s not to be generic, but culture matters. It’s whatever makes you happy. For example, I just had won’t call out places, but there’s certain companies where everybody is very nine to five. And even if the work is exciting, they don’t work hard enough I would say. I’m one of those people that likes to go all out, likes to be surrounded by people who are super passionate. Now to be fair, a lot of them don’t have families or don’t-"
  },
  {
    "start": 1987,
    "end": 1988,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:00:06)",
    "text": "Yeah."
  },
  {
    "start": 1989,
    "end": 1990,
    "speaker": "Lex Fridman",
    "timestamp": "(05:00:07)",
    "text": "It’s a fascinating choice. I really don’t want to talk down on any choice like work-life balance or not, I think both are beautiful paths. And if you really derive a lot of value from joy from your work, going all in, at least for some stretch of your life is a beautiful thing to do. Just all out, full-on passion, sacrifice a lot of social life, all that kind of stuff. I don’t know. That could also be beautiful."
  },
  {
    "start": 1991,
    "end": 1992,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:00:39)",
    "text": "There could be something very, very exciting about that in some sense, especially if you’re building your own thing. I could imagine that would be very exciting. If I was Amazon, Jeff Bezos building Amazon, one could imagine that those early years were probably very rough and the amount of hours he probably put in we’re very, very rough. But I will say that there’s this unique aspect in our culture where we make this as an equal trade-off between family or work, like “Oh, you do or you don’t have to have kids.” And my only real notion with that one is that you will never know your capacity for love until you have kids. You just don’t know. And some people are like, “Oh yeah, but I love my dog.” It’s just like I loved my dogs too. And then I had kids and now my dogs are, “They’re all right. I like them.”"
  },
  {
    "start": 1993,
    "end": 1994,
    "speaker": "Lex Fridman",
    "timestamp": "(05:01:26)",
    "text": "I get it."
  },
  {
    "start": 1995,
    "end": 1996,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:01:26)",
    "text": "I could come home and I pet Indy and I’m like, “Oh, Indy.” And then I’m just like, “Okay, bye Indy.” I can’t even describe the difference between the two, it’s not even the same. And so that trade-off making is no one can tell you what it’s like because there’s a real reality that’s right now, and I’m sure, I’m 100% positive this is with my wife as well, where if right now we got news that said you have some medical procedure where if we do this, you will die, but your kid will live, there’s not a question in my soul that I wouldn’t do that. If I could look into the future and if I had to die right now knowing that my kids would’ve a better life, they would be happier, they’d be more fulfilled and all those things, I guarantee you either my wife or I would take that every single time."
  },
  {
    "start": 1998,
    "end": 1999,
    "speaker": "Lex Fridman",
    "timestamp": "(05:02:32)",
    "text": "Yeah, yeah."
  },
  {
    "start": 2000,
    "end": 2001,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:02:33)",
    "text": "Yeah. I thought I knew. I didn’t know."
  },
  {
    "start": 2002,
    "end": 2003,
    "speaker": "Lex Fridman",
    "timestamp": "(05:02:35)",
    "text": "But to add on top of that, some of the most successful people I know, some of the most productive people I know have kids. So I don’t know if it’s even a trade-off. That love you feel, it seems to be a catalyst to make sure you have less time, but you’re going to use that time better to be productive."
  },
  {
    "start": 2004,
    "end": 2006,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:02:56)",
    "text": "I would argue that it definitely changed a lot of my life and how I approach problems and everything, in a very different way. Reddit questions"
  },
  {
    "start": 2007,
    "end": 2008,
    "speaker": "Lex Fridman",
    "timestamp": "(05:03:03)",
    "text": "Let me ask some random questions from Reddit. On a scale of one to 10, how much do you hate every product Microsoft has ever created and why is it a 10? I think we covered that."
  },
  {
    "start": 2009,
    "end": 2010,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:03:16)",
    "text": "We haven’t technically covered it."
  },
  {
    "start": 2011,
    "end": 2012,
    "speaker": "Lex Fridman",
    "timestamp": "(05:03:18)",
    "text": "There you go. All right, go ahead. Go ahead."
  },
  {
    "start": 2013,
    "end": 2014,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:03:20)",
    "text": "Okay."
  },
  {
    "start": 2015,
    "end": 2016,
    "speaker": "Lex Fridman",
    "timestamp": "(05:03:20)",
    "text": "Use your time."
  },
  {
    "start": 2017,
    "end": 2018,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:03:22)",
    "text": "The only thing I’ll say is that I don’t like that Microsoft pretends to be the good guy when what they really wanted to get you addicted to their products, to get you to use their products as much as possible so they can extract as much money out of you."
  },
  {
    "start": 2019,
    "end": 2020,
    "speaker": "Lex Fridman",
    "timestamp": "(05:03:32)",
    "text": "Well, in this world, are there really good guys?"
  },
  {
    "start": 2021,
    "end": 2022,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:03:35)",
    "text": "That’s a great point. I would argue Neovim is a great guy. There’s no way they can make money. Justin Keyes is the benevolent dictator and he thinks deeply about the product and tries to make it the best as possible. Whereas something like Microsoft, they made VS Code as a loss leader. Copilot’s probably operating on a loss leader. These things are all getting you so tied into, GitHub, remote workspaces, CI, Copilot, you become this trapped in permanent person and if that price rises, the switching cost is so great at some point that you’ll never be able to switch. That’s my only fear is that Microsoft was once accused of EEE and it feels like they’re EEEing again."
  },
  {
    "start": 2023,
    "end": 2024,
    "speaker": "Lex Fridman",
    "timestamp": "(05:04:13)",
    "text": "Yeah, I’m nervous about criticizing a good thing because you could see an incentive to do that good thing, like Google creating all these services that don’t make money like Gmail for example, you can cynically say they’re only doing that to tie you into an ecosystem so they can basically keep you for life. But also it’s awesome that they created Gmail-"
  },
  {
    "start": 2025,
    "end": 2026,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:04:37)",
    "text": "Yeah."
  },
  {
    "start": 2027,
    "end": 2028,
    "speaker": "Lex Fridman",
    "timestamp": "(05:04:38)",
    "text": "… and they created an incredible product, so-"
  },
  {
    "start": 2029,
    "end": 2030,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:04:40)",
    "text": "I can side with you on that one. It is a good product. VS Code is a good product."
  },
  {
    "start": 2031,
    "end": 2032,
    "speaker": "Lex Fridman",
    "timestamp": "(05:04:44)",
    "text": "Yeah."
  },
  {
    "start": 2033,
    "end": 2034,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:04:45)",
    "text": "Now, I think don’t put that on the… But it is fine. They did a great job."
  },
  {
    "start": 2035,
    "end": 2036,
    "speaker": "Lex Fridman",
    "timestamp": "(05:04:50)",
    "text": "Yeah. So there is going to be financial incentives behind some of these companies. And by the way, me defending, not defending, but saying positive things about Microsoft is just so I could talk shit to Prime. But that’s…"
  },
  {
    "start": 2037,
    "end": 2038,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:05:02)",
    "text": "I love that by the way."
  },
  {
    "start": 2039,
    "end": 2040,
    "speaker": "Lex Fridman",
    "timestamp": "(05:05:03)",
    "text": "Yeah, Linux is my first and last love, it definitely… The spirit of Linux and open source is a beautiful thing so I do think that when you have these large corporations, even when they try to do good, oftentimes the profit imperative just takes over and they can corrupt themselves and Microsoft has a long history of doing just that to themselves."
  },
  {
    "start": 2041,
    "end": 2042,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:05:28)",
    "text": "Yeah."
  },
  {
    "start": 2043,
    "end": 2044,
    "speaker": "Lex Fridman",
    "timestamp": "(05:05:28)",
    "text": "That said, they’ve done, they have you could say for cynical reason because they want to seem like the good guy amongst developers, but they’ve done a lot to support open source. It’s just like, same with Meta, Meta has done insane amount-"
  },
  {
    "start": 2045,
    "end": 2046,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:05:43)",
    "text": "Yeah."
  },
  {
    "start": 2047,
    "end": 2048,
    "speaker": "Lex Fridman",
    "timestamp": "(05:05:43)",
    "text": "… to support open source. You can say, actually for that one, I don’t know if I can even make a financial or a cynical case for why Meta is open sourcing Llama and these-"
  },
  {
    "start": 2049,
    "end": 2050,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:05:55)",
    "text": "Yeah, that one’s confusing. It just seems great."
  },
  {
    "start": 2051,
    "end": 2052,
    "speaker": "Lex Fridman",
    "timestamp": "(05:05:56)",
    "text": "Maybe for hiring. But no, I think that’s legit, just an ethical, really powerful decision. And sometimes these companies, because they have a lot of cash, can make the right, do the right thing."
  },
  {
    "start": 2053,
    "end": 2054,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:06:13)",
    "text": "Yeah. It’s a really positive way to look at it and I think that’s really nice."
  },
  {
    "start": 2055,
    "end": 2056,
    "speaker": "Lex Fridman",
    "timestamp": "(05:06:17)",
    "text": "Well, we should always be skeptical."
  },
  {
    "start": 2057,
    "end": 2058,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:06:18)",
    "text": "Yeah, I mean because at the end of the day, companies, they’re not good, they’re not bad, they’re morally neutral. It’s the people that are running them, the decisions those people make that are really where the bad or the good comes from."
  },
  {
    "start": 2059,
    "end": 2060,
    "speaker": "Lex Fridman",
    "timestamp": "(05:06:28)",
    "text": "Another question, ask him if he knows how to milk a cow? I’ve already asked that. The answer is-"
  },
  {
    "start": 2061,
    "end": 2062,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:06:33)",
    "text": "No."
  },
  {
    "start": 2063,
    "end": 2064,
    "speaker": "Lex Fridman",
    "timestamp": "(05:06:34)",
    "text": "Oh, no, you don’t know."
  },
  {
    "start": 2065,
    "end": 2066,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:06:35)",
    "text": "I’ve never milked a cow."
  },
  {
    "start": 2067,
    "end": 2068,
    "speaker": "Lex Fridman",
    "timestamp": "(05:06:36)",
    "text": "Never milked a cow."
  },
  {
    "start": 2069,
    "end": 2070,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:06:37)",
    "text": "Almost been killed by a cow, but never milked a cow."
  },
  {
    "start": 2071,
    "end": 2072,
    "speaker": "Lex Fridman",
    "timestamp": "(05:06:40)",
    "text": "Did you ever ride a bull?"
  },
  {
    "start": 2073,
    "end": 2074,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:06:41)",
    "text": "No."
  },
  {
    "start": 2075,
    "end": 2076,
    "speaker": "Lex Fridman",
    "timestamp": "(05:06:42)",
    "text": "All right. Why male models?"
  },
  {
    "start": 2077,
    "end": 2078,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:06:46)",
    "text": "Okay, so I can explain that one. I will say something like, “I really dislike the color purple because the color purple makes me upset.” I don’t know, just something very benign. But then someone right afterwards will be like, “But why don’t you like the color purple?” And it’ll just be like… It’s just like Derek Zoolander. It’s just like I get done on a five-minute talk about it and then the next question’s like, “But seriously why though?” It was just like, “Why male models?”"
  },
  {
    "start": 2079,
    "end": 2080,
    "speaker": "Lex Fridman",
    "timestamp": "(05:07:12)",
    "text": "Yeah. So that’s the Zoolander reference when there’s a long explanation why male models and he agrees and then forgets."
  },
  {
    "start": 2081,
    "end": 2082,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:07:20)",
    "text": "Yep."
  },
  {
    "start": 2083,
    "end": 2084,
    "speaker": "Lex Fridman",
    "timestamp": "(05:07:24)",
    "text": "What is Ligma?"
  },
  {
    "start": 2085,
    "end": 2086,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:07:26)",
    "text": "I’ve died by Ligma quite a few times. So do you know the origin story of Ligma?"
  },
  {
    "start": 2087,
    "end": 2088,
    "speaker": "Lex Fridman",
    "timestamp": "(05:07:30)",
    "text": "No."
  },
  {
    "start": 2089,
    "end": 2090,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:07:31)",
    "text": "So Ninja, famous streamer, someone got him with Ligma and said like, “Oh,” something like, “Have you heard about Ligma?” And he was like, “No.” And he’s like, “Oh, Ligma balls.” And then after that Ninja got so hurt by getting had by that, he started banning anyone in chat who’s said the word Ligma or something like that. And so then if you don’t embrace the meme you get destroyed. So of course, gets destroyed and so then the whole goal is that, can people get me with Ligma? TJ did iladies. He’s like, “Oh, did you hear that E-girls got renamed to iladies?” And I just didn’t even see it coming. And I was just like, “What?” And he’s like, “iladies nuts on your face.” And then it’s just like, “Oh my gosh.” And then a pirate software has also got me like, “Oh, have you heard about Google SIMA,” which SEMA is a real product by Google>"
  },
  {
    "start": 2092,
    "end": 2093,
    "speaker": "Lex Fridman",
    "timestamp": "(05:08:24)",
    "text": "Please ask him about the size of his dict."
  },
  {
    "start": 2094,
    "end": 2095,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:08:28)",
    "text": "Okay, so that’s dict, that’s dictionary in Python."
  },
  {
    "start": 2096,
    "end": 2097,
    "speaker": "Lex Fridman",
    "timestamp": "(05:08:32)",
    "text": "Who doesn’t love dicts?"
  },
  {
    "start": 2098,
    "end": 2099,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:08:34)",
    "text": "Yeah, that’s a great question. Just a dicts party when you use Python."
  },
  {
    "start": 2100,
    "end": 2101,
    "speaker": "Lex Fridman",
    "timestamp": "(05:08:38)",
    "text": "I love dicts."
  },
  {
    "start": 2102,
    "end": 2103,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:08:39)",
    "text": "That should be a T-shirt. That’s actually a hilarious T-shirt. So on Stack Overflow, you can ask any question you want, and I decided to craft a question one day on Stack Overflow that says how to measure your dict and bytes. And then I proceeded to really go to town and explain all the different things like, “Well, what about the cost of the strings and the references?” And when you really get both hands on your dict and really go after it, it’s very hard to, really threw in some innuendos. The Stack Overflow team deleted the question, and then someone hand wrote me an email explaining why they deleted the question and complimented me on how thoroughly and thoughtful the question was just to weave in innuendos and that the entire team was impressed, but it’s inappropriate and it had to be deleted and don’t do it again or we’re going to ban your account."
  },
  {
    "start": 2105,
    "end": 2106,
    "speaker": "Lex Fridman",
    "timestamp": "(05:09:48)",
    "text": "Oh, no."
  },
  {
    "start": 2107,
    "end": 2108,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:09:49)",
    "text": "… “No, wait a second. Are you the dict guy?”"
  },
  {
    "start": 2109,
    "end": 2110,
    "speaker": "Lex Fridman",
    "timestamp": "(05:09:51)",
    "text": "Yeah."
  },
  {
    "start": 2111,
    "end": 2112,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:09:51)",
    "text": "That was his only question was that. And I was just like, “Let’s go.” I didn’t even say anything about me and he already knew immediately I was the dict guy."
  },
  {
    "start": 2113,
    "end": 2114,
    "speaker": "Lex Fridman",
    "timestamp": "(05:10:01)",
    "text": "I should say in all seriousness, I think I’ve had a bunch of conversations in the Python world where I would have to mention the name of this data structure and it makes me uncomfortable every time."
  },
  {
    "start": 2115,
    "end": 2116,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:10:10)",
    "text": "It’s a very unfortunate shortening of a word."
  },
  {
    "start": 2117,
    "end": 2118,
    "speaker": "Lex Fridman",
    "timestamp": "(05:10:13)",
    "text": "Dict. It’s just like when I go to the hardware store and ask for caulk and there’s always a nice old lady and I ask her where to find, and it’s very uncomfortable. I try to pronounce it as hard as I can."
  },
  {
    "start": 2119,
    "end": 2121,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:10:27)",
    "text": "Really get that L in there, like caulk. God"
  },
  {
    "start": 2122,
    "end": 2123,
    "speaker": "Lex Fridman",
    "timestamp": "(05:10:30)",
    "text": "Caulk, just to be clear. And try to avoid eye contact the whole time. You said that God was a big part, was a big part of your life. Can you speak to that a little bit more? Who is God and what effect, what role did he play in your life?"
  },
  {
    "start": 2124,
    "end": 2125,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:10:47)",
    "text": "So I did talk about that one important evening where I, for whatever reason, gained my conscious that moment. So obviously for me that I grew up with a life where I would probably argue myself as a functional atheist. I went to church a handful of times. I can’t quite really remember actually going to church as a family in any sort of sense. So there wasn’t some super strong tie or anything like that to it. Pretty much anyone else growing up in America in the ’90s, you had some sort of impact or intersection with church at some point in your life, that was just a very normal thing I would probably say. And so when that happened, it was a fairly big surprise for me. I wasn’t necessarily going that direction or deciding to do any of those things."
  },
  {
    "start": 2129,
    "end": 2130,
    "speaker": "Lex Fridman",
    "timestamp": "(05:13:29)",
    "text": "He gave you a chance to be happy."
  },
  {
    "start": 2131,
    "end": 2132,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:13:31)",
    "text": "Yeah. He gave me a chance not just to be happy, but also made it so that the first time I can actually feel forgiven I guess in some sense, and able to forgive people that hurt me. For a long time I had this weight I’d carry around from the things I hated about high school and all that kind of stuff. And through that experience, I just wrote down every last person’s name and actually held them with me for quite some time and this was the list of people I forgave. And I read it a few times. I couldn’t let myself be angry or consumed by that kind of stuff because hate is so sticky, it sticks for a lifetime. And there really is only one cure for hate, which is forgiveness. I just don’t think you can get rid of it without that."
  },
  {
    "start": 2134,
    "end": 2135,
    "speaker": "Lex Fridman",
    "timestamp": "(05:14:30)",
    "text": "What’s the role of love in the human condition, to go to the philosophical, and what’s been the role of love in your life?"
  },
  {
    "start": 2136,
    "end": 2137,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:14:40)",
    "text": "It’s very obvious that every person wants or desires love. My wife has recently convinced me to watch Love is Blind with her one time. And you watch the show and if you’re not familiar with it, it feels like just a disaster of an experiment to just cause crazy filming. But anyways, the idea is that if you just don’t see somebody, you can fall in love with somebody and want to marry them after 10 days or some very small period of time. And what you really end up seeing is all these people who are just desperate for actually love. And there’s some part of it… I told my wife, “It’s like love gladiators.” We’re watching people battle it out for drama and really what they want is love. And it’s like they’re fighting to the death and love, if you will. And it’s this almost kind of sad aspect to watch."
  },
  {
    "start": 2140,
    "end": 2141,
    "speaker": "Lex Fridman",
    "timestamp": "(05:16:48)",
    "text": "Yeah, that’s the tragic aspect of life. I think there’s a deep loneliness in all of us and a longing to be a part of this bigger thing. And that longing is a love and it has many names, but yeah. Yeah, the love aspect of it, it’s the beautiful aspect of life, the tragedies, the loneliness, and the unfortunate suffering that is a fundamental part of life and the beautiful aspect is the love."
  },
  {
    "start": 2142,
    "end": 2143,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:17:22)",
    "text": "Yeah."
  },
  {
    "start": 2144,
    "end": 2145,
    "speaker": "Lex Fridman",
    "timestamp": "(05:17:24)",
    "text": "Which I think is a good time to mention more Reddit, the place for everlasting positivity and love. Somebody wrote, “Please thank him, you, for his everlasting positivity and give him a big hug for me.” So I won’t give you a big hug on camera because I’m afraid I’ll get a boner and that’ll be very unfortunate."
  },
  {
    "start": 2146,
    "end": 2147,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:17:51)",
    "text": "Hey, let’s not bring dicts into this again, okay?"
  },
  {
    "start": 2148,
    "end": 2149,
    "speaker": "Lex Fridman",
    "timestamp": "(05:17:53)",
    "text": "It’s my favorite data structure. Like I said, I love dicts, all kinds of dicts, ordered dicts-"
  },
  {
    "start": 2150,
    "end": 2151,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:18:00)",
    "text": "Unordered."
  },
  {
    "start": 2152,
    "end": 2153,
    "speaker": "Lex Fridman",
    "timestamp": "(05:18:01)",
    "text": "… unordered dicts. I don’t discriminate. Yeah, but just that to say big thank you from me. I listen to you a lot and I just really enjoy… I’ve been going through a lot of shit myself and just the positivity, even when you’re building the stupidest shit, it’s just the positivity radiates from you and you inspire me to be a good person. You inspire me to build stuff. So thank you. And I’m sure there’s many, many others who listen to you for the same reason. So thank you for your positivity. Thank you for being the light in many people’s lives, and thank you for talking to me, brother."
  },
  {
    "start": 2154,
    "end": 2155,
    "speaker": "ThePrimeagen",
    "timestamp": "(05:18:43)",
    "text": "Dang. That was very, very kind. I really do appreciate all those extremely nice words even from Reddit. That’s very surprising. But thank you. I mean, I know you know that there’s many people’s lives, and I’m sure you’ve received the letters that have been changed from actions and things you’ve said and things you’ve done. And so it’s one of the best parts about doing this side is that you get a chance to potentially improve somebody’s life. And you getting to interview a lot of people, there’s a lot of people that listened to Chris Latner and saw his excitement for Swift and probably went and learned Swift and then got really amazing jobs and it can be all origined back to back to you in that interview. And so those are amazing things. And so same goes back to you, you’ve done a lot of good stuff."
  },
  {
    "start": 2156,
    "end": 2157,
    "speaker": "Lex Fridman",
    "timestamp": "(05:19:34)",
    "text": "Right back at you brother. Thank you for talking today. Thanks for listening to this conversation with Michael Paulson, aka ThePrimeagen. To support this podcast, please check out our sponsors in the description. And now let me leave you with some words from Paulo Coelho. “When we strive to become better than we are, everything around us becomes better too.” Thank you for listening and hope to see you next time."
  }
]